:py:mod:`py_experimenter.database_connector`
============================================

.. py:module:: py_experimenter.database_connector


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   py_experimenter.database_connector.DatabaseConnector




.. py:class:: DatabaseConnector(config: configparser.ConfigParser)


   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: _extract_credentials()
      :abstractmethod:


   .. py:method:: _test_connection()
      :abstractmethod:


   .. py:method:: connect()
      :abstractmethod:


   .. py:method:: close_connection(connection)


   .. py:method:: commit(connection) -> None


   .. py:method:: execute(cursor, sql_statement, values=None) -> None


   .. py:method:: cursor(connection)


   .. py:method:: fetchall(cursor)


   .. py:method:: create_table_if_not_existing() -> None


   .. py:method:: _table_exists(cursor)
      :abstractmethod:


   .. py:method:: _compute_columns(keyfields, resultfields)
      :staticmethod:


   .. py:method:: _exclude_fixed_columns(columns: List[str]) -> List[str]


   .. py:method:: _create_table(cursor, columns: List[Tuple[str]], table_name: str, logtable: bool = False)


   .. py:method:: _get_create_table_query(columns: List[Tuple[str]], table_name: str, logtable: bool)


   .. py:method:: get_autoincrement(self)
      :staticmethod:


   .. py:method:: _table_has_correct_structure(cursor, typed_fields)
      :abstractmethod:


   .. py:method:: fill_table(parameters=None, fixed_parameter_combinations=None) -> None


   .. py:method:: _check_combination_in_existing_rows(combination, existing_rows, keyfield_names) -> bool


   .. py:method:: _get_existing_rows(column_names)
      :abstractmethod:


   .. py:method:: get_experiment_configuration()


   .. py:method:: _execute_queries(connection, cursor) -> Tuple[int, List, List]


   .. py:method:: _pull_open_experiment() -> Tuple[int, List, List]
      :abstractmethod:


   .. py:method:: _write_to_database(values: List, columns=List[str]) -> None


   .. py:method:: prepare_write_query(table_name: str, keys) -> str


   .. py:method:: update_database(table_name: str, values: Dict[str, Union[str, int, object]], condition: str)


   .. py:method:: _prepare_update_query(table_name: str, values: Dict[str, Union[str, int, object]], condition: str) -> str


   .. py:method:: reset_experiments(*states: str) -> None


   .. py:method:: _pop_experiments_with_status(status: Optional[str] = None) -> Tuple[List[str], List[List]]


   .. py:method:: _get_experiments_with_condition(condition: Optional[str] = None) -> Tuple[List[str], List[List]]


   .. py:method:: _delete_experiments_with_condition(condition: Optional[str] = None) -> None


   .. py:method:: get_structure_from_table(cursor)
      :abstractmethod:


   .. py:method:: execute_queries(queries: List[str])


   .. py:method:: delete_table() -> None


   .. py:method:: get_logtable(logtable_name: str) -> pandas.DataFrame


   .. py:method:: get_table(table_name: Optional[str] = None) -> pandas.DataFrame



