{
	"cells": [
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "iLnG0-_UC6ig"
			},
			"source": [
				"# Example: General Usage\n",
				"\n",
				"This example shows the general usage of `PyExperimenter`, from creating an experiment configuration file, over the actual execution of (dummy) experiments, to the extraction of experimental results. \n",
				"\n",
				"To execute this notebook you need to install:\n",
				"```\n",
				"pip install py_experimenter\n",
				"pip install scikit-learn\n",
				"```"
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "qkmxwSl8DW-V"
			},
			"source": [
				"## Experiment Configuration File\n",
				"This notebook shows an example execution of `PyExperimenter` based on an experiment configuration file. Further explanation about the usage of `PyExperimenter` can be found in the [documentation](https://tornede.github.io/py_experimenter/usage.html)."
			]
		},
		{
			"cell_type": "code",
			"execution_count": 1,
			"metadata": {
				"id": "fmyy_sAuBCaG"
			},
			"outputs": [],
			"source": [
				"import os\n",
				"\n",
				"content = \"\"\"\n",
				"[PY_EXPERIMENTER]\n",
				"provider = sqlite \n",
				"database = py_experimenter\n",
				"table = example_general_usage \n",
				"\n",
				"keyfields = dataset, cross_validation_splits:int, seed:int, kernel\n",
				"dataset = iris\n",
				"cross_validation_splits = 5\n",
				"seed = 2:6:2 \n",
				"kernel = linear, poly, rbf, sigmoid\n",
				"\n",
				"resultfields = pipeline:LONGTEXT, train_f1:DECIMAL, train_accuracy:DECIMAL, test_f1:DECIMAL, test_accuracy:DECIMAL\n",
				"resultfields.timestamps = false\n",
				"\n",
				"[CUSTOM] \n",
				"path = sample_data\n",
				"\n",
				"[codecarbon]\n",
				"offline_mode = False\n",
				"measure_power_secs = 25\n",
				"tracking_mode = process\n",
				"log_level = error\n",
				"save_to_file = True\n",
				"output_dir = output/CodeCarbon\n",
				"\"\"\"\n",
				"# Create config directory if it does not exist\n",
				"if not os.path.exists('config'):\n",
				"    os.mkdir('config')\n",
				"    \n",
				"# Create config file\n",
				"experiment_configuration_file_path = os.path.join('config', 'example_general_usage.cfg')\n",
				"with open(experiment_configuration_file_path, \"w\") as f: \n",
				"  f.write(content)"
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "b5pjc0TMBjnr"
			},
			"source": [
				"## Defining the execution function\n",
				"\n",
				"Next, the execution of a single experiment has to be defined. Note that this is a dummy example, which contains limited reasonable code. It is meant to show the core functionality of the PyExperimenter. \n",
				"\n",
				"The method is called with the parameters, i.e. `keyfields`, of a database entry. The results are meant to be processed to be written into the database, i.e. as `resultfields`. "
			]
		},
		{
			"cell_type": "code",
			"execution_count": 2,
			"metadata": {
				"id": "gHr-IN2gBe8V"
			},
			"outputs": [],
			"source": [
				"import random\n",
				"import numpy as np\n",
				"\n",
				"from py_experimenter.result_processor import ResultProcessor\n",
				"\n",
				"from sklearn.datasets import load_iris\n",
				"from sklearn.pipeline import make_pipeline\n",
				"from sklearn.preprocessing import StandardScaler\n",
				"from sklearn.svm import SVC\n",
				"from sklearn.model_selection import cross_validate\n",
				"\n",
				"def run_ml(parameters: dict, result_processor: ResultProcessor, custom_config: dict):\n",
				"  seed = parameters['seed']\n",
				"  random.seed(seed)\n",
				"  np.random.seed(seed)\n",
				"\n",
				"  data = load_iris()\n",
				"  # In case you want to load a file from a path\n",
				"  # path = os.path.join(custom_config['path'], parameters['dataset'])\n",
				"  # data = pd.read_csv(path)\n",
				"\n",
				"  X = data.data\n",
				"  y = data.target\n",
				"\n",
				"  model = make_pipeline(StandardScaler(), SVC(kernel=parameters['kernel'], gamma='auto'))  \n",
				"  result_processor.process_results({\n",
				"    'pipeline': str(model)\n",
				"  })\n",
				"\n",
				"  if parameters['dataset'] != 'iris':\n",
				"    raise ValueError(\"Example error\")\n",
				"\n",
				"  scores = cross_validate(model, X, y, \n",
				"    cv=parameters['cross_validation_splits'],\n",
				"    scoring=('accuracy', 'f1_micro'),\n",
				"    return_train_score=True\n",
				"  )\n",
				"  \n",
				"  result_processor.process_results({\n",
				"    'train_f1': np.mean(scores['train_f1_micro']),\n",
				"    'train_accuracy': np.mean(scores['train_accuracy'])\n",
				"  })\n",
				"\n",
				"  result_processor.process_results({\n",
				"    'test_f1': np.mean(scores['test_f1_micro']),\n",
				"    'test_accuracy': np.mean(scores['test_accuracy'])\n",
				"  })"
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "Sa6mN98NBua-"
			},
			"source": [
				"## Executing PyExperimenter\n",
				"\n",
				"The actual execution of the PyExperimenter is done in multiple steps. \n",
				"\n",
				"### Initialize PyExperimenter\n",
				"The PyExperimenter is initialized with the previously created configuration file. Additionally, `PyExperimenter` is given a `name`, i.e. job id, which is especially useful for parallel executions of multiple experiments on HPC. "
			]
		},
		{
			"cell_type": "code",
			"execution_count": 3,
			"metadata": {
				"id": "EFdaTyYQ-yqa"
			},
			"outputs": [],
			"source": [
				"from py_experimenter.experimenter import PyExperimenter\n",
				"\n",
				"experimenter = PyExperimenter(experiment_configuration_file_path=experiment_configuration_file_path, name='example_notebook')"
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "tdLXOI7eFhBh"
			},
			"source": [
				"### Fill Table\n",
				"\n",
				"The table is filled based on the above created configuration file with `fill_table_from_config()`. Therefore, the cartesian product of all keyfields makes up the content of the table. Additionally, a custom defined row, i.e. a custom defined keyfield tuple, is added with `fill_table_with_rows()`. \n",
				"\n",
				"Note that the table can easily be obtained as `pandas.Dataframe` via `experimenter.get_table()`."
			]
		},
		{
			"cell_type": "code",
			"execution_count": 4,
			"metadata": {
				"colab": {
					"base_uri": "https://localhost:8080/",
					"height": 457
				},
				"id": "5DJlSHO3-2-v",
				"outputId": "447580e6-6a16-42ca-c44b-48a12829af91"
			},
			"outputs": [
				{
					"data": {
						"text/html": [
							"<div>\n",
							"<style scoped>\n",
							"    .dataframe tbody tr th:only-of-type {\n",
							"        vertical-align: middle;\n",
							"    }\n",
							"\n",
							"    .dataframe tbody tr th {\n",
							"        vertical-align: top;\n",
							"    }\n",
							"\n",
							"    .dataframe thead th {\n",
							"        text-align: right;\n",
							"    }\n",
							"</style>\n",
							"<table border=\"1\" class=\"dataframe\">\n",
							"  <thead>\n",
							"    <tr style=\"text-align: right;\">\n",
							"      <th></th>\n",
							"      <th>ID</th>\n",
							"      <th>dataset</th>\n",
							"      <th>cross_validation_splits</th>\n",
							"      <th>seed</th>\n",
							"      <th>kernel</th>\n",
							"      <th>creation_date</th>\n",
							"      <th>status</th>\n",
							"      <th>start_date</th>\n",
							"      <th>name</th>\n",
							"      <th>machine</th>\n",
							"      <th>pipeline</th>\n",
							"      <th>train_f1</th>\n",
							"      <th>train_accuracy</th>\n",
							"      <th>test_f1</th>\n",
							"      <th>test_accuracy</th>\n",
							"      <th>end_date</th>\n",
							"      <th>error</th>\n",
							"    </tr>\n",
							"  </thead>\n",
							"  <tbody>\n",
							"    <tr>\n",
							"      <th>0</th>\n",
							"      <td>1</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>1</th>\n",
							"      <td>2</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>2</th>\n",
							"      <td>3</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>3</th>\n",
							"      <td>4</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>4</th>\n",
							"      <td>5</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>5</th>\n",
							"      <td>6</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>6</th>\n",
							"      <td>7</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>7</th>\n",
							"      <td>8</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>8</th>\n",
							"      <td>9</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>9</th>\n",
							"      <td>10</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>10</th>\n",
							"      <td>11</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>11</th>\n",
							"      <td>12</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>12</th>\n",
							"      <td>13</td>\n",
							"      <td>error_dataset</td>\n",
							"      <td>3</td>\n",
							"      <td>42</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"  </tbody>\n",
							"</table>\n",
							"</div>"
						],
						"text/plain": [
							"    ID        dataset  cross_validation_splits  seed   kernel  \\\n",
							"0    1           iris                        5     2   linear   \n",
							"1    2           iris                        5     4   linear   \n",
							"2    3           iris                        5     6   linear   \n",
							"3    4           iris                        5     2     poly   \n",
							"4    5           iris                        5     4     poly   \n",
							"5    6           iris                        5     6     poly   \n",
							"6    7           iris                        5     2      rbf   \n",
							"7    8           iris                        5     4      rbf   \n",
							"8    9           iris                        5     6      rbf   \n",
							"9   10           iris                        5     2  sigmoid   \n",
							"10  11           iris                        5     4  sigmoid   \n",
							"11  12           iris                        5     6  sigmoid   \n",
							"12  13  error_dataset                        3    42   linear   \n",
							"\n",
							"          creation_date   status start_date  name machine pipeline train_f1  \\\n",
							"0   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"1   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"2   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"3   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"4   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"5   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"6   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"7   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"8   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"9   2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"10  2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"11  2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"12  2023-06-17 08:59:12  created       None  None    None     None     None   \n",
							"\n",
							"   train_accuracy test_f1 test_accuracy end_date error  \n",
							"0            None    None          None     None  None  \n",
							"1            None    None          None     None  None  \n",
							"2            None    None          None     None  None  \n",
							"3            None    None          None     None  None  \n",
							"4            None    None          None     None  None  \n",
							"5            None    None          None     None  None  \n",
							"6            None    None          None     None  None  \n",
							"7            None    None          None     None  None  \n",
							"8            None    None          None     None  None  \n",
							"9            None    None          None     None  None  \n",
							"10           None    None          None     None  None  \n",
							"11           None    None          None     None  None  \n",
							"12           None    None          None     None  None  "
						]
					},
					"execution_count": 4,
					"metadata": {},
					"output_type": "execute_result"
				}
			],
			"source": [
				"experimenter.fill_table_from_config()\n",
				"\n",
				"experimenter.fill_table_with_rows(rows=[\n",
				"      {'dataset': 'error_dataset', 'cross_validation_splits': 3, 'seed': 42, 'kernel':'linear'}])\n",
				"\n",
				"# showing database table\n",
				"experimenter.get_table()"
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "jMGyvpTqFklu"
			},
			"source": [
				"### Execute PyExperimenter\n",
				"All experiments are executed one after the other by the same `PyExperimenter` due to `max_experiments=-1`. If just a single one or a predifined number of experiments should be executed, the `-1` has to be replaced by the according amount\n",
				"\n",
				"The first parameter, i.e. `run_ml`, relates to the actual method that should be executed with the given keyfields of the table. "
			]
		},
		{
			"cell_type": "code",
			"execution_count": 5,
			"metadata": {
				"colab": {
					"base_uri": "https://localhost:8080/",
					"height": 1000
				},
				"id": "cDsuIw4M_AyY",
				"outputId": "d242da6f-1c9e-421b-f916-694c1a98ba95"
			},
			"outputs": [
				{
					"name": "stderr",
					"output_type": "stream",
					"text": [
						"ERROR:root:Traceback (most recent call last):\n",
						"  File \"/home/lukas/development/code_projects/py_experimenter/py_experimenter/experimenter.py\", line 382, in _execution_wrapper\n",
						"    experiment_function(keyfield_values, result_processor, custom_fields)\n",
						"  File \"/tmp/ipykernel_28275/1244630566.py\", line 31, in run_ml\n",
						"    raise ValueError(\"Example error\")\n",
						"ValueError: Example error\n",
						"\n"
					]
				},
				{
					"data": {
						"text/html": [
							"<div>\n",
							"<style scoped>\n",
							"    .dataframe tbody tr th:only-of-type {\n",
							"        vertical-align: middle;\n",
							"    }\n",
							"\n",
							"    .dataframe tbody tr th {\n",
							"        vertical-align: top;\n",
							"    }\n",
							"\n",
							"    .dataframe thead th {\n",
							"        text-align: right;\n",
							"    }\n",
							"</style>\n",
							"<table border=\"1\" class=\"dataframe\">\n",
							"  <thead>\n",
							"    <tr style=\"text-align: right;\">\n",
							"      <th></th>\n",
							"      <th>ID</th>\n",
							"      <th>dataset</th>\n",
							"      <th>cross_validation_splits</th>\n",
							"      <th>seed</th>\n",
							"      <th>kernel</th>\n",
							"      <th>creation_date</th>\n",
							"      <th>status</th>\n",
							"      <th>start_date</th>\n",
							"      <th>name</th>\n",
							"      <th>machine</th>\n",
							"      <th>pipeline</th>\n",
							"      <th>train_f1</th>\n",
							"      <th>train_accuracy</th>\n",
							"      <th>test_f1</th>\n",
							"      <th>test_accuracy</th>\n",
							"      <th>end_date</th>\n",
							"      <th>error</th>\n",
							"    </tr>\n",
							"  </thead>\n",
							"  <tbody>\n",
							"    <tr>\n",
							"      <th>0</th>\n",
							"      <td>1</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:13</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:18</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>1</th>\n",
							"      <td>2</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:18</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:24</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>2</th>\n",
							"      <td>3</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:24</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:29</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>3</th>\n",
							"      <td>4</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:30</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>2023-06-17 08:59:35</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>4</th>\n",
							"      <td>5</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:35</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>2023-06-17 08:59:41</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>5</th>\n",
							"      <td>6</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:41</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>2023-06-17 08:59:46</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>6</th>\n",
							"      <td>7</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:46</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:52</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>7</th>\n",
							"      <td>8</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:52</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:57</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>8</th>\n",
							"      <td>9</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:57</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 09:00:03</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>9</th>\n",
							"      <td>10</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 09:00:03</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>2023-06-17 09:00:09</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>10</th>\n",
							"      <td>11</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 09:00:09</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>2023-06-17 09:00:14</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>11</th>\n",
							"      <td>12</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 09:00:14</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>2023-06-17 09:00:20</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>12</th>\n",
							"      <td>13</td>\n",
							"      <td>error_dataset</td>\n",
							"      <td>3</td>\n",
							"      <td>42</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>error</td>\n",
							"      <td>2023-06-17 09:00:20</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>2023-06-17 09:00:25</td>\n",
							"      <td>Traceback (most recent call last):\\n  File \"/h...</td>\n",
							"    </tr>\n",
							"  </tbody>\n",
							"</table>\n",
							"</div>"
						],
						"text/plain": [
							"    ID        dataset  cross_validation_splits  seed   kernel  \\\n",
							"0    1           iris                        5     2   linear   \n",
							"1    2           iris                        5     4   linear   \n",
							"2    3           iris                        5     6   linear   \n",
							"3    4           iris                        5     2     poly   \n",
							"4    5           iris                        5     4     poly   \n",
							"5    6           iris                        5     6     poly   \n",
							"6    7           iris                        5     2      rbf   \n",
							"7    8           iris                        5     4      rbf   \n",
							"8    9           iris                        5     6      rbf   \n",
							"9   10           iris                        5     2  sigmoid   \n",
							"10  11           iris                        5     4  sigmoid   \n",
							"11  12           iris                        5     6  sigmoid   \n",
							"12  13  error_dataset                        3    42   linear   \n",
							"\n",
							"          creation_date status           start_date              name  \\\n",
							"0   2023-06-17 08:59:12   done  2023-06-17 08:59:13  example_notebook   \n",
							"1   2023-06-17 08:59:12   done  2023-06-17 08:59:18  example_notebook   \n",
							"2   2023-06-17 08:59:12   done  2023-06-17 08:59:24  example_notebook   \n",
							"3   2023-06-17 08:59:12   done  2023-06-17 08:59:30  example_notebook   \n",
							"4   2023-06-17 08:59:12   done  2023-06-17 08:59:35  example_notebook   \n",
							"5   2023-06-17 08:59:12   done  2023-06-17 08:59:41  example_notebook   \n",
							"6   2023-06-17 08:59:12   done  2023-06-17 08:59:46  example_notebook   \n",
							"7   2023-06-17 08:59:12   done  2023-06-17 08:59:52  example_notebook   \n",
							"8   2023-06-17 08:59:12   done  2023-06-17 08:59:57  example_notebook   \n",
							"9   2023-06-17 08:59:12   done  2023-06-17 09:00:03  example_notebook   \n",
							"10  2023-06-17 08:59:12   done  2023-06-17 09:00:09  example_notebook   \n",
							"11  2023-06-17 08:59:12   done  2023-06-17 09:00:14  example_notebook   \n",
							"12  2023-06-17 08:59:12  error  2023-06-17 09:00:20  example_notebook   \n",
							"\n",
							"       machine                                           pipeline  train_f1  \\\n",
							"0   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.971667   \n",
							"1   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.971667   \n",
							"2   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.971667   \n",
							"3   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.936667   \n",
							"4   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.936667   \n",
							"5   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.936667   \n",
							"6   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.975000   \n",
							"7   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.975000   \n",
							"8   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.975000   \n",
							"9   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.896667   \n",
							"10  Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.896667   \n",
							"11  Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.896667   \n",
							"12  Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...       NaN   \n",
							"\n",
							"    train_accuracy   test_f1  test_accuracy             end_date  \\\n",
							"0         0.971667  0.966667       0.966667  2023-06-17 08:59:18   \n",
							"1         0.971667  0.966667       0.966667  2023-06-17 08:59:24   \n",
							"2         0.971667  0.966667       0.966667  2023-06-17 08:59:29   \n",
							"3         0.936667  0.933333       0.933333  2023-06-17 08:59:35   \n",
							"4         0.936667  0.933333       0.933333  2023-06-17 08:59:41   \n",
							"5         0.936667  0.933333       0.933333  2023-06-17 08:59:46   \n",
							"6         0.975000  0.966667       0.966667  2023-06-17 08:59:52   \n",
							"7         0.975000  0.966667       0.966667  2023-06-17 08:59:57   \n",
							"8         0.975000  0.966667       0.966667  2023-06-17 09:00:03   \n",
							"9         0.896667  0.893333       0.893333  2023-06-17 09:00:09   \n",
							"10        0.896667  0.893333       0.893333  2023-06-17 09:00:14   \n",
							"11        0.896667  0.893333       0.893333  2023-06-17 09:00:20   \n",
							"12             NaN       NaN            NaN  2023-06-17 09:00:25   \n",
							"\n",
							"                                                error  \n",
							"0                                                None  \n",
							"1                                                None  \n",
							"2                                                None  \n",
							"3                                                None  \n",
							"4                                                None  \n",
							"5                                                None  \n",
							"6                                                None  \n",
							"7                                                None  \n",
							"8                                                None  \n",
							"9                                                None  \n",
							"10                                               None  \n",
							"11                                               None  \n",
							"12  Traceback (most recent call last):\\n  File \"/h...  "
						]
					},
					"execution_count": 5,
					"metadata": {},
					"output_type": "execute_result"
				}
			],
			"source": [
				"experimenter.execute(run_ml, max_experiments=-1)\n",
				"\n",
				"# showing database table\n",
				"experimenter.get_table() "
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "ivljpd70Fnal"
			},
			"source": [
				"### Restart Failed Experiments\n",
				"\n",
				"As experiments fail at some time, those experiments were reset for another try with `reset_experiments()`. The `status` describes which table rows should be replace. In this example all failed experiments, i.e. having `status==error`, are reset. Experiments can also be reset based on multiple status by simply passing a list of status, e.g. `experimenter.reset_experiments('error', 'done')`. In that case, all experiments with status 'error' or 'done' will be reset."
			]
		},
		{
			"cell_type": "code",
			"execution_count": 6,
			"metadata": {
				"colab": {
					"base_uri": "https://localhost:8080/",
					"height": 955
				},
				"id": "3Ndelh6I_EXH",
				"outputId": "2eba52e5-2794-4ff7-ccc2-d2bfcf32b4d9"
			},
			"outputs": [
				{
					"data": {
						"text/html": [
							"<div>\n",
							"<style scoped>\n",
							"    .dataframe tbody tr th:only-of-type {\n",
							"        vertical-align: middle;\n",
							"    }\n",
							"\n",
							"    .dataframe tbody tr th {\n",
							"        vertical-align: top;\n",
							"    }\n",
							"\n",
							"    .dataframe thead th {\n",
							"        text-align: right;\n",
							"    }\n",
							"</style>\n",
							"<table border=\"1\" class=\"dataframe\">\n",
							"  <thead>\n",
							"    <tr style=\"text-align: right;\">\n",
							"      <th></th>\n",
							"      <th>ID</th>\n",
							"      <th>dataset</th>\n",
							"      <th>cross_validation_splits</th>\n",
							"      <th>seed</th>\n",
							"      <th>kernel</th>\n",
							"      <th>creation_date</th>\n",
							"      <th>status</th>\n",
							"      <th>start_date</th>\n",
							"      <th>name</th>\n",
							"      <th>machine</th>\n",
							"      <th>pipeline</th>\n",
							"      <th>train_f1</th>\n",
							"      <th>train_accuracy</th>\n",
							"      <th>test_f1</th>\n",
							"      <th>test_accuracy</th>\n",
							"      <th>end_date</th>\n",
							"      <th>error</th>\n",
							"    </tr>\n",
							"  </thead>\n",
							"  <tbody>\n",
							"    <tr>\n",
							"      <th>0</th>\n",
							"      <td>1</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:13</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:18</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>1</th>\n",
							"      <td>2</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:18</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:24</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>2</th>\n",
							"      <td>3</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:24</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:29</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>3</th>\n",
							"      <td>4</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:30</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>2023-06-17 08:59:35</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>4</th>\n",
							"      <td>5</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:35</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>2023-06-17 08:59:41</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>5</th>\n",
							"      <td>6</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:41</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>2023-06-17 08:59:46</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>6</th>\n",
							"      <td>7</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:46</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:52</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>7</th>\n",
							"      <td>8</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:52</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:57</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>8</th>\n",
							"      <td>9</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:57</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 09:00:03</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>9</th>\n",
							"      <td>10</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 09:00:03</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>2023-06-17 09:00:09</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>10</th>\n",
							"      <td>11</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 09:00:09</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>2023-06-17 09:00:14</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>11</th>\n",
							"      <td>12</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 09:00:14</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>2023-06-17 09:00:20</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>12</th>\n",
							"      <td>14</td>\n",
							"      <td>error_dataset</td>\n",
							"      <td>3</td>\n",
							"      <td>42</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 09:00:25</td>\n",
							"      <td>created</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"  </tbody>\n",
							"</table>\n",
							"</div>"
						],
						"text/plain": [
							"    ID        dataset  cross_validation_splits  seed   kernel  \\\n",
							"0    1           iris                        5     2   linear   \n",
							"1    2           iris                        5     4   linear   \n",
							"2    3           iris                        5     6   linear   \n",
							"3    4           iris                        5     2     poly   \n",
							"4    5           iris                        5     4     poly   \n",
							"5    6           iris                        5     6     poly   \n",
							"6    7           iris                        5     2      rbf   \n",
							"7    8           iris                        5     4      rbf   \n",
							"8    9           iris                        5     6      rbf   \n",
							"9   10           iris                        5     2  sigmoid   \n",
							"10  11           iris                        5     4  sigmoid   \n",
							"11  12           iris                        5     6  sigmoid   \n",
							"12  14  error_dataset                        3    42   linear   \n",
							"\n",
							"          creation_date   status           start_date              name  \\\n",
							"0   2023-06-17 08:59:12     done  2023-06-17 08:59:13  example_notebook   \n",
							"1   2023-06-17 08:59:12     done  2023-06-17 08:59:18  example_notebook   \n",
							"2   2023-06-17 08:59:12     done  2023-06-17 08:59:24  example_notebook   \n",
							"3   2023-06-17 08:59:12     done  2023-06-17 08:59:30  example_notebook   \n",
							"4   2023-06-17 08:59:12     done  2023-06-17 08:59:35  example_notebook   \n",
							"5   2023-06-17 08:59:12     done  2023-06-17 08:59:41  example_notebook   \n",
							"6   2023-06-17 08:59:12     done  2023-06-17 08:59:46  example_notebook   \n",
							"7   2023-06-17 08:59:12     done  2023-06-17 08:59:52  example_notebook   \n",
							"8   2023-06-17 08:59:12     done  2023-06-17 08:59:57  example_notebook   \n",
							"9   2023-06-17 08:59:12     done  2023-06-17 09:00:03  example_notebook   \n",
							"10  2023-06-17 08:59:12     done  2023-06-17 09:00:09  example_notebook   \n",
							"11  2023-06-17 08:59:12     done  2023-06-17 09:00:14  example_notebook   \n",
							"12  2023-06-17 09:00:25  created                 None              None   \n",
							"\n",
							"       machine                                           pipeline  train_f1  \\\n",
							"0   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.971667   \n",
							"1   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.971667   \n",
							"2   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.971667   \n",
							"3   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.936667   \n",
							"4   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.936667   \n",
							"5   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.936667   \n",
							"6   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.975000   \n",
							"7   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.975000   \n",
							"8   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.975000   \n",
							"9   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.896667   \n",
							"10  Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.896667   \n",
							"11  Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.896667   \n",
							"12        None                                               None       NaN   \n",
							"\n",
							"    train_accuracy   test_f1  test_accuracy             end_date error  \n",
							"0         0.971667  0.966667       0.966667  2023-06-17 08:59:18  None  \n",
							"1         0.971667  0.966667       0.966667  2023-06-17 08:59:24  None  \n",
							"2         0.971667  0.966667       0.966667  2023-06-17 08:59:29  None  \n",
							"3         0.936667  0.933333       0.933333  2023-06-17 08:59:35  None  \n",
							"4         0.936667  0.933333       0.933333  2023-06-17 08:59:41  None  \n",
							"5         0.936667  0.933333       0.933333  2023-06-17 08:59:46  None  \n",
							"6         0.975000  0.966667       0.966667  2023-06-17 08:59:52  None  \n",
							"7         0.975000  0.966667       0.966667  2023-06-17 08:59:57  None  \n",
							"8         0.975000  0.966667       0.966667  2023-06-17 09:00:03  None  \n",
							"9         0.896667  0.893333       0.893333  2023-06-17 09:00:09  None  \n",
							"10        0.896667  0.893333       0.893333  2023-06-17 09:00:14  None  \n",
							"11        0.896667  0.893333       0.893333  2023-06-17 09:00:20  None  \n",
							"12             NaN       NaN            NaN                 None  None  "
						]
					},
					"execution_count": 6,
					"metadata": {},
					"output_type": "execute_result"
				}
			],
			"source": [
				"experimenter.reset_experiments('error')\n",
				"\n",
				"# showing database table\n",
				"experimenter.get_table() "
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "oLgmbd75Jtwm"
			},
			"source": [
				"After the reset of failed experiments, they can be executed again as described above. "
			]
		},
		{
			"cell_type": "code",
			"execution_count": 7,
			"metadata": {
				"colab": {
					"base_uri": "https://localhost:8080/",
					"height": 1000
				},
				"id": "_lH7S235Amhk",
				"outputId": "8c316569-b05f-4ceb-ff84-058e57613b4c"
			},
			"outputs": [
				{
					"name": "stderr",
					"output_type": "stream",
					"text": [
						"ERROR:root:Traceback (most recent call last):\n",
						"  File \"/home/lukas/development/code_projects/py_experimenter/py_experimenter/experimenter.py\", line 382, in _execution_wrapper\n",
						"    experiment_function(keyfield_values, result_processor, custom_fields)\n",
						"  File \"/tmp/ipykernel_28275/1244630566.py\", line 31, in run_ml\n",
						"    raise ValueError(\"Example error\")\n",
						"ValueError: Example error\n",
						"\n"
					]
				},
				{
					"data": {
						"text/html": [
							"<div>\n",
							"<style scoped>\n",
							"    .dataframe tbody tr th:only-of-type {\n",
							"        vertical-align: middle;\n",
							"    }\n",
							"\n",
							"    .dataframe tbody tr th {\n",
							"        vertical-align: top;\n",
							"    }\n",
							"\n",
							"    .dataframe thead th {\n",
							"        text-align: right;\n",
							"    }\n",
							"</style>\n",
							"<table border=\"1\" class=\"dataframe\">\n",
							"  <thead>\n",
							"    <tr style=\"text-align: right;\">\n",
							"      <th></th>\n",
							"      <th>ID</th>\n",
							"      <th>dataset</th>\n",
							"      <th>cross_validation_splits</th>\n",
							"      <th>seed</th>\n",
							"      <th>kernel</th>\n",
							"      <th>creation_date</th>\n",
							"      <th>status</th>\n",
							"      <th>start_date</th>\n",
							"      <th>name</th>\n",
							"      <th>machine</th>\n",
							"      <th>pipeline</th>\n",
							"      <th>train_f1</th>\n",
							"      <th>train_accuracy</th>\n",
							"      <th>test_f1</th>\n",
							"      <th>test_accuracy</th>\n",
							"      <th>end_date</th>\n",
							"      <th>error</th>\n",
							"    </tr>\n",
							"  </thead>\n",
							"  <tbody>\n",
							"    <tr>\n",
							"      <th>0</th>\n",
							"      <td>1</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:13</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:18</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>1</th>\n",
							"      <td>2</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:18</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:24</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>2</th>\n",
							"      <td>3</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:24</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.971667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:29</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>3</th>\n",
							"      <td>4</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:30</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>2023-06-17 08:59:35</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>4</th>\n",
							"      <td>5</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:35</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>2023-06-17 08:59:41</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>5</th>\n",
							"      <td>6</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>poly</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:41</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.936667</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>0.933333</td>\n",
							"      <td>2023-06-17 08:59:46</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>6</th>\n",
							"      <td>7</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:46</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:52</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>7</th>\n",
							"      <td>8</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:52</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 08:59:57</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>8</th>\n",
							"      <td>9</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>rbf</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 08:59:57</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.975000</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>0.966667</td>\n",
							"      <td>2023-06-17 09:00:03</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>9</th>\n",
							"      <td>10</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>2</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 09:00:03</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>2023-06-17 09:00:09</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>10</th>\n",
							"      <td>11</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>4</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 09:00:09</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>2023-06-17 09:00:14</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>11</th>\n",
							"      <td>12</td>\n",
							"      <td>iris</td>\n",
							"      <td>5</td>\n",
							"      <td>6</td>\n",
							"      <td>sigmoid</td>\n",
							"      <td>2023-06-17 08:59:12</td>\n",
							"      <td>done</td>\n",
							"      <td>2023-06-17 09:00:14</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.896667</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>0.893333</td>\n",
							"      <td>2023-06-17 09:00:20</td>\n",
							"      <td>None</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>12</th>\n",
							"      <td>14</td>\n",
							"      <td>error_dataset</td>\n",
							"      <td>3</td>\n",
							"      <td>42</td>\n",
							"      <td>linear</td>\n",
							"      <td>2023-06-17 09:00:25</td>\n",
							"      <td>error</td>\n",
							"      <td>2023-06-17 09:00:26</td>\n",
							"      <td>example_notebook</td>\n",
							"      <td>Worklaptop</td>\n",
							"      <td>Pipeline(steps=[('standardscaler', StandardSca...</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>2023-06-17 09:00:31</td>\n",
							"      <td>Traceback (most recent call last):\\n  File \"/h...</td>\n",
							"    </tr>\n",
							"  </tbody>\n",
							"</table>\n",
							"</div>"
						],
						"text/plain": [
							"    ID        dataset  cross_validation_splits  seed   kernel  \\\n",
							"0    1           iris                        5     2   linear   \n",
							"1    2           iris                        5     4   linear   \n",
							"2    3           iris                        5     6   linear   \n",
							"3    4           iris                        5     2     poly   \n",
							"4    5           iris                        5     4     poly   \n",
							"5    6           iris                        5     6     poly   \n",
							"6    7           iris                        5     2      rbf   \n",
							"7    8           iris                        5     4      rbf   \n",
							"8    9           iris                        5     6      rbf   \n",
							"9   10           iris                        5     2  sigmoid   \n",
							"10  11           iris                        5     4  sigmoid   \n",
							"11  12           iris                        5     6  sigmoid   \n",
							"12  14  error_dataset                        3    42   linear   \n",
							"\n",
							"          creation_date status           start_date              name  \\\n",
							"0   2023-06-17 08:59:12   done  2023-06-17 08:59:13  example_notebook   \n",
							"1   2023-06-17 08:59:12   done  2023-06-17 08:59:18  example_notebook   \n",
							"2   2023-06-17 08:59:12   done  2023-06-17 08:59:24  example_notebook   \n",
							"3   2023-06-17 08:59:12   done  2023-06-17 08:59:30  example_notebook   \n",
							"4   2023-06-17 08:59:12   done  2023-06-17 08:59:35  example_notebook   \n",
							"5   2023-06-17 08:59:12   done  2023-06-17 08:59:41  example_notebook   \n",
							"6   2023-06-17 08:59:12   done  2023-06-17 08:59:46  example_notebook   \n",
							"7   2023-06-17 08:59:12   done  2023-06-17 08:59:52  example_notebook   \n",
							"8   2023-06-17 08:59:12   done  2023-06-17 08:59:57  example_notebook   \n",
							"9   2023-06-17 08:59:12   done  2023-06-17 09:00:03  example_notebook   \n",
							"10  2023-06-17 08:59:12   done  2023-06-17 09:00:09  example_notebook   \n",
							"11  2023-06-17 08:59:12   done  2023-06-17 09:00:14  example_notebook   \n",
							"12  2023-06-17 09:00:25  error  2023-06-17 09:00:26  example_notebook   \n",
							"\n",
							"       machine                                           pipeline  train_f1  \\\n",
							"0   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.971667   \n",
							"1   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.971667   \n",
							"2   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.971667   \n",
							"3   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.936667   \n",
							"4   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.936667   \n",
							"5   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.936667   \n",
							"6   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.975000   \n",
							"7   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.975000   \n",
							"8   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.975000   \n",
							"9   Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.896667   \n",
							"10  Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.896667   \n",
							"11  Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...  0.896667   \n",
							"12  Worklaptop  Pipeline(steps=[('standardscaler', StandardSca...       NaN   \n",
							"\n",
							"    train_accuracy   test_f1  test_accuracy             end_date  \\\n",
							"0         0.971667  0.966667       0.966667  2023-06-17 08:59:18   \n",
							"1         0.971667  0.966667       0.966667  2023-06-17 08:59:24   \n",
							"2         0.971667  0.966667       0.966667  2023-06-17 08:59:29   \n",
							"3         0.936667  0.933333       0.933333  2023-06-17 08:59:35   \n",
							"4         0.936667  0.933333       0.933333  2023-06-17 08:59:41   \n",
							"5         0.936667  0.933333       0.933333  2023-06-17 08:59:46   \n",
							"6         0.975000  0.966667       0.966667  2023-06-17 08:59:52   \n",
							"7         0.975000  0.966667       0.966667  2023-06-17 08:59:57   \n",
							"8         0.975000  0.966667       0.966667  2023-06-17 09:00:03   \n",
							"9         0.896667  0.893333       0.893333  2023-06-17 09:00:09   \n",
							"10        0.896667  0.893333       0.893333  2023-06-17 09:00:14   \n",
							"11        0.896667  0.893333       0.893333  2023-06-17 09:00:20   \n",
							"12             NaN       NaN            NaN  2023-06-17 09:00:31   \n",
							"\n",
							"                                                error  \n",
							"0                                                None  \n",
							"1                                                None  \n",
							"2                                                None  \n",
							"3                                                None  \n",
							"4                                                None  \n",
							"5                                                None  \n",
							"6                                                None  \n",
							"7                                                None  \n",
							"8                                                None  \n",
							"9                                                None  \n",
							"10                                               None  \n",
							"11                                               None  \n",
							"12  Traceback (most recent call last):\\n  File \"/h...  "
						]
					},
					"execution_count": 7,
					"metadata": {},
					"output_type": "execute_result"
				}
			],
			"source": [
				"experimenter.execute(run_ml, max_experiments=-1)\n",
				"\n",
				"# showing database table\n",
				"experimenter.get_table() "
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "ekECNVPGJxyH"
			},
			"source": [
				"### Generating Result Table\n",
				"\n",
				"\n",
				"The table containes single experiment results. Those can be aggregated, e.g. to generate the mean over all seeds. "
			]
		},
		{
			"cell_type": "code",
			"execution_count": 8,
			"metadata": {
				"colab": {
					"base_uri": "https://localhost:8080/",
					"height": 143
				},
				"id": "gNwR26PcVZQK",
				"outputId": "c8fb7af2-25ad-4882-d4ae-9fb7ada92d36"
			},
			"outputs": [
				{
					"data": {
						"text/html": [
							"<div>\n",
							"<style scoped>\n",
							"    .dataframe tbody tr th:only-of-type {\n",
							"        vertical-align: middle;\n",
							"    }\n",
							"\n",
							"    .dataframe tbody tr th {\n",
							"        vertical-align: top;\n",
							"    }\n",
							"\n",
							"    .dataframe thead th {\n",
							"        text-align: right;\n",
							"    }\n",
							"</style>\n",
							"<table border=\"1\" class=\"dataframe\">\n",
							"  <thead>\n",
							"    <tr style=\"text-align: right;\">\n",
							"      <th></th>\n",
							"      <th>ID</th>\n",
							"      <th>cross_validation_splits</th>\n",
							"      <th>seed</th>\n",
							"      <th>train_f1</th>\n",
							"      <th>train_accuracy</th>\n",
							"      <th>test_f1</th>\n",
							"      <th>test_accuracy</th>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>dataset</th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"    </tr>\n",
							"  </thead>\n",
							"  <tbody>\n",
							"    <tr>\n",
							"      <th>error_dataset</th>\n",
							"      <td>14.0</td>\n",
							"      <td>3.0</td>\n",
							"      <td>42.0</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"      <td>NaN</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>iris</th>\n",
							"      <td>6.5</td>\n",
							"      <td>5.0</td>\n",
							"      <td>4.0</td>\n",
							"      <td>0.945</td>\n",
							"      <td>0.945</td>\n",
							"      <td>0.94</td>\n",
							"      <td>0.94</td>\n",
							"    </tr>\n",
							"  </tbody>\n",
							"</table>\n",
							"</div>"
						],
						"text/plain": [
							"                 ID  cross_validation_splits  seed  train_f1  train_accuracy  \\\n",
							"dataset                                                                        \n",
							"error_dataset  14.0                      3.0  42.0       NaN             NaN   \n",
							"iris            6.5                      5.0   4.0     0.945           0.945   \n",
							"\n",
							"               test_f1  test_accuracy  \n",
							"dataset                                \n",
							"error_dataset      NaN            NaN  \n",
							"iris              0.94           0.94  "
						]
					},
					"execution_count": 8,
					"metadata": {},
					"output_type": "execute_result"
				}
			],
			"source": [
				"result_table_agg = experimenter.get_table().groupby(['dataset']).mean(numeric_only = True)\n",
				"result_table_agg"
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {
				"id": "bjp-_uRDJ7oB"
			},
			"source": [
				"### Printing LaTex Table\n",
				"\n",
				"As `pandas.Dataframe`s can easily be printed as LaTex table, here is an example code for one of the above result columns. "
			]
		},
		{
			"cell_type": "code",
			"execution_count": 9,
			"metadata": {
				"colab": {
					"base_uri": "https://localhost:8080/"
				},
				"id": "lMdk41hFV69U",
				"outputId": "995a326a-ad5c-40f4-e5bc-3f54e3dd5a60"
			},
			"outputs": [
				{
					"name": "stdout",
					"output_type": "stream",
					"text": [
						"\\begin{tabular}{lr}\n",
						" & test_f1 \\\\\n",
						"dataset &  \\\\\n",
						"error_dataset & nan \\\\\n",
						"iris & 0.940000 \\\\\n",
						"\\end{tabular}\n",
						"\n"
					]
				}
			],
			"source": [
				"print(result_table_agg[['test_f1']].style.to_latex())"
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {},
			"source": [
				"### CodeCarbon\n",
				"[CodeCarbon](https://tornede.github.io/py_experimenter/usage/experiment_configuration_file.html#codecarbon) is integrated into `PyExperimenter` to provide information about the carbon emissions of experiments. `CodeCarbon` will create a table with suffix `_codecarbon` in the database, each row containing information about the carbon emissions of a single experiment."
			]
		},
		{
			"cell_type": "code",
			"execution_count": 10,
			"metadata": {},
			"outputs": [
				{
					"data": {
						"text/html": [
							"<div>\n",
							"<style scoped>\n",
							"    .dataframe tbody tr th:only-of-type {\n",
							"        vertical-align: middle;\n",
							"    }\n",
							"\n",
							"    .dataframe tbody tr th {\n",
							"        vertical-align: top;\n",
							"    }\n",
							"\n",
							"    .dataframe thead th {\n",
							"        text-align: right;\n",
							"    }\n",
							"</style>\n",
							"<table border=\"1\" class=\"dataframe\">\n",
							"  <thead>\n",
							"    <tr style=\"text-align: right;\">\n",
							"      <th></th>\n",
							"      <th>ID</th>\n",
							"      <th>experiment_id</th>\n",
							"      <th>codecarbon_timestamp</th>\n",
							"      <th>project_name</th>\n",
							"      <th>run_id</th>\n",
							"      <th>duration_seconds</th>\n",
							"      <th>emissions_kg</th>\n",
							"      <th>emissions_rate_kg_sec</th>\n",
							"      <th>cpu_power_watt</th>\n",
							"      <th>gpu_power_watt</th>\n",
							"      <th>...</th>\n",
							"      <th>cpu_count</th>\n",
							"      <th>cpu_model</th>\n",
							"      <th>gpu_count</th>\n",
							"      <th>gpu_model</th>\n",
							"      <th>longitude</th>\n",
							"      <th>latitude</th>\n",
							"      <th>ram_total_size</th>\n",
							"      <th>tracking_mode</th>\n",
							"      <th>on_cloud</th>\n",
							"      <th>offline_mode</th>\n",
							"    </tr>\n",
							"  </thead>\n",
							"  <tbody>\n",
							"    <tr>\n",
							"      <th>0</th>\n",
							"      <td>1</td>\n",
							"      <td>1</td>\n",
							"      <td>2023-06-17T08:59:18</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>451bc2e9-8c7f-416b-80f3-4ed0ef44cdff</td>\n",
							"      <td>0.121472</td>\n",
							"      <td>3.084560e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>1</th>\n",
							"      <td>2</td>\n",
							"      <td>2</td>\n",
							"      <td>2023-06-17T08:59:24</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>36f4b99e-b138-4c3f-b833-f6824feafa8f</td>\n",
							"      <td>0.147891</td>\n",
							"      <td>3.754468e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>2</th>\n",
							"      <td>3</td>\n",
							"      <td>3</td>\n",
							"      <td>2023-06-17T08:59:29</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>7ed6d96f-68b1-4343-a1c2-7b26ec4bad4b</td>\n",
							"      <td>0.147379</td>\n",
							"      <td>3.877488e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>3</th>\n",
							"      <td>4</td>\n",
							"      <td>4</td>\n",
							"      <td>2023-06-17T08:59:35</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>53826b6e-933d-4537-9477-0ff1b9afd5d1</td>\n",
							"      <td>0.125964</td>\n",
							"      <td>3.283903e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>4</th>\n",
							"      <td>5</td>\n",
							"      <td>5</td>\n",
							"      <td>2023-06-17T08:59:41</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>640bbbbf-c5a4-4706-94fa-e26bc8eb4c25</td>\n",
							"      <td>0.134753</td>\n",
							"      <td>3.522335e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>5</th>\n",
							"      <td>6</td>\n",
							"      <td>6</td>\n",
							"      <td>2023-06-17T08:59:46</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>b67e2e24-72ac-4ca6-976b-440454c79416</td>\n",
							"      <td>0.140218</td>\n",
							"      <td>3.614312e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>6</th>\n",
							"      <td>7</td>\n",
							"      <td>7</td>\n",
							"      <td>2023-06-17T08:59:52</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>b411da2a-9809-4f4f-bfbd-88d62bcde67b</td>\n",
							"      <td>0.131839</td>\n",
							"      <td>3.342969e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>7</th>\n",
							"      <td>8</td>\n",
							"      <td>8</td>\n",
							"      <td>2023-06-17T08:59:57</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>244f3cff-c8bf-42c2-a186-994aa6931e27</td>\n",
							"      <td>0.134510</td>\n",
							"      <td>3.455675e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>8</th>\n",
							"      <td>9</td>\n",
							"      <td>9</td>\n",
							"      <td>2023-06-17T09:00:03</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>7a483787-7c64-4eaa-919d-e978600ea311</td>\n",
							"      <td>0.150213</td>\n",
							"      <td>3.967545e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>9</th>\n",
							"      <td>10</td>\n",
							"      <td>10</td>\n",
							"      <td>2023-06-17T09:00:09</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>d738e59c-83c8-4ece-b0fc-fcc8dd0907dd</td>\n",
							"      <td>0.135736</td>\n",
							"      <td>3.511814e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>10</th>\n",
							"      <td>11</td>\n",
							"      <td>11</td>\n",
							"      <td>2023-06-17T09:00:14</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>c8d8c9d7-ecc0-4729-aefd-6cfb49d92b73</td>\n",
							"      <td>0.129663</td>\n",
							"      <td>3.374622e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>11</th>\n",
							"      <td>12</td>\n",
							"      <td>12</td>\n",
							"      <td>2023-06-17T09:00:20</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>74a3f19e-cdec-4ef3-be29-cd1c3fb69d31</td>\n",
							"      <td>0.121140</td>\n",
							"      <td>3.037764e-07</td>\n",
							"      <td>0.000003</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>12</th>\n",
							"      <td>13</td>\n",
							"      <td>13</td>\n",
							"      <td>2023-06-17T09:00:25</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>53effe7a-14f9-462d-911c-5cb736146e4b</td>\n",
							"      <td>0.093765</td>\n",
							"      <td>2.213938e-07</td>\n",
							"      <td>0.000002</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>13</th>\n",
							"      <td>14</td>\n",
							"      <td>14</td>\n",
							"      <td>2023-06-17T09:00:31</td>\n",
							"      <td>codecarbon</td>\n",
							"      <td>1c67cb8f-cc53-4073-a610-01e94071bf28</td>\n",
							"      <td>0.107141</td>\n",
							"      <td>2.437078e-07</td>\n",
							"      <td>0.000002</td>\n",
							"      <td>42.5</td>\n",
							"      <td>0.0</td>\n",
							"      <td>...</td>\n",
							"      <td>16.0</td>\n",
							"      <td>12th Gen Intel(R) Core(TM) i7-1260P</td>\n",
							"      <td>None</td>\n",
							"      <td>None</td>\n",
							"      <td>8.8516</td>\n",
							"      <td>51.8099</td>\n",
							"      <td>15.474876</td>\n",
							"      <td>process</td>\n",
							"      <td>N</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"  </tbody>\n",
							"</table>\n",
							"<p>14 rows × 33 columns</p>\n",
							"</div>"
						],
						"text/plain": [
							"    ID  experiment_id codecarbon_timestamp project_name  \\\n",
							"0    1              1  2023-06-17T08:59:18   codecarbon   \n",
							"1    2              2  2023-06-17T08:59:24   codecarbon   \n",
							"2    3              3  2023-06-17T08:59:29   codecarbon   \n",
							"3    4              4  2023-06-17T08:59:35   codecarbon   \n",
							"4    5              5  2023-06-17T08:59:41   codecarbon   \n",
							"5    6              6  2023-06-17T08:59:46   codecarbon   \n",
							"6    7              7  2023-06-17T08:59:52   codecarbon   \n",
							"7    8              8  2023-06-17T08:59:57   codecarbon   \n",
							"8    9              9  2023-06-17T09:00:03   codecarbon   \n",
							"9   10             10  2023-06-17T09:00:09   codecarbon   \n",
							"10  11             11  2023-06-17T09:00:14   codecarbon   \n",
							"11  12             12  2023-06-17T09:00:20   codecarbon   \n",
							"12  13             13  2023-06-17T09:00:25   codecarbon   \n",
							"13  14             14  2023-06-17T09:00:31   codecarbon   \n",
							"\n",
							"                                  run_id  duration_seconds  emissions_kg  \\\n",
							"0   451bc2e9-8c7f-416b-80f3-4ed0ef44cdff          0.121472  3.084560e-07   \n",
							"1   36f4b99e-b138-4c3f-b833-f6824feafa8f          0.147891  3.754468e-07   \n",
							"2   7ed6d96f-68b1-4343-a1c2-7b26ec4bad4b          0.147379  3.877488e-07   \n",
							"3   53826b6e-933d-4537-9477-0ff1b9afd5d1          0.125964  3.283903e-07   \n",
							"4   640bbbbf-c5a4-4706-94fa-e26bc8eb4c25          0.134753  3.522335e-07   \n",
							"5   b67e2e24-72ac-4ca6-976b-440454c79416          0.140218  3.614312e-07   \n",
							"6   b411da2a-9809-4f4f-bfbd-88d62bcde67b          0.131839  3.342969e-07   \n",
							"7   244f3cff-c8bf-42c2-a186-994aa6931e27          0.134510  3.455675e-07   \n",
							"8   7a483787-7c64-4eaa-919d-e978600ea311          0.150213  3.967545e-07   \n",
							"9   d738e59c-83c8-4ece-b0fc-fcc8dd0907dd          0.135736  3.511814e-07   \n",
							"10  c8d8c9d7-ecc0-4729-aefd-6cfb49d92b73          0.129663  3.374622e-07   \n",
							"11  74a3f19e-cdec-4ef3-be29-cd1c3fb69d31          0.121140  3.037764e-07   \n",
							"12  53effe7a-14f9-462d-911c-5cb736146e4b          0.093765  2.213938e-07   \n",
							"13  1c67cb8f-cc53-4073-a610-01e94071bf28          0.107141  2.437078e-07   \n",
							"\n",
							"    emissions_rate_kg_sec  cpu_power_watt  gpu_power_watt  ...  cpu_count  \\\n",
							"0                0.000003            42.5             0.0  ...       16.0   \n",
							"1                0.000003            42.5             0.0  ...       16.0   \n",
							"2                0.000003            42.5             0.0  ...       16.0   \n",
							"3                0.000003            42.5             0.0  ...       16.0   \n",
							"4                0.000003            42.5             0.0  ...       16.0   \n",
							"5                0.000003            42.5             0.0  ...       16.0   \n",
							"6                0.000003            42.5             0.0  ...       16.0   \n",
							"7                0.000003            42.5             0.0  ...       16.0   \n",
							"8                0.000003            42.5             0.0  ...       16.0   \n",
							"9                0.000003            42.5             0.0  ...       16.0   \n",
							"10               0.000003            42.5             0.0  ...       16.0   \n",
							"11               0.000003            42.5             0.0  ...       16.0   \n",
							"12               0.000002            42.5             0.0  ...       16.0   \n",
							"13               0.000002            42.5             0.0  ...       16.0   \n",
							"\n",
							"                              cpu_model  gpu_count  gpu_model  longitude  \\\n",
							"0   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"1   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"2   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"3   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"4   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"5   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"6   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"7   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"8   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"9   12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"10  12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"11  12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"12  12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"13  12th Gen Intel(R) Core(TM) i7-1260P       None       None     8.8516   \n",
							"\n",
							"   latitude ram_total_size tracking_mode on_cloud offline_mode  \n",
							"0   51.8099      15.474876       process        N            0  \n",
							"1   51.8099      15.474876       process        N            0  \n",
							"2   51.8099      15.474876       process        N            0  \n",
							"3   51.8099      15.474876       process        N            0  \n",
							"4   51.8099      15.474876       process        N            0  \n",
							"5   51.8099      15.474876       process        N            0  \n",
							"6   51.8099      15.474876       process        N            0  \n",
							"7   51.8099      15.474876       process        N            0  \n",
							"8   51.8099      15.474876       process        N            0  \n",
							"9   51.8099      15.474876       process        N            0  \n",
							"10  51.8099      15.474876       process        N            0  \n",
							"11  51.8099      15.474876       process        N            0  \n",
							"12  51.8099      15.474876       process        N            0  \n",
							"13  51.8099      15.474876       process        N            0  \n",
							"\n",
							"[14 rows x 33 columns]"
						]
					},
					"execution_count": 10,
					"metadata": {},
					"output_type": "execute_result"
				}
			],
			"source": [
				"experimenter.get_codecarbon_table()"
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {},
			"source": [
				"#### Aggregating CodeCarbon Results\n",
				"\n",
				"The carbon emission information of `CodeCarbon` can be easily aggregated via `pandas.Dataframe`."
			]
		},
		{
			"cell_type": "code",
			"execution_count": 11,
			"metadata": {},
			"outputs": [
				{
					"data": {
						"text/html": [
							"<div>\n",
							"<style scoped>\n",
							"    .dataframe tbody tr th:only-of-type {\n",
							"        vertical-align: middle;\n",
							"    }\n",
							"\n",
							"    .dataframe tbody tr th {\n",
							"        vertical-align: top;\n",
							"    }\n",
							"\n",
							"    .dataframe thead th {\n",
							"        text-align: right;\n",
							"    }\n",
							"</style>\n",
							"<table border=\"1\" class=\"dataframe\">\n",
							"  <thead>\n",
							"    <tr style=\"text-align: right;\">\n",
							"      <th></th>\n",
							"      <th>ID</th>\n",
							"      <th>experiment_id</th>\n",
							"      <th>duration_seconds</th>\n",
							"      <th>emissions_kg</th>\n",
							"      <th>emissions_rate_kg_sec</th>\n",
							"      <th>cpu_power_watt</th>\n",
							"      <th>gpu_power_watt</th>\n",
							"      <th>ram_power_watt</th>\n",
							"      <th>cpu_energy_kw</th>\n",
							"      <th>gpu_energy_kw</th>\n",
							"      <th>ram_energy_kw</th>\n",
							"      <th>energy_consumed_kw</th>\n",
							"      <th>cpu_count</th>\n",
							"      <th>ram_total_size</th>\n",
							"      <th>offline_mode</th>\n",
							"    </tr>\n",
							"    <tr>\n",
							"      <th>project_name</th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"      <th></th>\n",
							"    </tr>\n",
							"  </thead>\n",
							"  <tbody>\n",
							"    <tr>\n",
							"      <th>codecarbon</th>\n",
							"      <td>105</td>\n",
							"      <td>105</td>\n",
							"      <td>1.821685</td>\n",
							"      <td>0.000005</td>\n",
							"      <td>0.000036</td>\n",
							"      <td>595.0</td>\n",
							"      <td>0.0</td>\n",
							"      <td>0.890505</td>\n",
							"      <td>0.000015</td>\n",
							"      <td>0.0</td>\n",
							"      <td>2.255914e-08</td>\n",
							"      <td>0.000015</td>\n",
							"      <td>224.0</td>\n",
							"      <td>216.64827</td>\n",
							"      <td>0</td>\n",
							"    </tr>\n",
							"  </tbody>\n",
							"</table>\n",
							"</div>"
						],
						"text/plain": [
							"               ID  experiment_id  duration_seconds  emissions_kg  \\\n",
							"project_name                                                       \n",
							"codecarbon    105            105          1.821685      0.000005   \n",
							"\n",
							"              emissions_rate_kg_sec  cpu_power_watt  gpu_power_watt  \\\n",
							"project_name                                                          \n",
							"codecarbon                 0.000036           595.0             0.0   \n",
							"\n",
							"              ram_power_watt  cpu_energy_kw  gpu_energy_kw  ram_energy_kw  \\\n",
							"project_name                                                                \n",
							"codecarbon          0.890505       0.000015            0.0   2.255914e-08   \n",
							"\n",
							"              energy_consumed_kw  cpu_count  ram_total_size  offline_mode  \n",
							"project_name                                                               \n",
							"codecarbon              0.000015      224.0       216.64827             0  "
						]
					},
					"execution_count": 11,
					"metadata": {},
					"output_type": "execute_result"
				}
			],
			"source": [
				"carbon_emissions = experimenter.get_codecarbon_table().groupby(['project_name']).sum(numeric_only = True)\n",
				"carbon_emissions"
			]
		},
		{
			"attachments": {},
			"cell_type": "markdown",
			"metadata": {},
			"source": [
				"#### Printing CodeCarbon Results as LaTex Table\n",
				"\n",
				"Furthermore, the resulting `pandas.Dataframe` can easily be printed as LaTex table."
			]
		},
		{
			"cell_type": "code",
			"execution_count": 15,
			"metadata": {},
			"outputs": [
				{
					"name": "stdout",
					"output_type": "stream",
					"text": [
						"\\begin{tabular}{lrr}\n",
						" & energy_consumed_kw & emissions_kg \\\\\n",
						"project_name &  &  \\\\\n",
						"codecarbon & 0.000015 & 0.000005 \\\\\n",
						"\\end{tabular}\n",
						"\n"
					]
				}
			],
			"source": [
				"print(carbon_emissions[['energy_consumed_kw', 'emissions_kg']].style.to_latex())"
			]
		}
	],
	"metadata": {
		"colab": {
			"collapsed_sections": [],
			"provenance": []
		},
		"kernelspec": {
			"display_name": "py-experimenter",
			"language": "python",
			"name": "python3"
		},
		"language_info": {
			"codemirror_mode": {
				"name": "ipython",
				"version": 3
			},
			"file_extension": ".py",
			"mimetype": "text/x-python",
			"name": "python",
			"nbconvert_exporter": "python",
			"pygments_lexer": "ipython3",
			"version": "3.9.16"
		},
		"vscode": {
			"interpreter": {
				"hash": "2ab1b3975fa93e1bb98cd735dd25073385ffb1996321c3ba9e67d46b82508e86"
			}
		}
	},
	"nbformat": 4,
	"nbformat_minor": 0
}
