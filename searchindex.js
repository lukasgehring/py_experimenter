Search.setIndex({"docnames": ["authors", "autoapi/index", "autoapi/py_experimenter/database_connector/index", "autoapi/py_experimenter/database_connector_lite/index", "autoapi/py_experimenter/database_connector_mysql/index", "autoapi/py_experimenter/exceptions/index", "autoapi/py_experimenter/experimenter/index", "autoapi/py_experimenter/index", "autoapi/py_experimenter/result_processor/index", "autoapi/py_experimenter/utils/index", "changelog", "examples/example_conditional_grid", "examples/example_general_usage", "examples/index", "help", "how-to-contribute", "index", "installation", "license", "usage", "workflow"], "filenames": ["authors.rst", "autoapi/index.rst", "autoapi/py_experimenter/database_connector/index.rst", "autoapi/py_experimenter/database_connector_lite/index.rst", "autoapi/py_experimenter/database_connector_mysql/index.rst", "autoapi/py_experimenter/exceptions/index.rst", "autoapi/py_experimenter/experimenter/index.rst", "autoapi/py_experimenter/index.rst", "autoapi/py_experimenter/result_processor/index.rst", "autoapi/py_experimenter/utils/index.rst", "changelog.rst", "examples/example_conditional_grid.ipynb", "examples/example_general_usage.ipynb", "examples/index.rst", "help.rst", "how-to-contribute.rst", "index.rst", "installation.rst", "license.rst", "usage.md", "workflow.md"], "titles": ["Authors", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.database_connector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.database_connector_lite</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.database_connector_mysql</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.experimenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.result_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.utils</span></code>", "Changelog", "Conditional Parameter Grids", "General Usage", "Examples", "Need Help?", "How to Contribute", "Welcome to PyExperimenter\u2019s documentation!", "Installation", "License", "Usage", "General Workflow"], "terms": {"tanja": [0, 17, 18], "torned": [0, 15, 17, 18], "alexand": [0, 17, 18], "luka": [0, 17, 18], "fehr": [0, 17, 18], "helena": [0, 17, 18], "graf": [0, 17, 18], "jona": [0, 17, 18], "hansel": [0, 17, 18], "felix": [0, 17, 18], "mohr": [0, 17, 18], "marcel": [0, 17, 18], "wever": [0, 17, 18], "gehr": [0, 17, 18], "thi": [1, 6, 8, 11, 12, 15, 16, 18, 19, 20], "page": 1, "contain": [1, 6, 10, 11, 12, 15, 19], "auto": [1, 12], "gener": [1, 10, 11, 13, 15, 16, 19], "document": [1, 11, 12, 17, 18], "1": [1, 6, 11, 12, 16, 17, 19], "py_experiment": [1, 11, 12, 15, 16, 17, 19], "database_connector": [1, 3, 4, 7], "database_connector_lit": [1, 7], "database_connector_mysql": [1, 7], "except": [1, 6, 7, 15], "experiment": [1, 7, 11, 12, 15, 17, 19], "result_processor": [1, 6, 7, 11, 12, 19], "util": [1, 7], "creat": [1, 2, 3, 6, 9, 10, 11, 12, 14, 16, 20], "sphinx": [1, 15, 17], "autoapi": [1, 17], "databaseconnector": [2, 3, 4], "database_credential_file_path": [2, 3, 4, 6, 19], "base": [2, 3, 4, 5, 6, 9, 10, 11, 12, 15, 16, 20], "abc": [2, 3], "helper": [2, 3], "provid": [2, 3, 6, 11, 12, 15, 18, 19, 20], "standard": [2, 3], "wai": [2, 3, 16], "an": [2, 3, 6, 8, 11, 12, 16, 18, 19, 20], "us": [2, 3, 6, 8, 10, 11, 12, 16, 18, 19], "inherit": [2, 3], "abstract": 2, "_extract_credenti": [2, 3, 4], "_test_connect": [2, 3, 4], "connect": [2, 3, 4, 6, 9, 18], "close_connect": 2, "commit": [2, 15], "none": [2, 4, 6, 8], "execut": [2, 6, 10, 15, 16, 17, 20], "cursor": [2, 3, 4], "sql_statement": 2, "fetchal": 2, "create_table_if_not_exist": 2, "_exclude_fixed_column": 2, "column": [2, 3, 4, 6, 10, 12, 19], "list": [2, 3, 4, 6, 8, 9, 10, 15, 19, 20], "str": [2, 3, 6, 8, 9, 12], "_table_exist": [2, 3, 4], "_create_t": [2, 3, 4], "_table_has_correct_structur": [2, 3, 4], "typed_field": [2, 3, 4], "classmethod": 2, "escape_sql_char": [2, 3, 4], "fill_tabl": 2, "paramet": [2, 6, 9, 12, 13, 16, 19, 20], "fixed_parameter_combin": [2, 6, 9, 11], "_check_combination_in_existing_row": 2, "combin": [2, 6, 11], "existing_row": 2, "keyfield_nam": [2, 9], "bool": [2, 3, 6, 8, 9], "_get_existing_row": [2, 3, 4], "column_nam": [2, 3, 4], "get_experiment_configur": 2, "random_ord": [2, 3, 4, 6, 11, 12, 19], "_execute_queri": 2, "tupl": [2, 3, 4, 8, 9, 12], "int": [2, 3, 4, 6, 11, 12, 19], "static": [2, 3, 4, 6, 8], "random_order_str": [2, 3, 4], "_pull_open_experi": [2, 3, 4], "_write_to_databas": 2, "kei": [2, 6, 10, 15, 19], "valu": [2, 6, 8, 11, 19, 20], "_update_databas": 2, "where": [2, 6, 15, 19], "not_executed_yet": 2, "delete_experiments_with_statu": 2, "statu": [2, 6, 8, 10, 12, 17, 19, 20], "get_structure_from_t": [2, 3, 4], "get_tabl": [2, 6, 11, 12, 19], "panda": [2, 6, 10, 11, 12, 17, 19, 20], "datafram": [2, 6, 10, 11, 12, 19, 20], "databaseconnectorlit": 3, "_write_to_database_separ": [3, 4], "arg": [3, 4], "databaseconnectormysql": 4, "experiment_configuration_file_path": [4, 6, 11, 12, 19], "configpars": [4, 6, 9], "_create_database_if_not_exist": 4, "credenti": [4, 6, 15, 16, 20], "_start_transact": 4, "readonli": 4, "fals": [4, 6, 11, 12, 19], "_get_tablename_for_queri": 4, "pyexperimentererror": 5, "common": [5, 19], "class": 5, "all": [5, 6, 10, 11, 12, 15, 18, 19, 20], "non": [5, 16], "exit": 5, "parametercombinationerror": [5, 6], "databaseerror": 5, "databasecreationerror": 5, "databaseconnectionerror": [5, 6], "databasequeryerror": 5, "emptyfilldatabasecallerror": 5, "tableerror": 5, "invalidresultfielderror": 5, "tablehaswrongstructureerror": 5, "noexperimentsleftexcept": 5, "configerror": 5, "noconfigfileerror": 5, "filenotfounderror": 5, "invalidconfigerror": [5, 6], "invalidvaluesinconfigur": [5, 6], "pyexperiment": [6, 10, 14, 15, 17, 20], "o": [6, 11, 12, 19], "path": [6, 9, 11, 12, 15, 19], "join": [6, 11, 12, 19], "config": [6, 9, 11, 12, 19], "configur": [6, 9, 10, 16, 20], "cfg": [6, 11, 12, 19], "database_credenti": [6, 19], "table_nam": [6, 8, 19], "database_nam": [6, 19], "name": [6, 8, 9, 10, 11, 12, 15, 17, 19], "handl": [6, 10], "initi": [6, 9], "collect": [6, 16], "experi": [6, 8, 9, 10, 16, 17, 20], "respect": 6, "result": [6, 8, 10, 11, 16, 17, 20], "set_config_valu": 6, "section_nam": 6, "modifi": [6, 18], "so": [6, 11, 15, 18, 19], "within": [6, 16, 19], "given": [6, 11, 12, 15, 19], "properti": [6, 16], "identifi": 6, "i": [6, 10, 11, 12, 15, 16, 17, 18, 19, 20], "overwritten": 6, "wa": [6, 16], "exist": [6, 9, 15, 19], "beforehand": 6, "The": [6, 11, 12, 15, 16, 17, 18, 19, 20], "section": [6, 19], "which": [6, 10, 11, 12, 15, 19, 20], "should": [6, 11, 12, 15, 19], "set": [6, 11, 16, 19, 20], "whose": 6, "rais": [6, 11, 12], "If": [6, 9, 11, 12, 14, 15, 19], "either": [6, 15, 19], "miss": [6, 10], "ha": [6, 11, 12, 14, 15, 19, 20], "invalid": 6, "inform": [6, 9, 15, 19, 20], "get_config_valu": 6, "return": [6, 9], "type": [6, 19], "nooptionerror": 6, "call": [6, 8, 11, 12, 19], "part": [6, 10], "has_sect": 6, "check": [6, 10, 14, 15], "whether": [6, 18], "true": [6, 11, 12, 19], "otherwis": [6, 15, 18, 20], "has_opt": 6, "_is_valid_configur": 6, "_config": [6, 8], "valid": 6, "e": [6, 10, 11, 12, 15, 17, 19, 20], "necessari": [6, 20], "field": [6, 8, 9, 16, 19], "databas": [6, 8, 9, 10, 11, 12, 15, 16, 17, 20], "mysql": [6, 15, 17, 19, 20], "sqlite": [6, 11, 12, 19], "case": [6, 11, 12, 15, 19, 20], "ar": [6, 10, 11, 12, 15, 16, 17, 19, 20], "avail": [6, 10, 15, 19], "option": [6, 10, 19], "file": [6, 9, 10, 15, 16, 18, 20], "defin": [6, 16, 20], "host": [6, 19], "user": [6, 15, 19, 20], "password": [6, 19], "default": [6, 19], "fill_table_from_combin": [6, 11], "dict": [6, 8, 11, 12, 19], "add": [6, 15], "row": [6, 10, 11, 12], "tabl": [6, 9, 10, 20], "first": [6, 10, 11, 12, 15], "doe": [6, 9], "been": [6, 14, 15, 20], "afterward": [6, 11, 15], "fill": [6, 10], "To": [6, 11, 12, 15], "end": [6, 15, 19], "cartesian": [6, 11, 12, 19], "product": [6, 11, 12, 17, 19], "built": [6, 15], "each": [6, 10, 11, 19, 20], "make": [6, 12, 15, 19], "up": [6, 12, 16], "note": [6, 11, 12, 19], "onli": [6, 10, 11, 19], "ad": [6, 10, 12, 15, 19], "do": [6, 11, 12, 14, 15, 18, 19], "alreadi": 6, "For": [6, 11, 15, 19], "ani": [6, 11, 15, 18, 19, 20], "match": 6, "keyfield": [6, 10, 11, 12, 19], "from": [6, 8, 9, 11, 12, 16, 18, 19, 20], "error": [6, 10, 11, 12, 19, 20], "In": [6, 12, 15, 16, 19, 20], "follow": [6, 15, 17, 18, 19, 20], "exampl": [6, 11, 12, 14, 15, 16, 19], "method": [6, 8, 10, 11, 12, 15], "a2": 6, "2": [6, 11, 12, 16, 17, 19], "4": [6, 11, 16, 17, 19], "b": [6, 15], "c": [6, 18], "cat": 6, "dog": 6, "accord": [6, 10, 11, 12, 15, 19], "four": [6, 19], "predefin": 6, "dictionari": [6, 8], "possibl": 6, "fill_table_from_config": [6, 12, 19], "build": [6, 15, 17], "fill_table_with_row": [6, 12, 19], "A": [6, 15, 18, 19, 20], "entri": [6, 11, 12, 19], "made": [6, 15], "pair": [6, 8], "valueerror": [6, 11, 12, 15], "experiment_funct": [6, 19], "callabl": 6, "resultprocessor": [6, 8, 11, 12, 19], "max_experi": [6, 11, 12, 19], "pull": [6, 16, 20], "open": [6, 11, 12, 19, 20], "them": [6, 8, 11, 15], "mani": [6, 19], "worker": 6, "spawn": 6, "start": [6, 15, 16, 19], "specifi": [6, 16, 19], "n_job": [6, 19], "singl": [6, 11, 12, 16, 19], "repeatedli": 6, "until": [6, 19], "maximum": [6, 19], "number": [6, 11, 12, 19], "have": [6, 10, 12, 14, 15, 19], "next": [6, 11, 12], "select": [6, 15, 19], "its": [6, 19], "consecut": 6, "id": [6, 11, 12, 19], "rather": 6, "chosen": 6, "randomli": 6, "With": 6, "run": [6, 11, 19, 20], "after": [6, 11, 12, 15, 16, 20], "can": [6, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20], "continu": [6, 14], "written": [6, 11, 12, 19], "dure": [6, 19, 20], "via": [6, 11, 12, 15, 16, 17], "success": 6, "correspond": [6, 17, 19, 20], "done": [6, 11, 12, 15, 19, 20], "occur": [6, 15, 19], "chang": [6, 10, 15], "log": [6, 15, 19, 20], "therefor": [6, 12, 15, 19], "befor": [6, 15], "local": [6, 15], "appear": 6, "function": [6, 15, 16, 20], "differ": [6, 16, 20], "parametr": 6, "indic": 6, "random": [6, 11, 12, 19, 20], "fashion": [6, 19], "wrong": 6, "data": [6, 11, 12, 19], "_execution_work": 6, "semaphor": 6, "multiprocess": 6, "reach": 6, "limit": [6, 11, 12, 16, 18], "_handle_error": 6, "_execution_wrapp": 6, "one": [6, 9, 11, 12, 15, 16], "Then": [6, 15], "therebi": [6, 16, 17], "updat": [6, 10, 16], "state": [6, 10, 15, 19], "when": [6, 10, 11, 12, 15, 19], "directli": [6, 15], "finish": 6, "successfulli": 6, "noexperimentslefterror": 6, "left": 6, "reset_experi": [6, 12, 19], "delet": [6, 19], "again": [6, 12, 15], "featur": [6, 15, 19, 20], "reset": [6, 10, 12, 20], "someth": 6, "went": 6, "pd": [6, 12], "result_logg": 8, "formatt": 8, "file_handl": 8, "credential_path": 8, "condit": [8, 10, 13, 16, 18, 19], "result_field": 8, "process": [8, 11, 12, 19, 20], "whenev": 8, "you": [8, 11, 12, 14, 15, 19], "want": [8, 12, 15], "write": [8, 10, 11, 12, 19, 20], "process_result": [8, 11, 12, 19], "param": [8, 9], "_add_timestamps_to_result": 8, "time": [8, 11, 12, 15, 16], "datetim": 8, "object": 8, "_change_statu": 8, "_write_error": 8, "error_msg": 8, "_set_machin": 8, "machine_id": 8, "_set_nam": 8, "_not_executed_yet": 8, "_valid_result_field": 8, "load_config": 9, "load": [9, 12], "timestamps_for_result_field": 9, "add_timestep_result_column": 9, "result_field_configur": 9, "extract_db_credentials_and_table_name_from_config": 9, "new": [9, 15, 19], "automat": [9, 15, 17, 20], "mysql_connector": 9, "get_keyfield_data": 9, "_generate_int_data": 9, "keyfield_valu": 9, "get_keyfield_nam": 9, "get_keyfield": 9, "get_result_field_nam": 9, "get_resultfield": 9, "get_field": 9, "clean": 9, "combine_fill_table_paramet": 9, "restructur": 10, "shortcut": 10, "longer": 10, "integ": [10, 19], "timestep": 10, "resultfield": [10, 11, 12, 19], "give": [10, 15], "instanc": [10, 20], "improv": [10, 15], "support": [10, 11, 16], "parallel": [10, 11, 12, 16, 19], "hpc": [10, 11, 12, 16, 19], "cluster": [10, 19], "usag": [10, 11, 13, 16], "multipl": [10, 11, 12], "order": [10, 19], "obtain": [10, 11, 12, 18], "current": [10, 19], "easili": [10, 11, 12, 17, 19, 20], "export": [10, 19, 20], "g": [10, 11, 12, 15, 17, 19], "latex": [10, 19, 20], "robust": 10, "creation": 10, "extend": [10, 16], "readm": [10, 17], "jupyt": 10, "notebook": [10, 11, 12], "explain": 10, "how": [10, 14, 16, 19], "grid": [10, 13, 16, 19, 20], "duplic": 10, "string": [10, 19], "quotat": [10, 19], "mark": [10, 19], "compon": 10, "No": 10, "summari": 10, "releas": 10, "show": [11, 12], "we": [11, 15], "programmat": 11, "vector": 11, "machin": [11, 15, 17, 20], "instead": [11, 19], "entir": 11, "need": [11, 12, 15, 16, 19], "instal": [11, 12, 15, 16], "pip": [11, 12, 15, 17], "scikit": [11, 12], "learn": [11, 12, 17], "further": [11, 12, 14, 15, 19, 20], "explan": [11, 12], "about": [11, 12, 15], "found": [11, 12, 15, 19, 20], "here": [11, 12, 19], "import": [11, 12, 15, 19], "content": [11, 12, 19], "svm_experiment_exampl": 11, "dataset": [11, 12, 19], "cross_validation_split": [11, 12, 19], "seed": [11, 12, 19, 20], "kernel": [11, 12, 19], "gamma": [11, 12], "decim": [11, 12, 19], "degre": 11, "coef0": 11, "train_f1": [11, 12, 19], "train_accuraci": [11, 12, 19], "test_f1": [11, 12, 19], "test_accuraci": [11, 12, 19], "timestamp": [11, 12, 19], "custom": [11, 12, 19], "sample_data": [11, 12, 19], "example_conditional_grid": 11, "w": [11, 12], "f": [11, 12], "dummi": [11, 12], "reason": [11, 12], "code": [11, 12, 15, 19, 20], "It": [11, 12, 15, 16], "meant": [11, 12, 19], "core": [11, 12, 15, 16, 17, 19], "3": [11, 12, 15, 16, 17], "numpi": [11, 12, 15, 17], "np": [11, 12, 19], "sklearn": [11, 12], "load_iri": [11, 12], "model_select": [11, 12], "cross_valid": [11, 12], "pipelin": [11, 12, 19], "make_pipelin": [11, 12], "preprocess": [11, 12], "standardscal": [11, 12], "svm": [11, 12], "svc": [11, 12], "sleep": 11, "randint": 11, "def": [11, 12, 19], "run_svm": 11, "custom_config": [11, 12], "0": [11, 16, 17], "5": [11, 12, 16, 17, 19], "x": [11, 12], "y": [11, 12], "target": [11, 12], "depend": [11, 15, 17], "linear": [11, 12, 19], "elif": 11, "poli": [11, 12, 19], "rbf": [11, 12, 19], "model": [11, 12], "iri": [11, 12, 19], "score": [11, 12, 19], "cv": [11, 12], "accuraci": [11, 12], "f1_micro": [11, 12], "return_train_scor": [11, 12], "mean": [11, 12, 16, 19], "train_f1_micro": [11, 12, 19], "test_f1_micro": [11, 12, 19], "actual": [11, 12, 15, 19], "step": [11, 12, 15, 19, 20], "previous": [11, 12], "addition": [11, 12, 15, 19, 20], "job": [11, 12, 19], "especi": [11, 12, 19], "svm_experimenter_01": 11, "fix": [11, 19], "three": 11, "line": [11, 19], "present": 11, "nan": 11, "well": [11, 16, 19], "thu": 11, "uncondition": 11, "other": [11, 12, 15, 18], "same": [11, 12, 15, 19], "due": [11, 12, 15], "just": [11, 12], "predifin": [11, 12], "replac": [11, 12, 15], "amount": [11, 12], "avoid": [11, 12], "collus": [11, 12], "access": [11, 12, 19], "relat": [11, 12, 14], "over": [12, 20], "extract": [12, 19, 20], "automl_conf_2023": 12, "best_paper_t": 12, "6": [12, 16, 19], "sigmoid": [12, 19], "longtext": [12, 19], "example_general_usag": 12, "run_ml": 12, "read_csv": 12, "example_notebook": 12, "abov": [12, 18, 19], "new_data": [12, 19], "42": [12, 19], "As": [12, 19], "some": [12, 15, 19], "those": [12, 16, 20], "were": 12, "anoth": [12, 15], "try": [12, 15], "describ": [12, 15, 19], "thei": 12, "aggreg": [12, 16], "result_table_agg": 12, "groupbi": [12, 19], "": 12, "to_latex": [12, 19], "index_nam": [12, 19], "question": 14, "problem": [14, 15], "don": 14, "t": 14, "know": 14, "mayb": 14, "find": 14, "suitabl": [14, 15], "solut": 14, "github": [14, 15, 17], "issu": [14, 16], "someon": [14, 15], "els": [14, 15], "similar": [14, 15], "situat": 14, "could": [14, 15], "anyth": 14, "pleas": [14, 15, 19], "would": 15, "appreci": 15, "see": 15, "idea": 15, "bug": 15, "sure": [15, 19], "had": 15, "feedback": 15, "plan": 15, "work": [15, 16, 19], "yourself": 15, "like": 15, "great": 15, "comment": 15, "what": 15, "exactli": 15, "At": 15, "also": [15, 19], "correctli": 15, "your": 15, "veri": 15, "mention": 15, "review": 15, "third": 15, "person": [15, 18], "understand": 15, "vision": 15, "go": 15, "summar": [15, 19], "titl": 15, "neccessari": 15, "report": [15, 16], "descript": [15, 17], "reproduc": 15, "produc": 15, "assumpt": [15, 20], "think": 15, "And": 15, "label": 15, "detail": 15, "usabl": 15, "enhanc": 15, "help": [15, 16], "face": 15, "provic": 15, "fork": 15, "branch": 15, "git": 15, "blog": 15, "post": 15, "repositori": [15, 16, 17], "click": 15, "button": 15, "top": 15, "right": [15, 18], "corner": 15, "clone": 15, "On": [15, 16], "folder": [15, 19], "command": 15, "ensur": 15, "usernam": 15, "http": [15, 17], "com": [15, 17], "remot": 15, "origin": 15, "addit": [15, 16, 19, 20], "upstream": 15, "switch": 15, "feature_branch_nam": 15, "meaning": 15, "fetch": 15, "v": 15, "checkout": 15, "environ": 15, "anaconda": 15, "conda": 15, "n": 15, "py": [15, 17], "env": 15, "python": [15, 17], "9": [15, 17], "activ": 15, "pandoc": 15, "separ": [15, 19], "articl": 15, "suggest": 15, "navig": 15, "project": [15, 16], "pytest": [15, 17], "succeed": 15, "manual": [15, 16, 19, 20], "8": [15, 17, 19], "upgrad": 15, "final": [15, 19, 20], "push": 15, "manag": [15, 16, 19], "packag": [15, 17], "tool": [15, 16, 17], "allow": [15, 16, 19], "declar": 15, "upload": 15, "instruct": 15, "than": 15, "ones": 15, "below": [15, 19, 20], "refer": [15, 16], "NOT": [15, 18], "itself": 15, "out": [15, 18], "latest": 15, "version": [15, 17], "pyproject": 15, "toml": 15, "specif": 15, "second": 15, "package_nam": 15, "dev": [15, 17], "group": [15, 17], "lock": 15, "dist": 15, "good": 15, "mandatori": 15, "locat": [15, 19], "structur": [15, 20], "affect": 15, "succe": 15, "without": [15, 18, 19], "adapt": 15, "But": 15, "test_run_experi": 15, "test_run_mysql_experi": 15, "doc": 15, "shinx": 15, "websit": 15, "output": 15, "html": 15, "sourc": 15, "includ": [15, 17, 18, 20], "correct": 15, "destin": 15, "full": 15, "did": 15, "begin": 15, "facilit": 16, "setup": [16, 20], "subsequ": 16, "evalu": 16, "empir": 16, "studi": 16, "algorithm": 16, "particular": [16, 18], "design": [16, 20], "reduc": 16, "involv": 16, "effort": 16, "significantli": 16, "intend": [16, 17], "research": [16, 17], "artifici": [16, 17], "intellig": [16, 17], "analysi": 16, "often": 16, "accompani": 16, "input": [16, 20], "variant": 16, "measur": 16, "sinc": 16, "individu": 16, "usual": [16, 19], "independ": 16, "perform": 16, "distribut": [16, 18, 20], "manner": [16, 17], "system": [16, 17, 20], "howev": 16, "requir": [16, 17], "extens": 16, "read": 16, "monitor": 16, "restart": [16, 20], "tediou": [16, 19], "consum": 16, "These": 16, "challeng": 16, "address": 16, "central": 16, "massiv": 16, "allevi": 16, "aforement": 16, "overhead": 16, "eas": 16, "easiest": 16, "dive": 16, "our": 16, "workflow": 16, "api": [16, 17], "contribut": 16, "develop": [16, 17], "poetri": [16, 17], "unit": 16, "test": 16, "request": 16, "author": [16, 17, 18], "team": 16, "licens": [16, 17], "changelog": 16, "v1": 16, "04": 16, "09": 16, "2022": [16, 18], "v0": 16, "01": 16, "03": 16, "17": 16, "02": 16, "11": [16, 17], "2021": [16, 18], "20": 16, "10": [16, 19], "14": 16, "partial": 16, "german": 16, "feder": 16, "ministri": 16, "econom": 16, "affair": 16, "climat": 16, "action": [16, 18], "fleme": 16, "03e16012f": 16, "foundat": 16, "dfg": 16, "collabor": 16, "center": 16, "fly": 16, "comput": [16, 20], "sfb": 16, "901": 16, "160364472": 16, "pypi": 17, "ml": 17, "captur": 17, "unifi": 17, "upb": 17, "de": 17, "fehring2": 17, "mail": 17, "uni": 17, "paderborn": 17, "ifi": 17, "lmu": 17, "unisabana": 17, "edu": 17, "co": 17, "mit": [17, 18], "md": 17, "io": 17, "keyword": 17, "executor": 17, "classifi": 17, "stabl": 17, "audienc": 17, "scienc": 17, "topic": 17, "scientif": 17, "engin": 17, "program": 17, "languag": 17, "7": 17, "15": 17, "connector": 17, "jupyterlab": 17, "mock": 17, "nbsphinx": 17, "galleri": 17, "rtd": 17, "theme": 17, "recommonmark": 17, "backend": [17, 19], "masonri": 17, "copyright": 18, "permiss": 18, "herebi": 18, "grant": 18, "free": 18, "charg": 18, "copi": 18, "softwar": 18, "associ": 18, "deal": 18, "restrict": 18, "merg": 18, "publish": 18, "sublicens": 18, "sell": 18, "permit": 18, "whom": 18, "furnish": 18, "subject": 18, "notic": 18, "shall": 18, "substanti": 18, "portion": 18, "THE": 18, "AS": 18, "warranti": 18, "OF": 18, "kind": 18, "express": 18, "OR": 18, "impli": 18, "BUT": 18, "TO": 18, "merchant": 18, "fit": 18, "FOR": 18, "purpos": 18, "AND": 18, "noninfring": 18, "IN": 18, "NO": 18, "event": 18, "holder": 18, "BE": 18, "liabl": 18, "claim": 18, "damag": 18, "liabil": 18, "contract": 18, "tort": 18, "aris": [18, 20], "WITH": 18, "primarili": 19, "attach": 19, "domain": [19, 20], "store": 19, "boolean": 19, "both": 19, "annot": 19, "explicitli": 19, "varchar": 19, "255": 19, "take": 19, "comma": 19, "neither": 19, "nor": 19, "whitespac": 19, "definit": 19, "task": 19, "togeth": 19, "size": 19, "form": 19, "stepsiz": 19, "explicit": 19, "under": 19, "ignor": 19, "By": 19, "run_experi": 19, "custom_field": 19, "stuff": 19, "intermedi": 19, "more": 19, "few": 19, "elabor": 19, "assum": 19, "altern": 19, "complex": 19, "approach": 19, "new_data_2": 19, "24": 19, "funtion": 19, "determin": 19, "sequenti": 19, "turn": 19, "readi": 19, "termin": 19, "interrupt": 19, "result_t": 19, "print": 19, "schema": 20, "figur": 20, "uniqu": 20, "certain": 20, "through": 20, "onc": 20, "back": 20, "fail": 20, "desir": 20, "subset": 20, "jointli": 20, "averag": 20, "view": 20}, "objects": {"": [[7, 0, 0, "-", "py_experimenter"]], "py_experimenter": [[2, 0, 0, "-", "database_connector"], [3, 0, 0, "-", "database_connector_lite"], [4, 0, 0, "-", "database_connector_mysql"], [5, 0, 0, "-", "exceptions"], [6, 0, 0, "-", "experimenter"], [8, 0, 0, "-", "result_processor"], [9, 0, 0, "-", "utils"]], "py_experimenter.database_connector": [[2, 1, 1, "", "DatabaseConnector"]], "py_experimenter.database_connector.DatabaseConnector": [[2, 2, 1, "", "_check_combination_in_existing_rows"], [2, 2, 1, "", "_create_table"], [2, 2, 1, "", "_exclude_fixed_columns"], [2, 2, 1, "", "_execute_queries"], [2, 2, 1, "", "_extract_credentials"], [2, 2, 1, "", "_get_existing_rows"], [2, 2, 1, "", "_pull_open_experiment"], [2, 2, 1, "", "_table_exists"], [2, 2, 1, "", "_table_has_correct_structure"], [2, 2, 1, "", "_test_connection"], [2, 2, 1, "", "_update_database"], [2, 2, 1, "", "_write_to_database"], [2, 2, 1, "", "close_connection"], [2, 2, 1, "", "commit"], [2, 2, 1, "", "connect"], [2, 2, 1, "", "create_table_if_not_existing"], [2, 2, 1, "", "cursor"], [2, 2, 1, "", "delete_experiments_with_status"], [2, 2, 1, "", "escape_sql_chars"], [2, 2, 1, "", "execute"], [2, 2, 1, "", "fetchall"], [2, 2, 1, "", "fill_table"], [2, 2, 1, "", "get_experiment_configuration"], [2, 2, 1, "", "get_structure_from_table"], [2, 2, 1, "", "get_table"], [2, 2, 1, "", "not_executed_yet"], [2, 2, 1, "", "random_order_string"]], "py_experimenter.database_connector_lite": [[3, 1, 1, "", "DatabaseConnectorLITE"]], "py_experimenter.database_connector_lite.DatabaseConnectorLITE": [[3, 2, 1, "", "_create_table"], [3, 2, 1, "", "_extract_credentials"], [3, 2, 1, "", "_get_existing_rows"], [3, 2, 1, "", "_pull_open_experiment"], [3, 2, 1, "", "_table_exists"], [3, 2, 1, "", "_table_has_correct_structure"], [3, 2, 1, "", "_test_connection"], [3, 3, 1, "", "_write_to_database_separator"], [3, 2, 1, "", "connect"], [3, 2, 1, "", "escape_sql_chars"], [3, 2, 1, "", "get_structure_from_table"], [3, 2, 1, "", "random_order_string"]], "py_experimenter.database_connector_mysql": [[4, 1, 1, "", "DatabaseConnectorMYSQL"]], "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL": [[4, 2, 1, "", "_create_database_if_not_existing"], [4, 2, 1, "", "_create_table"], [4, 2, 1, "", "_extract_credentials"], [4, 2, 1, "", "_get_existing_rows"], [4, 2, 1, "", "_get_tablename_for_query"], [4, 2, 1, "", "_pull_open_experiment"], [4, 2, 1, "", "_start_transaction"], [4, 2, 1, "", "_table_exists"], [4, 2, 1, "", "_table_has_correct_structure"], [4, 2, 1, "", "_test_connection"], [4, 3, 1, "", "_write_to_database_separator"], [4, 2, 1, "", "connect"], [4, 2, 1, "", "escape_sql_chars"], [4, 2, 1, "", "get_structure_from_table"], [4, 2, 1, "", "random_order_string"]], "py_experimenter.exceptions": [[5, 4, 1, "", "ConfigError"], [5, 4, 1, "", "DatabaseConnectionError"], [5, 4, 1, "", "DatabaseCreationError"], [5, 4, 1, "", "DatabaseError"], [5, 4, 1, "", "DatabaseQueryError"], [5, 4, 1, "", "EmptyFillDatabaseCallError"], [5, 4, 1, "", "InvalidConfigError"], [5, 4, 1, "", "InvalidResultFieldError"], [5, 4, 1, "", "InvalidValuesInConfiguration"], [5, 4, 1, "", "NoConfigFileError"], [5, 4, 1, "", "NoExperimentsLeftException"], [5, 4, 1, "", "ParameterCombinationError"], [5, 4, 1, "", "PyExperimenterError"], [5, 4, 1, "", "TableError"], [5, 4, 1, "", "TableHasWrongStructureError"]], "py_experimenter.experimenter": [[6, 1, 1, "", "PyExperimenter"]], "py_experimenter.experimenter.PyExperimenter": [[6, 2, 1, "", "_execution_worker"], [6, 2, 1, "", "_execution_wrapper"], [6, 2, 1, "", "_handle_error"], [6, 2, 1, "", "_is_valid_configuration"], [6, 2, 1, "", "execute"], [6, 2, 1, "", "fill_table_from_combination"], [6, 2, 1, "", "fill_table_from_config"], [6, 2, 1, "", "fill_table_with_rows"], [6, 2, 1, "", "get_config_value"], [6, 2, 1, "", "get_table"], [6, 2, 1, "", "has_option"], [6, 2, 1, "", "has_section"], [6, 2, 1, "", "reset_experiments"], [6, 2, 1, "", "set_config_value"]], "py_experimenter.result_processor": [[8, 1, 1, "", "ResultProcessor"], [8, 5, 1, "", "file_handler"], [8, 5, 1, "", "formatter"], [8, 5, 1, "", "result_logger"]], "py_experimenter.result_processor.ResultProcessor": [[8, 2, 1, "", "_add_timestamps_to_results"], [8, 2, 1, "", "_change_status"], [8, 2, 1, "", "_not_executed_yet"], [8, 2, 1, "", "_set_machine"], [8, 2, 1, "", "_set_name"], [8, 2, 1, "", "_valid_result_fields"], [8, 2, 1, "", "_write_error"], [8, 2, 1, "", "process_results"]], "py_experimenter.utils": [[9, 6, 1, "", "_generate_int_data"], [9, 6, 1, "", "add_timestep_result_columns"], [9, 6, 1, "", "combine_fill_table_parameters"], [9, 6, 1, "", "extract_db_credentials_and_table_name_from_config"], [9, 6, 1, "", "get_fields"], [9, 6, 1, "", "get_keyfield_data"], [9, 6, 1, "", "get_keyfield_names"], [9, 6, 1, "", "get_keyfields"], [9, 6, 1, "", "get_result_field_names"], [9, 6, 1, "", "get_resultfields"], [9, 6, 1, "", "load_config"], [9, 6, 1, "", "timestamps_for_result_fields"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:exception", "5": "py:data", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "exception", "Python exception"], "5": ["py", "data", "Python data"], "6": ["py", "function", "Python function"]}, "titleterms": {"author": 0, "core": 0, "develop": [0, 15], "team": 0, "contribut": [0, 15], "api": 1, "refer": 1, "py_experiment": [2, 3, 4, 5, 6, 7, 8, 9], "database_connector": 2, "modul": [2, 3, 4, 5, 6, 8, 9], "content": [2, 3, 4, 5, 6, 8, 9], "class": [2, 3, 4, 6, 8], "database_connector_lit": 3, "database_connector_mysql": 4, "except": 5, "experiment": 6, "submodul": 7, "result_processor": 8, "attribut": 8, "util": 9, "function": [9, 11, 12, 19], "changelog": 10, "v1": 10, "0": 10, "04": 10, "09": 10, "2022": 10, "featur": 10, "exampl": [10, 13], "fix": 10, "test": [10, 15], "v0": 10, "6": 10, "01": 10, "03": 10, "5": 10, "17": 10, "4": 10, "02": 10, "11": 10, "2021": 10, "3": 10, "20": 10, "10": 10, "2": 10, "1": 10, "14": 10, "condit": 11, "paramet": 11, "grid": 11, "experi": [11, 12, 19], "configur": [11, 12, 19], "file": [11, 12, 19], "defin": [11, 12, 19], "execut": [11, 12, 19], "pyexperiment": [11, 12, 16, 19], "initi": [11, 12], "fill": [11, 12, 19], "tabl": [11, 12, 19], "gener": [12, 20], "usag": [12, 19], "restart": 12, "fail": 12, "result": [12, 19], "print": 12, "latex": 12, "need": 14, "help": 14, "how": 15, "creat": [15, 19], "an": 15, "issu": 15, "setup": 15, "workflow": [15, 20], "us": 15, "poetri": 15, "extend": 15, "unit": 15, "updat": 15, "document": [15, 16], "pull": 15, "request": 15, "welcom": 16, "": 16, "about": 16, "acknowledg": 16, "instal": 17, "licens": 18, "databas": 19, "credenti": 19, "base": 19, "specif": 19, "row": 19, "reset": 19, "obtain": 19}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Authors": [[0, "authors"]], "Core Development Team": [[0, "core-development-team"]], "Contributions": [[0, "contributions"]], "API Reference": [[1, "api-reference"]], "py_experimenter.database_connector": [[2, "module-py_experimenter.database_connector"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [8, "classes"]], "py_experimenter.database_connector_lite": [[3, "module-py_experimenter.database_connector_lite"]], "py_experimenter.database_connector_mysql": [[4, "module-py_experimenter.database_connector_mysql"]], "py_experimenter.exceptions": [[5, "module-py_experimenter.exceptions"]], "py_experimenter.experimenter": [[6, "module-py_experimenter.experimenter"]], "py_experimenter": [[7, "module-py_experimenter"]], "Submodules": [[7, "submodules"]], "py_experimenter.result_processor": [[8, "module-py_experimenter.result_processor"]], "Attributes": [[8, "attributes"]], "py_experimenter.utils": [[9, "module-py_experimenter.utils"]], "Functions": [[9, "functions"]], "Changelog": [[10, "changelog"]], "v1.0.0 (04/09/2022)": [[10, "v1-0-0-04-09-2022"]], "Feature": [[10, "feature"]], "Examples": [[10, "examples"], [13, "examples"]], "Fix": [[10, "fix"]], "Tests": [[10, "tests"]], "v0.0.6 (01/03/2022)": [[10, "v0-0-6-01-03-2022"]], "v0.0.5 (17/01/2022)": [[10, "v0-0-5-17-01-2022"]], "v0.0.4 (02/11/2021)": [[10, "v0-0-4-02-11-2021"]], "v0.0.3 (20/10/2021)": [[10, "v0-0-3-20-10-2021"]], "v0.0.2 (20/10/2021)": [[10, "v0-0-2-20-10-2021"]], "v0.0.1 (14/10/2021)": [[10, "v0-0-1-14-10-2021"]], "Conditional Parameter Grids": [[11, "Conditional-Parameter-Grids"]], "Experiment Configuration File": [[11, "Experiment-Configuration-File"], [12, "Experiment-Configuration-File"], [19, "experiment-configuration-file"]], "Defining the execution function": [[11, "Defining-the-execution-function"], [12, "Defining-the-execution-function"]], "Executing PyExperimenter": [[11, "Executing-PyExperimenter"], [12, "Executing-PyExperimenter"]], "Initialize PyExperimenter": [[11, "Initialize-PyExperimenter"], [12, "Initialize-PyExperimenter"]], "Fill Table": [[11, "Fill-Table"], [12, "Fill-Table"]], "Execute PyExperimenter": [[11, "Execute-PyExperimenter"], [12, "Execute-PyExperimenter"]], "General Usage": [[12, "General-Usage"]], "Restart Failed Experiments": [[12, "Restart-Failed-Experiments"]], "Generating Result Table": [[12, "Generating-Result-Table"]], "Printing LaTex Table": [[12, "Printing-LaTex-Table"]], "Need Help?": [[14, "need-help"]], "How to Contribute": [[15, "how-to-contribute"]], "Creating an Issue": [[15, "creating-an-issue"]], "Setup Development Workflow": [[15, "setup-development-workflow"]], "How to use Poetry": [[15, "how-to-use-poetry"]], "Extend Unit Tests": [[15, "extend-unit-tests"]], "Update Documentation": [[15, "update-documentation"]], "Create Pull Request": [[15, "create-pull-request"]], "Welcome to PyExperimenter\u2019s documentation!": [[16, "welcome-to-pyexperimenter-s-documentation"]], "Documentation": [[16, null]], "About PyExperimenter": [[16, null]], "Acknowledgements": [[16, "acknowledgements"]], "Installation": [[17, "installation"]], "License": [[18, "license"]], "Usage": [[19, "usage"]], "Database Credential File": [[19, "database-credential-file"]], "Defining the Experiment Function": [[19, "defining-the-experiment-function"]], "Executing the PyExperimenter": [[19, "executing-the-pyexperimenter"]], "Creating a PyExperimenter": [[19, "creating-a-pyexperimenter"]], "Fill Database Table Based on the Configuration File": [[19, "fill-database-table-based-on-the-configuration-file"]], "Fill Table with Specific Rows": [[19, "fill-table-with-specific-rows"]], "Execute Experiments": [[19, "execute-experiments"]], "Reset Experiments": [[19, "reset-experiments"]], "Obtain Results": [[19, "obtain-results"]], "General Workflow": [[20, "general-workflow"]]}, "indexentries": {"databaseconnector (class in py_experimenter.database_connector)": [[2, "py_experimenter.database_connector.DatabaseConnector"]], "_check_combination_in_existing_rows() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._check_combination_in_existing_rows"]], "_create_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._create_table"]], "_exclude_fixed_columns() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._exclude_fixed_columns"]], "_execute_queries() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._execute_queries"]], "_extract_credentials() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._extract_credentials"]], "_get_existing_rows() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._get_existing_rows"]], "_pull_open_experiment() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._pull_open_experiment"]], "_table_exists() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._table_exists"]], "_table_has_correct_structure() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._table_has_correct_structure"]], "_test_connection() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._test_connection"]], "_update_database() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._update_database"]], "_write_to_database() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._write_to_database"]], "close_connection() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.close_connection"]], "commit() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.commit"]], "connect() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.connect"]], "create_table_if_not_existing() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.create_table_if_not_existing"]], "cursor() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.cursor"]], "delete_experiments_with_status() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.delete_experiments_with_status"]], "escape_sql_chars() (py_experimenter.database_connector.databaseconnector class method)": [[2, "py_experimenter.database_connector.DatabaseConnector.escape_sql_chars"]], "execute() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.execute"]], "fetchall() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.fetchall"]], "fill_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.fill_table"]], "get_experiment_configuration() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.get_experiment_configuration"]], "get_structure_from_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.get_structure_from_table"]], "get_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.get_table"]], "module": [[2, "module-py_experimenter.database_connector"], [3, "module-py_experimenter.database_connector_lite"], [4, "module-py_experimenter.database_connector_mysql"], [5, "module-py_experimenter.exceptions"], [6, "module-py_experimenter.experimenter"], [7, "module-py_experimenter"], [8, "module-py_experimenter.result_processor"], [9, "module-py_experimenter.utils"]], "not_executed_yet() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.not_executed_yet"]], "py_experimenter.database_connector": [[2, "module-py_experimenter.database_connector"]], "random_order_string() (py_experimenter.database_connector.databaseconnector static method)": [[2, "py_experimenter.database_connector.DatabaseConnector.random_order_string"]], "databaseconnectorlite (class in py_experimenter.database_connector_lite)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE"]], "_create_table() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._create_table"]], "_extract_credentials() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._extract_credentials"]], "_get_existing_rows() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._get_existing_rows"]], "_pull_open_experiment() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._pull_open_experiment"]], "_table_exists() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._table_exists"]], "_table_has_correct_structure() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._table_has_correct_structure"]], "_test_connection() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._test_connection"]], "_write_to_database_separator (py_experimenter.database_connector_lite.databaseconnectorlite attribute)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._write_to_database_separator"]], "connect() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.connect"]], "escape_sql_chars() (py_experimenter.database_connector_lite.databaseconnectorlite static method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.escape_sql_chars"]], "get_structure_from_table() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.get_structure_from_table"]], "py_experimenter.database_connector_lite": [[3, "module-py_experimenter.database_connector_lite"]], "random_order_string() (py_experimenter.database_connector_lite.databaseconnectorlite static method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.random_order_string"]], "databaseconnectormysql (class in py_experimenter.database_connector_mysql)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL"]], "_create_database_if_not_existing() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._create_database_if_not_existing"]], "_create_table() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._create_table"]], "_extract_credentials() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._extract_credentials"]], "_get_existing_rows() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._get_existing_rows"]], "_get_tablename_for_query() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._get_tablename_for_query"]], "_pull_open_experiment() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._pull_open_experiment"]], "_start_transaction() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._start_transaction"]], "_table_exists() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._table_exists"]], "_table_has_correct_structure() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._table_has_correct_structure"]], "_test_connection() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._test_connection"]], "_write_to_database_separator (py_experimenter.database_connector_mysql.databaseconnectormysql attribute)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._write_to_database_separator"]], "connect() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.connect"]], "escape_sql_chars() (py_experimenter.database_connector_mysql.databaseconnectormysql static method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.escape_sql_chars"]], "get_structure_from_table() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.get_structure_from_table"]], "py_experimenter.database_connector_mysql": [[4, "module-py_experimenter.database_connector_mysql"]], "random_order_string() (py_experimenter.database_connector_mysql.databaseconnectormysql static method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.random_order_string"]], "configerror": [[5, "py_experimenter.exceptions.ConfigError"]], "databaseconnectionerror": [[5, "py_experimenter.exceptions.DatabaseConnectionError"]], "databasecreationerror": [[5, "py_experimenter.exceptions.DatabaseCreationError"]], "databaseerror": [[5, "py_experimenter.exceptions.DatabaseError"]], "databasequeryerror": [[5, "py_experimenter.exceptions.DatabaseQueryError"]], "emptyfilldatabasecallerror": [[5, "py_experimenter.exceptions.EmptyFillDatabaseCallError"]], "invalidconfigerror": [[5, "py_experimenter.exceptions.InvalidConfigError"]], "invalidresultfielderror": [[5, "py_experimenter.exceptions.InvalidResultFieldError"]], "invalidvaluesinconfiguration": [[5, "py_experimenter.exceptions.InvalidValuesInConfiguration"]], "noconfigfileerror": [[5, "py_experimenter.exceptions.NoConfigFileError"]], "noexperimentsleftexception": [[5, "py_experimenter.exceptions.NoExperimentsLeftException"]], "parametercombinationerror": [[5, "py_experimenter.exceptions.ParameterCombinationError"]], "pyexperimentererror": [[5, "py_experimenter.exceptions.PyExperimenterError"]], "tableerror": [[5, "py_experimenter.exceptions.TableError"]], "tablehaswrongstructureerror": [[5, "py_experimenter.exceptions.TableHasWrongStructureError"]], "py_experimenter.exceptions": [[5, "module-py_experimenter.exceptions"]], "pyexperimenter (class in py_experimenter.experimenter)": [[6, "py_experimenter.experimenter.PyExperimenter"]], "_execution_worker() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter._execution_worker"]], "_execution_wrapper() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter._execution_wrapper"]], "_handle_error() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter._handle_error"]], "_is_valid_configuration() (py_experimenter.experimenter.pyexperimenter static method)": [[6, "py_experimenter.experimenter.PyExperimenter._is_valid_configuration"]], "execute() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.execute"]], "fill_table_from_combination() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.fill_table_from_combination"]], "fill_table_from_config() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.fill_table_from_config"]], "fill_table_with_rows() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.fill_table_with_rows"]], "get_config_value() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.get_config_value"]], "get_table() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.get_table"]], "has_option() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.has_option"]], "has_section() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.has_section"]], "py_experimenter.experimenter": [[6, "module-py_experimenter.experimenter"]], "reset_experiments() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.reset_experiments"]], "set_config_value() (py_experimenter.experimenter.pyexperimenter method)": [[6, "py_experimenter.experimenter.PyExperimenter.set_config_value"]], "py_experimenter": [[7, "module-py_experimenter"]], "resultprocessor (class in py_experimenter.result_processor)": [[8, "py_experimenter.result_processor.ResultProcessor"]], "_add_timestamps_to_results() (py_experimenter.result_processor.resultprocessor static method)": [[8, "py_experimenter.result_processor.ResultProcessor._add_timestamps_to_results"]], "_change_status() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._change_status"]], "_not_executed_yet() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._not_executed_yet"]], "_set_machine() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._set_machine"]], "_set_name() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._set_name"]], "_valid_result_fields() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._valid_result_fields"]], "_write_error() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._write_error"]], "file_handler (in module py_experimenter.result_processor)": [[8, "py_experimenter.result_processor.file_handler"]], "formatter (in module py_experimenter.result_processor)": [[8, "py_experimenter.result_processor.formatter"]], "process_results() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor.process_results"]], "py_experimenter.result_processor": [[8, "module-py_experimenter.result_processor"]], "result_logger (in module py_experimenter.result_processor)": [[8, "py_experimenter.result_processor.result_logger"]], "_generate_int_data() (in module py_experimenter.utils)": [[9, "py_experimenter.utils._generate_int_data"]], "add_timestep_result_columns() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.add_timestep_result_columns"]], "combine_fill_table_parameters() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.combine_fill_table_parameters"]], "extract_db_credentials_and_table_name_from_config() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.extract_db_credentials_and_table_name_from_config"]], "get_fields() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_fields"]], "get_keyfield_data() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_keyfield_data"]], "get_keyfield_names() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_keyfield_names"]], "get_keyfields() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_keyfields"]], "get_result_field_names() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_result_field_names"]], "get_resultfields() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_resultfields"]], "load_config() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.load_config"]], "py_experimenter.utils": [[9, "module-py_experimenter.utils"]], "timestamps_for_result_fields() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.timestamps_for_result_fields"]]}})