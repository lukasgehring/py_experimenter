{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example: Usage of Logtables\n",
    "\n",
    "This example shows the usage of `Logtables`. We will show how one can define and fill logtables. For this example you should already understand the basic functionalities of `PyExerimenter`. Note that the purpose of this notebook is to demonstrate the functionalities of logtables, not to provide reasonable experiments.\n",
    "\n",
    "To execute this notebook you need to install:\n",
    "```\n",
    "pip install py_experimenter\n",
    "pip install scikit-learn\n",
    "```"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Experiment Configuration File\n",
    "This notebook shows an example execution of `PyExperimenter` based the configuration file that is used in the [general usage](https://tornede.github.io/py_experimenter/examples/example_general_usage.html) notebook. However, this file is slightly adapted to show the usage of logtables. The goal in this small example is to find the best kernel for an SVM on some dataset using grid search and log the performance of SVMs initialized with different kernels. Further explanation of logtables can be found in the [documentation](https://tornede.github.io/py_experimenter/usage.html#logtables)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "content = \"\"\"\n",
    "PY_EXPERIMENTER:\n",
    "  n_jobs : 1\n",
    "\n",
    "  Database:\n",
    "    provider: sqlite\n",
    "    database: py_experimenter\n",
    "    table:\n",
    "      name: example_logtables\n",
    "      keyfields:\n",
    "        dataset:\n",
    "          type: VARCHAR(50)\n",
    "          values: ['iris']\n",
    "        cross_validation_splits:\n",
    "          type: int\n",
    "          values: [5]\n",
    "        seed:\n",
    "          type: int\n",
    "          values: [1, 2, 3, 4, 5]\n",
    "      result_timestamps: false\n",
    "      resultfields:\n",
    "        best_kernel_accuracy: VARCHAR(50)\n",
    "        best_kernel_f1: VARCHAR(50)\n",
    "    logtables:\n",
    "      train_scores:\n",
    "        f1: DOUBLE\n",
    "        accuracy: DOUBLE\n",
    "        kernel: VARCHAR(50)\n",
    "      test_f1: \n",
    "        test_f1: DOUBLE\n",
    "      test_accuracy:\n",
    "        test_accuracy: DOUBLE\n",
    "\n",
    "  CUSTOM:\n",
    "    path: sample_data\n",
    "\"\"\"\n",
    "\n",
    "# Create config directory if it does not exist\n",
    "if not os.path.exists('config'):\n",
    "    os.mkdir('config')\n",
    "    \n",
    "# Create config file\n",
    "experiment_configuration_file_path = os.path.join('config', 'example_logtables.yml')\n",
    "with open(experiment_configuration_file_path, \"w\") as f: \n",
    "  f.write(content)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the execution function\n",
    "Next, the execution of a single experiment has to be defined. Note that this dummy example is a slightly modified version of the [general usage](https://tornede.github.io/py_experimenter/examples/example_general_usage.html) notebook. Instead of executing with one kernel we iterate over kernels to find the best one. Additionally, the results get logged."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "\n",
    "from py_experimenter.result_processor import ResultProcessor\n",
    "\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "def run_ml(parameters: dict, result_processor: ResultProcessor, custom_config: dict):\n",
    "    seed = parameters['seed']\n",
    "\n",
    "    # Initalize variables\n",
    "    performance_f1 = 0\n",
    "    best_kernel_f1 = ''\n",
    "    performance_accuracy = 0\n",
    "    best_kernel_accuracy = ''\n",
    "    \n",
    "    for kernel in ['linear', 'poly', 'rbf', 'sigmoid']:\n",
    "        # Set seed for reproducibility\n",
    "        random.seed(seed)\n",
    "        np.random.seed(seed)\n",
    "\n",
    "        data = load_iris()\n",
    "        X = data.data\n",
    "        y = data.target\n",
    "\n",
    "        model = make_pipeline(StandardScaler(), SVC(kernel=kernel, gamma='auto'))\n",
    "        scores = cross_validate(model, X, y,\n",
    "                                cv=parameters['cross_validation_splits'],\n",
    "                                scoring=('accuracy', 'f1_micro'),\n",
    "                                return_train_score=True\n",
    "                                )\n",
    "\n",
    "        # Log scores to logtables\n",
    "        result_processor.process_logs(\n",
    "            {\n",
    "                'train_scores': {\n",
    "                    'f1': np.mean(scores['train_f1_micro']),\n",
    "                    'accuracy': np.mean(scores['train_accuracy']),\n",
    "                    'kernel': \"'\" + kernel + \"'\"\n",
    "                },\n",
    "                'test_f1': {\n",
    "                    'test_f1': np.mean(scores['test_f1_micro'])},\n",
    "                'test_accuracy': {\n",
    "                    'test_accuracy': np.mean(scores['test_accuracy'])},\n",
    "            }\n",
    "        )\n",
    "\n",
    "        if np.mean(scores['test_f1_micro']) > performance_f1:\n",
    "            performance_f1 = np.mean(scores['test_f1_micro'])\n",
    "            best_kernel_f1 = kernel\n",
    "        if np.mean(scores['test_accuracy']) > performance_accuracy:\n",
    "            performance_accuracy = np.mean(scores['test_accuracy'])\n",
    "            best_kernel_accuracy = kernel\n",
    "\n",
    "    result_processor.process_results({\n",
    "        'best_kernel_f1': best_kernel_f1,\n",
    "        'best_kernel_accuracy': best_kernel_accuracy\n",
    "    })"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Executing PyExperimenter\n",
    "Now we create a `PyExperimenter` object with the experiment configuration above. We also fill the database with with values from that experiment configuration file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-02-27 09:23:21,686  | py-experimenter - INFO     | Found 3 keyfields\n",
      "2024-02-27 09:23:21,688  | py-experimenter - WARNING  | No custom section defined in config\n",
      "2024-02-27 09:23:21,691  | py-experimenter - WARNING  | No codecarbon section defined in config\n",
      "2024-02-27 09:23:21,692  | py-experimenter - INFO     | Initialized and connected to database\n",
      "2024-02-27 09:23:21,817  | py-experimenter - INFO     | 5 rows successfully added to database. 0 rows were skipped.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>dataset</th>\n",
       "      <th>cross_validation_splits</th>\n",
       "      <th>seed</th>\n",
       "      <th>creation_date</th>\n",
       "      <th>status</th>\n",
       "      <th>start_date</th>\n",
       "      <th>name</th>\n",
       "      <th>machine</th>\n",
       "      <th>best_kernel_accuracy</th>\n",
       "      <th>best_kernel_f1</th>\n",
       "      <th>end_date</th>\n",
       "      <th>error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>created</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>created</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>created</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>created</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>created</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID dataset  cross_validation_splits  seed        creation_date   status  \\\n",
       "0   1    iris                        5     1  2024-02-27 09:23:21  created   \n",
       "1   2    iris                        5     2  2024-02-27 09:23:21  created   \n",
       "2   3    iris                        5     3  2024-02-27 09:23:21  created   \n",
       "3   4    iris                        5     4  2024-02-27 09:23:21  created   \n",
       "4   5    iris                        5     5  2024-02-27 09:23:21  created   \n",
       "\n",
       "  start_date  name machine best_kernel_accuracy best_kernel_f1 end_date error  \n",
       "0       None  None    None                 None           None     None  None  \n",
       "1       None  None    None                 None           None     None  None  \n",
       "2       None  None    None                 None           None     None  None  \n",
       "3       None  None    None                 None           None     None  None  \n",
       "4       None  None    None                 None           None     None  None  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from py_experimenter.experimenter import PyExperimenter\n",
    "\n",
    "experimenter = PyExperimenter(experiment_configuration_file_path=experiment_configuration_file_path, name='example_notebook')\n",
    "experimenter.fill_table_from_config()\n",
    "\n",
    "experimenter.get_table()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>experiment_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>kernel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [ID, experiment_id, timestamp, f1, accuracy, kernel]\n",
       "Index: []"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read one of the logtables\n",
    "experimenter.get_logtable('train_scores')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run Experiments\n",
    "\n",
    "All experiments are executed sequentially by the same `PyExperimenter` due to `max_experiments=-1` and the implicit `n_jobs=1` as no amount of jobs is specified in the configuration file. If just a single one or a predifined number of experiments should be executed, the `-1` has to be replaced by the corresponding amount.\n",
    "\n",
    "The first parameter, i.e. `run_ml`, relates to the actual method that should be executed with the given keyfields of the table. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[codecarbon INFO @ 09:23:21] [setup] RAM Tracking...\n",
      "[codecarbon INFO @ 09:23:21] [setup] GPU Tracking...\n",
      "[codecarbon INFO @ 09:23:21] No GPU found.\n",
      "[codecarbon INFO @ 09:23:21] [setup] CPU Tracking...\n",
      "[codecarbon WARNING @ 09:23:21] No CPU tracking mode found. Falling back on CPU constant mode.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[codecarbon WARNING @ 09:23:23] We saw that you have a 12th Gen Intel(R) Core(TM) i7-1260P but we don't know it. Please contact us.\n",
      "[codecarbon INFO @ 09:23:23] CPU Model on constant consumption mode: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:23] >>> Tracker's metadata:\n",
      "[codecarbon INFO @ 09:23:23]   Platform system: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35\n",
      "[codecarbon INFO @ 09:23:23]   Python version: 3.9.0\n",
      "[codecarbon INFO @ 09:23:23]   CodeCarbon version: 2.3.4\n",
      "[codecarbon INFO @ 09:23:23]   Available RAM : 15.475 GB\n",
      "[codecarbon INFO @ 09:23:23]   CPU count: 16\n",
      "[codecarbon INFO @ 09:23:23]   CPU model: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:23]   GPU count: None\n",
      "[codecarbon INFO @ 09:23:23]   GPU model: None\n",
      "[codecarbon INFO @ 09:23:26] Energy consumed for RAM : 0.000000 kWh. RAM Power : 5.803094387054443 W\n",
      "[codecarbon INFO @ 09:23:26] Energy consumed for all CPUs : 0.000002 kWh. Total CPU Power : 42.5 W\n",
      "[codecarbon INFO @ 09:23:26] 0.000003 kWh of electricity used since the beginning.\n",
      "[codecarbon INFO @ 09:23:26] [setup] RAM Tracking...\n",
      "[codecarbon INFO @ 09:23:26] [setup] GPU Tracking...\n",
      "[codecarbon INFO @ 09:23:26] No GPU found.\n",
      "[codecarbon INFO @ 09:23:26] [setup] CPU Tracking...\n",
      "[codecarbon WARNING @ 09:23:26] No CPU tracking mode found. Falling back on CPU constant mode.\n",
      "[codecarbon WARNING @ 09:23:27] We saw that you have a 12th Gen Intel(R) Core(TM) i7-1260P but we don't know it. Please contact us.\n",
      "[codecarbon INFO @ 09:23:27] CPU Model on constant consumption mode: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:27] >>> Tracker's metadata:\n",
      "[codecarbon INFO @ 09:23:27]   Platform system: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35\n",
      "[codecarbon INFO @ 09:23:27]   Python version: 3.9.0\n",
      "[codecarbon INFO @ 09:23:27]   CodeCarbon version: 2.3.4\n",
      "[codecarbon INFO @ 09:23:27]   Available RAM : 15.475 GB\n",
      "[codecarbon INFO @ 09:23:27]   CPU count: 16\n",
      "[codecarbon INFO @ 09:23:27]   CPU model: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:27]   GPU count: None\n",
      "[codecarbon INFO @ 09:23:27]   GPU model: None\n",
      "[codecarbon INFO @ 09:23:31] Energy consumed for RAM : 0.000000 kWh. RAM Power : 5.803094387054443 W\n",
      "[codecarbon INFO @ 09:23:31] Energy consumed for all CPUs : 0.000002 kWh. Total CPU Power : 42.5 W\n",
      "[codecarbon INFO @ 09:23:31] 0.000002 kWh of electricity used since the beginning.\n",
      "[codecarbon INFO @ 09:23:31] [setup] RAM Tracking...\n",
      "[codecarbon INFO @ 09:23:31] [setup] GPU Tracking...\n",
      "[codecarbon INFO @ 09:23:31] No GPU found.\n",
      "[codecarbon INFO @ 09:23:31] [setup] CPU Tracking...\n",
      "[codecarbon WARNING @ 09:23:31] No CPU tracking mode found. Falling back on CPU constant mode.\n",
      "[codecarbon WARNING @ 09:23:32] We saw that you have a 12th Gen Intel(R) Core(TM) i7-1260P but we don't know it. Please contact us.\n",
      "[codecarbon INFO @ 09:23:32] CPU Model on constant consumption mode: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:32] >>> Tracker's metadata:\n",
      "[codecarbon INFO @ 09:23:32]   Platform system: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35\n",
      "[codecarbon INFO @ 09:23:32]   Python version: 3.9.0\n",
      "[codecarbon INFO @ 09:23:32]   CodeCarbon version: 2.3.4\n",
      "[codecarbon INFO @ 09:23:32]   Available RAM : 15.475 GB\n",
      "[codecarbon INFO @ 09:23:32]   CPU count: 16\n",
      "[codecarbon INFO @ 09:23:32]   CPU model: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:32]   GPU count: None\n",
      "[codecarbon INFO @ 09:23:32]   GPU model: None\n",
      "[codecarbon INFO @ 09:23:35] Energy consumed for RAM : 0.000000 kWh. RAM Power : 5.803094387054443 W\n",
      "[codecarbon INFO @ 09:23:35] Energy consumed for all CPUs : 0.000002 kWh. Total CPU Power : 42.5 W\n",
      "[codecarbon INFO @ 09:23:35] 0.000002 kWh of electricity used since the beginning.\n",
      "[codecarbon INFO @ 09:23:35] [setup] RAM Tracking...\n",
      "[codecarbon INFO @ 09:23:35] [setup] GPU Tracking...\n",
      "[codecarbon INFO @ 09:23:35] No GPU found.\n",
      "[codecarbon INFO @ 09:23:35] [setup] CPU Tracking...\n",
      "[codecarbon WARNING @ 09:23:35] No CPU tracking mode found. Falling back on CPU constant mode.\n",
      "[codecarbon WARNING @ 09:23:37] We saw that you have a 12th Gen Intel(R) Core(TM) i7-1260P but we don't know it. Please contact us.\n",
      "[codecarbon INFO @ 09:23:37] CPU Model on constant consumption mode: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:37] >>> Tracker's metadata:\n",
      "[codecarbon INFO @ 09:23:37]   Platform system: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35\n",
      "[codecarbon INFO @ 09:23:37]   Python version: 3.9.0\n",
      "[codecarbon INFO @ 09:23:37]   CodeCarbon version: 2.3.4\n",
      "[codecarbon INFO @ 09:23:37]   Available RAM : 15.475 GB\n",
      "[codecarbon INFO @ 09:23:37]   CPU count: 16\n",
      "[codecarbon INFO @ 09:23:37]   CPU model: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:37]   GPU count: None\n",
      "[codecarbon INFO @ 09:23:37]   GPU model: None\n",
      "[codecarbon INFO @ 09:23:40] Energy consumed for RAM : 0.000000 kWh. RAM Power : 5.803094387054443 W\n",
      "[codecarbon INFO @ 09:23:40] Energy consumed for all CPUs : 0.000002 kWh. Total CPU Power : 42.5 W\n",
      "[codecarbon INFO @ 09:23:40] 0.000002 kWh of electricity used since the beginning.\n",
      "[codecarbon INFO @ 09:23:40] [setup] RAM Tracking...\n",
      "[codecarbon INFO @ 09:23:40] [setup] GPU Tracking...\n",
      "[codecarbon INFO @ 09:23:40] No GPU found.\n",
      "[codecarbon INFO @ 09:23:40] [setup] CPU Tracking...\n",
      "[codecarbon WARNING @ 09:23:40] No CPU tracking mode found. Falling back on CPU constant mode.\n",
      "[codecarbon WARNING @ 09:23:41] We saw that you have a 12th Gen Intel(R) Core(TM) i7-1260P but we don't know it. Please contact us.\n",
      "[codecarbon INFO @ 09:23:41] CPU Model on constant consumption mode: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:41] >>> Tracker's metadata:\n",
      "[codecarbon INFO @ 09:23:41]   Platform system: Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35\n",
      "[codecarbon INFO @ 09:23:41]   Python version: 3.9.0\n",
      "[codecarbon INFO @ 09:23:41]   CodeCarbon version: 2.3.4\n",
      "[codecarbon INFO @ 09:23:41]   Available RAM : 15.475 GB\n",
      "[codecarbon INFO @ 09:23:41]   CPU count: 16\n",
      "[codecarbon INFO @ 09:23:41]   CPU model: 12th Gen Intel(R) Core(TM) i7-1260P\n",
      "[codecarbon INFO @ 09:23:41]   GPU count: None\n",
      "[codecarbon INFO @ 09:23:41]   GPU model: None\n",
      "[codecarbon INFO @ 09:23:44] Energy consumed for RAM : 0.000000 kWh. RAM Power : 5.803094387054443 W\n",
      "[codecarbon INFO @ 09:23:44] Energy consumed for all CPUs : 0.000002 kWh. Total CPU Power : 42.5 W\n",
      "[codecarbon INFO @ 09:23:44] 0.000002 kWh of electricity used since the beginning.\n",
      "2024-02-27 09:23:45,018  | py-experimenter - INFO     | All configured executions finished.\n"
     ]
    }
   ],
   "source": [
    "experimenter.execute(run_ml, max_experiments=-1)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check Results\n",
    "The content of all database tables having keyfields and resultfields, as well as every logtable can be easily obtained."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>dataset</th>\n",
       "      <th>cross_validation_splits</th>\n",
       "      <th>seed</th>\n",
       "      <th>creation_date</th>\n",
       "      <th>status</th>\n",
       "      <th>start_date</th>\n",
       "      <th>name</th>\n",
       "      <th>machine</th>\n",
       "      <th>best_kernel_accuracy</th>\n",
       "      <th>best_kernel_f1</th>\n",
       "      <th>end_date</th>\n",
       "      <th>error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>done</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>example_notebook</td>\n",
       "      <td>Worklaptop</td>\n",
       "      <td>linear</td>\n",
       "      <td>linear</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>done</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>example_notebook</td>\n",
       "      <td>Worklaptop</td>\n",
       "      <td>linear</td>\n",
       "      <td>linear</td>\n",
       "      <td>2024-02-27 09:23:31</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>done</td>\n",
       "      <td>2024-02-27 09:23:31</td>\n",
       "      <td>example_notebook</td>\n",
       "      <td>Worklaptop</td>\n",
       "      <td>linear</td>\n",
       "      <td>linear</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>done</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>example_notebook</td>\n",
       "      <td>Worklaptop</td>\n",
       "      <td>linear</td>\n",
       "      <td>linear</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>iris</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:21</td>\n",
       "      <td>done</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>example_notebook</td>\n",
       "      <td>Worklaptop</td>\n",
       "      <td>linear</td>\n",
       "      <td>linear</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID dataset  cross_validation_splits  seed        creation_date status  \\\n",
       "0   1    iris                        5     1  2024-02-27 09:23:21   done   \n",
       "1   2    iris                        5     2  2024-02-27 09:23:21   done   \n",
       "2   3    iris                        5     3  2024-02-27 09:23:21   done   \n",
       "3   4    iris                        5     4  2024-02-27 09:23:21   done   \n",
       "4   5    iris                        5     5  2024-02-27 09:23:21   done   \n",
       "\n",
       "            start_date              name     machine best_kernel_accuracy  \\\n",
       "0  2024-02-27 09:23:21  example_notebook  Worklaptop               linear   \n",
       "1  2024-02-27 09:23:26  example_notebook  Worklaptop               linear   \n",
       "2  2024-02-27 09:23:31  example_notebook  Worklaptop               linear   \n",
       "3  2024-02-27 09:23:35  example_notebook  Worklaptop               linear   \n",
       "4  2024-02-27 09:23:40  example_notebook  Worklaptop               linear   \n",
       "\n",
       "  best_kernel_f1             end_date error  \n",
       "0         linear  2024-02-27 09:23:26  None  \n",
       "1         linear  2024-02-27 09:23:31  None  \n",
       "2         linear  2024-02-27 09:23:35  None  \n",
       "3         linear  2024-02-27 09:23:40  None  \n",
       "4         linear  2024-02-27 09:23:44  None  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "experimenter.get_table()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>experiment_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>f1</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>kernel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>'linear'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>'poly'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>'rbf'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>'sigmoid'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>'linear'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>'poly'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>'rbf'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>'sigmoid'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>'linear'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>'poly'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>'rbf'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>'sigmoid'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>'linear'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>'poly'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>'rbf'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>'sigmoid'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>0.971667</td>\n",
       "      <td>'linear'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>0.936667</td>\n",
       "      <td>'poly'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>0.975000</td>\n",
       "      <td>'rbf'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>'sigmoid'</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID  experiment_id            timestamp        f1  accuracy     kernel\n",
       "0    1              1  2024-02-27 09:23:26  0.971667  0.971667   'linear'\n",
       "1    2              1  2024-02-27 09:23:26  0.936667  0.936667     'poly'\n",
       "2    3              1  2024-02-27 09:23:26  0.975000  0.975000      'rbf'\n",
       "3    4              1  2024-02-27 09:23:26  0.896667  0.896667  'sigmoid'\n",
       "4    5              2  2024-02-27 09:23:30  0.971667  0.971667   'linear'\n",
       "5    6              2  2024-02-27 09:23:30  0.936667  0.936667     'poly'\n",
       "6    7              2  2024-02-27 09:23:30  0.975000  0.975000      'rbf'\n",
       "7    8              2  2024-02-27 09:23:30  0.896667  0.896667  'sigmoid'\n",
       "8    9              3  2024-02-27 09:23:35  0.971667  0.971667   'linear'\n",
       "9   10              3  2024-02-27 09:23:35  0.936667  0.936667     'poly'\n",
       "10  11              3  2024-02-27 09:23:35  0.975000  0.975000      'rbf'\n",
       "11  12              3  2024-02-27 09:23:35  0.896667  0.896667  'sigmoid'\n",
       "12  13              4  2024-02-27 09:23:40  0.971667  0.971667   'linear'\n",
       "13  14              4  2024-02-27 09:23:40  0.936667  0.936667     'poly'\n",
       "14  15              4  2024-02-27 09:23:40  0.975000  0.975000      'rbf'\n",
       "15  16              4  2024-02-27 09:23:40  0.896667  0.896667  'sigmoid'\n",
       "16  17              5  2024-02-27 09:23:44  0.971667  0.971667   'linear'\n",
       "17  18              5  2024-02-27 09:23:44  0.936667  0.936667     'poly'\n",
       "18  19              5  2024-02-27 09:23:44  0.975000  0.975000      'rbf'\n",
       "19  20              5  2024-02-27 09:23:44  0.896667  0.896667  'sigmoid'"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "experimenter.get_logtable('train_scores')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>experiment_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>test_f1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID  experiment_id            timestamp   test_f1\n",
       "0    1              1  2024-02-27 09:23:26  0.966667\n",
       "1    2              1  2024-02-27 09:23:26  0.933333\n",
       "2    3              1  2024-02-27 09:23:26  0.966667\n",
       "3    4              1  2024-02-27 09:23:26  0.893333\n",
       "4    5              2  2024-02-27 09:23:30  0.966667\n",
       "5    6              2  2024-02-27 09:23:30  0.933333\n",
       "6    7              2  2024-02-27 09:23:30  0.966667\n",
       "7    8              2  2024-02-27 09:23:30  0.893333\n",
       "8    9              3  2024-02-27 09:23:35  0.966667\n",
       "9   10              3  2024-02-27 09:23:35  0.933333\n",
       "10  11              3  2024-02-27 09:23:35  0.966667\n",
       "11  12              3  2024-02-27 09:23:35  0.893333\n",
       "12  13              4  2024-02-27 09:23:40  0.966667\n",
       "13  14              4  2024-02-27 09:23:40  0.933333\n",
       "14  15              4  2024-02-27 09:23:40  0.966667\n",
       "15  16              4  2024-02-27 09:23:40  0.893333\n",
       "16  17              5  2024-02-27 09:23:44  0.966667\n",
       "17  18              5  2024-02-27 09:23:44  0.933333\n",
       "18  19              5  2024-02-27 09:23:44  0.966667\n",
       "19  20              5  2024-02-27 09:23:44  0.893333"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "experimenter.get_logtable('test_f1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>experiment_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>test_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2024-02-27 09:23:26</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2024-02-27 09:23:30</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-02-27 09:23:35</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-02-27 09:23:40</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-02-27 09:23:44</td>\n",
       "      <td>0.893333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID  experiment_id            timestamp  test_accuracy\n",
       "0    1              1  2024-02-27 09:23:26       0.966667\n",
       "1    2              1  2024-02-27 09:23:26       0.933333\n",
       "2    3              1  2024-02-27 09:23:26       0.966667\n",
       "3    4              1  2024-02-27 09:23:26       0.893333\n",
       "4    5              2  2024-02-27 09:23:30       0.966667\n",
       "5    6              2  2024-02-27 09:23:30       0.933333\n",
       "6    7              2  2024-02-27 09:23:30       0.966667\n",
       "7    8              2  2024-02-27 09:23:30       0.893333\n",
       "8    9              3  2024-02-27 09:23:35       0.966667\n",
       "9   10              3  2024-02-27 09:23:35       0.933333\n",
       "10  11              3  2024-02-27 09:23:35       0.966667\n",
       "11  12              3  2024-02-27 09:23:35       0.893333\n",
       "12  13              4  2024-02-27 09:23:40       0.966667\n",
       "13  14              4  2024-02-27 09:23:40       0.933333\n",
       "14  15              4  2024-02-27 09:23:40       0.966667\n",
       "15  16              4  2024-02-27 09:23:40       0.893333\n",
       "16  17              5  2024-02-27 09:23:44       0.966667\n",
       "17  18              5  2024-02-27 09:23:44       0.933333\n",
       "18  19              5  2024-02-27 09:23:44       0.966667\n",
       "19  20              5  2024-02-27 09:23:44       0.893333"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "experimenter.get_logtable('test_accuracy')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CodeCarbon\n",
    "Note that `CodeCarbon` is activated by default, collecting information about the carbon emissions of each experiment. Have a look at our [general usage example](https://tornede.github.io/py_experimenter/examples/example_general_usage.html) and the according [documentation of CodeCarbon fields](https://tornede.github.io/py_experimenter/usage.html#codecarbon-fields) for more information."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py-experimenter",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "771bc47fe5ac54f21af9466a0ce1d237446274d8107817e4b77b2018f606f4bf"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
