Search.setIndex({"docnames": ["authors", "autoapi/index", "autoapi/py_experimenter/database_connector/index", "autoapi/py_experimenter/database_connector_lite/index", "autoapi/py_experimenter/database_connector_mysql/index", "autoapi/py_experimenter/exceptions/index", "autoapi/py_experimenter/experiment_status/index", "autoapi/py_experimenter/experimenter/index", "autoapi/py_experimenter/index", "autoapi/py_experimenter/result_processor/index", "autoapi/py_experimenter/utils/index", "changelog", "examples/example_conditional_grid", "examples/example_general_usage", "examples/index", "help", "how-to-contribute", "index", "installation", "license", "usage", "workflow"], "filenames": ["authors.rst", "autoapi/index.rst", "autoapi/py_experimenter/database_connector/index.rst", "autoapi/py_experimenter/database_connector_lite/index.rst", "autoapi/py_experimenter/database_connector_mysql/index.rst", "autoapi/py_experimenter/exceptions/index.rst", "autoapi/py_experimenter/experiment_status/index.rst", "autoapi/py_experimenter/experimenter/index.rst", "autoapi/py_experimenter/index.rst", "autoapi/py_experimenter/result_processor/index.rst", "autoapi/py_experimenter/utils/index.rst", "changelog.rst", "examples/example_conditional_grid.ipynb", "examples/example_general_usage.ipynb", "examples/index.rst", "help.rst", "how-to-contribute.rst", "index.rst", "installation.rst", "license.rst", "usage.md", "workflow.md"], "titles": ["Authors", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.database_connector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.database_connector_lite</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.database_connector_mysql</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.experiment_status</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.experimenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.result_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.utils</span></code>", "Changelog", "Conditional Parameter Grids", "General Usage", "Examples", "Need Help?", "How to Contribute", "Welcome to PyExperimenter\u2019s documentation!", "Installation", "License", "Usage", "General Workflow"], "terms": {"tanja": [0, 18, 19], "torned": [0, 16, 18, 19], "alexand": [0, 18, 19], "luka": [0, 18, 19], "fehr": [0, 18, 19], "helena": [0, 18, 19], "graf": [0, 18, 19], "jona": [0, 18, 19], "hansel": [0, 18, 19], "felix": [0, 18, 19], "mohr": [0, 18, 19], "marcel": [0, 18, 19], "wever": [0, 18, 19], "gehr": [0, 18, 19], "thi": [1, 6, 7, 9, 11, 12, 13, 16, 17, 19, 20, 21], "page": [1, 11], "contain": [1, 7, 11, 12, 13, 16, 20], "auto": [1, 13], "gener": [1, 6, 11, 12, 14, 16, 17, 20], "document": [1, 11, 12, 13, 18, 19], "1": [1, 7, 12, 13, 17, 18, 20], "py_experiment": [1, 12, 13, 16, 17, 18, 20], "database_connector": [1, 3, 4, 8], "database_connector_lit": [1, 8], "database_connector_mysql": [1, 8], "except": [1, 7, 8, 11, 16], "experiment_statu": [1, 8], "experiment": [1, 8, 11, 12, 13, 16, 18, 20], "result_processor": [1, 7, 8, 12, 13, 20], "util": [1, 8], "creat": [1, 2, 6, 7, 10, 11, 12, 13, 15, 17, 21], "sphinx": [1, 11, 16, 18], "autoapi": [1, 18], "databaseconnector": [2, 3, 4], "database_credential_file_path": [2, 4, 7, 20], "base": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 21], "abc": 2, "helper": 2, "provid": [2, 7, 12, 13, 16, 19, 20, 21], "standard": 2, "wai": [2, 17], "an": [2, 7, 9, 11, 12, 13, 17, 19, 20, 21], "us": [2, 7, 9, 11, 12, 13, 17, 19, 20], "inherit": 2, "abstract": 2, "_extract_credenti": [2, 3, 4], "_test_connect": [2, 3, 4], "connect": [2, 3, 4, 7, 10, 19], "close_connect": 2, "commit": [2, 16], "none": [2, 4, 7, 9], "execut": [2, 7, 11, 16, 17, 18, 21], "cursor": [2, 3, 4], "sql_statement": 2, "fetchal": 2, "create_table_if_not_exist": 2, "_exclude_fixed_column": 2, "column": [2, 3, 4, 7, 11, 13, 20], "list": [2, 3, 4, 7, 9, 10, 11, 16, 20, 21], "str": [2, 3, 7, 9, 10, 13], "_table_exist": [2, 3, 4], "_create_t": [2, 3, 4], "_table_has_correct_structur": [2, 3, 4], "typed_field": [2, 3, 4], "classmethod": 2, "escape_sql_char": [2, 3, 4], "fill_tabl": 2, "paramet": [2, 7, 10, 13, 14, 17, 20, 21], "fixed_parameter_combin": [2, 7, 10, 12], "_check_combination_in_existing_row": 2, "combin": [2, 7, 12], "existing_row": 2, "keyfield_nam": [2, 10], "bool": [2, 3, 7, 10], "_get_existing_row": [2, 3, 4], "column_nam": [2, 3, 4], "get_experiment_configur": 2, "random_ord": [2, 3, 4, 7, 12, 13, 20], "_execute_queri": 2, "tupl": [2, 3, 4, 9, 10, 13], "int": [2, 3, 4, 7, 9, 12, 13, 20], "static": [2, 3, 4, 7, 9], "random_order_str": [2, 3, 4], "_pull_open_experi": [2, 3, 4], "_write_to_databas": 2, "kei": [2, 7, 11, 16, 20], "valu": [2, 7, 9, 12, 20, 21], "_update_databas": 2, "where": [2, 7, 16, 20], "not_executed_yet": 2, "reset_experi": [2, 7, 11, 13, 20], "state": [2, 7, 11, 16, 20], "_pop_experiments_with_statu": 2, "statu": [2, 7, 9, 11, 13, 18, 20, 21], "_get_experiments_with_condit": 2, "condit": [2, 11, 14, 17, 19, 20], "_delete_experiments_with_condit": 2, "get_structure_from_t": [2, 3, 4], "delete_t": [2, 7, 11], "get_tabl": [2, 7, 12, 13, 20], "panda": [2, 7, 11, 12, 13, 18, 20, 21], "datafram": [2, 7, 11, 12, 13, 20, 21], "databaseconnectorlit": 3, "_write_to_database_separ": [3, 4], "arg": [3, 4], "databaseconnectormysql": 4, "experiment_configuration_file_path": [4, 7, 12, 13, 20], "configpars": [4, 7, 10], "_create_database_if_not_exist": 4, "credenti": [4, 7, 16, 17, 21], "_start_transact": 4, "readonli": 4, "fals": [4, 7, 12, 13, 20], "_get_tablename_for_queri": 4, "pyexperimentererror": 5, "common": [5, 20], "class": [5, 11], "all": [5, 6, 7, 11, 12, 13, 16, 19, 20, 21], "non": [5, 17], "exit": 5, "parametercombinationerror": [5, 7], "databaseerror": 5, "databasecreationerror": 5, "databaseconnectionerror": [5, 7], "databasequeryerror": 5, "emptyfilldatabasecallerror": 5, "tableerror": 5, "invalidresultfielderror": 5, "tablehaswrongstructureerror": 5, "noexperimentsleftexcept": 5, "configerror": 5, "noconfigfileerror": 5, "filenotfounderror": 5, "invalidconfigerror": [5, 7], "invalidvaluesinconfigur": [5, 7], "experimentstatu": [6, 11], "enum": [6, 11], "enumer": 6, "deriv": 6, "from": [6, 7, 9, 10, 12, 13, 17, 19, 20, 21], "defin": [6, 7, 11, 17, 21], "new": [6, 10, 16, 20], "run": [6, 7, 11, 12, 20, 21], "done": [6, 7, 12, 13, 16, 20, 21], "error": [6, 7, 11, 12, 13, 20, 21], "pyexperiment": [7, 11, 15, 16, 18, 21], "o": [7, 11, 12, 13, 20], "path": [7, 10, 12, 13, 16, 20], "join": [7, 12, 13, 20], "config": [7, 10, 12, 13, 20], "configur": [7, 10, 11, 17, 21], "cfg": [7, 12, 13, 20], "database_credenti": [7, 20], "table_nam": [7, 9, 20], "database_nam": [7, 20], "name": [7, 9, 10, 11, 12, 13, 16, 18, 20], "handl": [7, 11], "initi": [7, 10], "collect": [7, 17], "experi": [7, 9, 10, 11, 17, 18, 21], "respect": 7, "result": [7, 9, 11, 12, 17, 18, 21], "set_config_valu": 7, "section_nam": 7, "modifi": [7, 11, 19], "so": [7, 12, 16, 19, 20], "within": [7, 11, 17, 20], "given": [7, 11, 12, 13, 16, 20], "properti": [7, 17], "identifi": 7, "i": [7, 11, 12, 13, 16, 17, 18, 19, 20, 21], "overwritten": 7, "wa": [7, 11, 17], "exist": [7, 10, 16, 20], "beforehand": 7, "The": [7, 11, 12, 13, 16, 17, 18, 19, 20, 21], "section": [7, 20], "which": [7, 11, 12, 13, 16, 20, 21], "should": [7, 12, 13, 16, 20], "set": [7, 11, 12, 17, 20, 21], "whose": 7, "rais": [7, 12, 13], "If": [7, 10, 12, 13, 15, 16, 20], "either": [7, 16, 20], "miss": [7, 11], "ha": [7, 11, 12, 13, 15, 16, 20, 21], "invalid": 7, "inform": [7, 10, 16, 20, 21], "get_config_valu": 7, "return": [7, 10], "type": [7, 20], "nooptionerror": 7, "call": [7, 9, 11, 12, 13, 20], "part": [7, 11], "has_sect": 7, "check": [7, 11, 15, 16], "whether": [7, 19], "true": [7, 12, 13, 20], "otherwis": [7, 16, 19, 21], "has_opt": 7, "_is_valid_configur": 7, "_config": [7, 9], "valid": 7, "e": [7, 11, 12, 13, 16, 18, 20, 21], "necessari": [7, 21], "field": [7, 9, 10, 11, 17, 20], "databas": [7, 9, 10, 11, 12, 13, 16, 17, 18, 21], "mysql": [7, 16, 18, 20, 21], "sqlite": [7, 12, 13, 20], "case": [7, 12, 13, 16, 20, 21], "ar": [7, 11, 12, 13, 16, 17, 18, 20, 21], "avail": [7, 11, 16, 20], "option": [7, 11, 20], "file": [7, 10, 11, 16, 17, 19, 21], "host": [7, 20], "user": [7, 16, 20, 21], "password": [7, 20], "default": [7, 20], "fill_table_from_combin": [7, 12], "dict": [7, 9, 12, 13, 20], "add": [7, 11, 16], "row": [7, 11, 12, 13], "tabl": [7, 10, 11, 21], "first": [7, 11, 12, 13, 16], "doe": [7, 10], "been": [7, 11, 15, 16, 21], "afterward": [7, 12, 16], "fill": [7, 11], "To": [7, 12, 13, 16], "end": [7, 16, 20], "cartesian": [7, 12, 13, 20], "product": [7, 12, 13, 18, 20], "built": [7, 16], "each": [7, 11, 12, 20, 21], "make": [7, 13, 16, 20], "up": [7, 13, 17], "note": [7, 12, 13, 20], "onli": [7, 11, 12, 20], "ad": [7, 11, 13, 16, 20], "do": [7, 12, 13, 15, 16, 19, 20], "alreadi": 7, "For": [7, 12, 16, 20], "ani": [7, 12, 16, 19, 20, 21], "match": 7, "keyfield": [7, 11, 12, 13, 20], "In": [7, 11, 13, 16, 17, 20, 21], "follow": [7, 16, 18, 19, 20, 21], "exampl": [7, 12, 13, 15, 16, 17, 20], "method": [7, 9, 11, 12, 13, 16], "a2": 7, "2": [7, 12, 13, 17, 18, 20], "4": [7, 12, 17, 18, 20], "b": [7, 16], "c": [7, 19], "cat": 7, "dog": 7, "accord": [7, 11, 12, 13, 16, 20], "four": [7, 20], "predefin": 7, "dictionari": [7, 9], "possibl": 7, "fill_table_from_config": [7, 13, 20], "build": [7, 11, 16, 18], "fill_table_with_row": [7, 13, 20], "A": [7, 16, 19, 20, 21], "entri": [7, 12, 13, 20], "made": [7, 16], "pair": [7, 9], "valueerror": [7, 12, 13, 16], "experiment_funct": [7, 20], "callabl": 7, "resultprocessor": [7, 9, 12, 13, 20], "max_experi": [7, 11, 12, 13, 20], "pull": [7, 11, 17, 21], "open": [7, 11, 12, 13, 20, 21], "them": [7, 9, 12, 16], "mani": [7, 11, 20], "worker": [7, 11], "spawn": [7, 11], "start": [7, 16, 17, 20], "specifi": [7, 17, 20], "n_job": [7, 11, 20], "singl": [7, 11, 12, 13, 17, 20], "repeatedli": 7, "until": [7, 20], "maximum": [7, 20], "number": [7, 12, 13, 20], "have": [7, 11, 13, 15, 16, 20], "next": [7, 12, 13], "select": [7, 11, 16, 20], "its": [7, 11, 20], "consecut": 7, "id": [7, 12, 13, 20], "rather": 7, "chosen": 7, "randomli": 7, "With": 7, "after": [7, 12, 13, 16, 17, 21], "can": [7, 9, 11, 12, 13, 15, 16, 17, 18, 20, 21], "continu": [7, 15], "written": [7, 12, 13, 20], "dure": [7, 20, 21], "via": [7, 11, 12, 13, 16, 17, 18], "success": 7, "correspond": [7, 18, 20, 21], "occur": [7, 16, 20], "chang": [7, 11, 16], "log": [7, 16, 20, 21], "therefor": [7, 11, 13, 16, 20], "befor": [7, 16], "local": [7, 16], "appear": 7, "function": [7, 11, 16, 17, 21], "differ": [7, 17, 21], "parametr": 7, "indic": 7, "random": [7, 11, 12, 13, 20, 21], "fashion": [7, 20], "wrong": [7, 11], "data": [7, 12, 13, 20], "_execution_work": 7, "semaphor": 7, "multiprocess": 7, "reach": [7, 11], "limit": [7, 11, 12, 13, 17, 19], "_handle_error": 7, "_execution_wrapp": [7, 11], "one": [7, 10, 12, 13, 16, 17], "Then": [7, 16], "therebi": [7, 17, 18], "updat": [7, 11, 17], "when": [7, 11, 12, 13, 16, 20], "directli": [7, 16], "finish": 7, "successfulli": 7, "noexperimentslefterror": 7, "left": 7, "delet": [7, 20], "again": [7, 13, 16], "featur": [7, 16, 20, 21], "reset": [7, 11, 13, 21], "definit": [7, 20], "variabl": 7, "length": 7, "argument": 7, "multipl": [7, 11, 12, 13], "drop": 7, "pd": [7, 13], "result_logg": 9, "formatt": 9, "file_handl": 9, "credential_path": 9, "result_field": 9, "experiment_id": 9, "process": [9, 12, 13, 20, 21], "whenev": 9, "you": [9, 12, 13, 15, 16, 20], "want": [9, 13, 16], "write": [9, 11, 12, 13, 20, 21], "process_result": [9, 12, 13, 20], "param": [9, 10], "_add_timestamps_to_result": 9, "time": [9, 11, 12, 13, 16, 17], "datetim": 9, "object": 9, "_change_statu": 9, "_write_error": 9, "error_msg": 9, "_set_machin": 9, "machine_id": 9, "_set_nam": 9, "_valid_result_field": 9, "load_config": 10, "load": [10, 13], "timestamps_for_result_field": 10, "add_timestep_result_column": 10, "result_field_configur": 10, "extract_db_credentials_and_table_name_from_config": 10, "automat": [10, 11, 16, 18, 21], "mysql_connector": 10, "get_keyfield_data": 10, "_generate_int_data": 10, "keyfield_valu": 10, "get_keyfield_nam": 10, "get_keyfield": 10, "get_result_field_nam": 10, "get_resultfield": 10, "get_field": 10, "clean": 10, "combine_fill_table_paramet": 10, "improv": [11, 16], "workflow": [11, 17], "push": [11, 16], "websit": [11, 16], "separ": [11, 16, 20], "branch": [11, 16], "gh": 11, "api": [11, 17, 18], "access": [11, 12, 13, 20], "readm": [11, 18], "refer": [11, 16, 17], "convert": 11, "project": [11, 16, 17], "pyproject": [11, 16], "toml": [11, 16], "poetri": [11, 17, 18], "depend": [11, 12, 16, 18], "itself": [11, 16], "well": [11, 12, 17, 20], "develop": [11, 17, 18], "cpu": 11, "max": 11, "renam": 11, "now": 11, "onc": [11, 21], "advanc": 11, "complet": 11, "includ": [11, 16, 18, 19, 21], "same": [11, 12, 13, 16, 20], "transact": 11, "hold": 11, "py": [11, 16, 18], "abl": 11, "get": 11, "final": [11, 16, 20, 21], "paper": 11, "draft": 11, "due": [11, 12, 13, 16], "latest": [11, 16], "referenc": 11, "bugfix": 11, "order": [11, 20], "db": 11, "unfavor": 11, "see": [11, 16], "abov": [11, 13, 19, 20], "simpl": 11, "runner": 11, "github": [11, 15, 16, 18], "action": [11, 17, 19], "instal": [11, 12, 13, 16, 17], "packag": [11, 16, 18], "lock": [11, 16], "cach": 11, "virtual": 11, "environ": [11, 16], "prevent": 11, "everi": 11, "cut": 11, "down": 11, "ci": 11, "roundtrip": 11, "It": [11, 12, 13, 16, 17], "matrix": 11, "variou": 11, "python": [11, 16, 18], "version": [11, 16, 18], "7": [11, 18], "8": [11, 16, 18, 20], "9": [11, 16, 18], "ubuntu": 11, "maco": 11, "window": 11, "exclud": 11, "sinc": [11, 17], "some": [11, 13, 16, 20], "take": [11, 20], "veri": [11, 16], "long": 11, "restructur": 11, "shortcut": 11, "longer": 11, "integ": [11, 20], "timestep": 11, "resultfield": [11, 12, 13, 20], "give": [11, 16], "instanc": [11, 21], "support": [11, 12, 17], "parallel": [11, 12, 13, 17, 20], "hpc": [11, 12, 13, 17, 20], "cluster": [11, 20], "usag": [11, 12, 14, 17], "obtain": [11, 12, 13, 19], "current": [11, 20], "easili": [11, 12, 13, 18, 20, 21], "export": [11, 20, 21], "g": [11, 12, 13, 16, 18, 20], "latex": [11, 20, 21], "robust": 11, "creation": 11, "extend": [11, 17], "jupyt": 11, "notebook": [11, 12, 13], "explain": 11, "how": [11, 15, 17, 20], "grid": [11, 14, 17, 20, 21], "duplic": 11, "string": [11, 20], "quotat": [11, 20], "mark": [11, 20], "compon": 11, "No": 11, "summari": 11, "releas": 11, "show": [12, 13], "we": [12, 16], "programmat": 12, "vector": 12, "machin": [12, 16, 18, 21], "instead": [12, 20], "entir": 12, "need": [12, 13, 16, 17, 20], "pip": [12, 13, 16, 18], "scikit": [12, 13], "learn": [12, 13, 18], "further": [12, 13, 15, 16, 20, 21], "explan": [12, 13], "about": [12, 13, 16], "found": [12, 13, 16, 20, 21], "here": [12, 13, 20], "import": [12, 13, 16, 20], "content": [12, 13, 20], "svm_experiment_exampl": 12, "dataset": [12, 13, 20], "cross_validation_split": [12, 13, 20], "seed": [12, 13, 20, 21], "kernel": [12, 13, 20], "gamma": [12, 13], "decim": [12, 13, 20], "degre": 12, "coef0": 12, "train_f1": [12, 13, 20], "train_accuraci": [12, 13, 20], "test_f1": [12, 13, 20], "test_accuraci": [12, 13, 20], "timestamp": [12, 13, 20], "custom": [12, 13, 20], "sample_data": [12, 13, 20], "example_conditional_grid": 12, "w": [12, 13], "f": [12, 13], "dummi": [12, 13], "reason": [12, 13], "code": [12, 13, 16, 20, 21], "meant": [12, 13, 20], "core": [12, 13, 16, 17, 18, 20], "3": [12, 13, 16, 17, 18], "numpi": [12, 13, 16, 18], "np": [12, 13, 20], "sklearn": [12, 13], "load_iri": [12, 13], "model_select": [12, 13], "cross_valid": [12, 13], "pipelin": [12, 13, 20], "make_pipelin": [12, 13], "preprocess": [12, 13], "standardscal": [12, 13], "svm": [12, 13], "svc": [12, 13], "sleep": 12, "randint": 12, "def": [12, 13, 20], "run_svm": 12, "custom_config": [12, 13], "0": [12, 17, 18], "5": [12, 13, 17, 18, 20], "x": [12, 13], "y": [12, 13], "target": [12, 13], "linear": [12, 13, 20], "elif": 12, "poli": [12, 13, 20], "rbf": [12, 13, 20], "model": [12, 13], "iri": [12, 13, 20], "score": [12, 13, 20], "cv": [12, 13], "accuraci": [12, 13], "f1_micro": [12, 13], "return_train_scor": [12, 13], "mean": [12, 13, 17, 20], "train_f1_micro": [12, 13, 20], "test_f1_micro": [12, 13, 20], "actual": [12, 13, 16, 20], "step": [12, 13, 16, 20, 21], "previous": [12, 13], "addition": [12, 13, 16, 20, 21], "job": [12, 13, 20], "especi": [12, 13, 20], "svm_experimenter_01": 12, "fix": [12, 20], "three": 12, "line": [12, 20], "present": 12, "nan": 12, "thu": 12, "uncondition": 12, "other": [12, 13, 16, 19], "just": [12, 13], "predifin": [12, 13], "replac": [12, 13, 16], "amount": [12, 13], "avoid": [12, 13], "collus": [12, 13], "relat": [12, 13, 15], "over": [13, 21], "extract": [13, 20, 21], "automl_conf_2023": 13, "best_paper_t": 13, "6": [13, 17, 20], "sigmoid": [13, 20], "longtext": [13, 20], "example_general_usag": 13, "run_ml": 13, "read_csv": 13, "example_notebook": 13, "new_data": [13, 20], "42": [13, 20], "As": [13, 20], "those": [13, 17, 21], "were": 13, "anoth": [13, 16], "try": [13, 16], "describ": [13, 16, 20], "thei": 13, "aggreg": [13, 17], "result_table_agg": 13, "groupbi": [13, 20], "": 13, "to_latex": [13, 20], "index_nam": [13, 20], "question": 15, "problem": [15, 16], "don": 15, "t": 15, "know": 15, "mayb": 15, "find": 15, "suitabl": [15, 16], "solut": 15, "issu": [15, 17], "someon": [15, 16], "els": [15, 16], "similar": [15, 16], "situat": 15, "could": [15, 16], "anyth": 15, "pleas": [15, 16, 20], "would": 16, "appreci": 16, "idea": 16, "bug": 16, "sure": [16, 20], "had": 16, "feedback": 16, "plan": 16, "work": [16, 17, 20], "yourself": 16, "like": 16, "great": 16, "comment": 16, "what": 16, "exactli": 16, "At": 16, "also": [16, 20], "correctli": 16, "your": 16, "mention": 16, "review": 16, "third": 16, "person": [16, 19], "understand": 16, "vision": 16, "go": 16, "summar": [16, 20], "titl": 16, "neccessari": 16, "report": [16, 17], "descript": [16, 18], "reproduc": 16, "produc": 16, "assumpt": [16, 21], "think": 16, "And": 16, "label": 16, "detail": 16, "usabl": 16, "enhanc": 16, "help": [16, 17], "face": 16, "provic": 16, "fork": 16, "git": 16, "blog": 16, "post": 16, "repositori": [16, 17, 18], "click": 16, "button": 16, "top": 16, "right": [16, 19], "corner": 16, "clone": 16, "On": [16, 17], "folder": [16, 20], "command": 16, "ensur": 16, "usernam": 16, "http": [16, 18], "com": [16, 18], "remot": 16, "origin": 16, "addit": [16, 17, 20, 21], "upstream": 16, "switch": 16, "feature_branch_nam": 16, "meaning": 16, "fetch": 16, "v": 16, "checkout": 16, "anaconda": 16, "conda": 16, "n": 16, "env": 16, "activ": 16, "pandoc": 16, "articl": 16, "suggest": 16, "navig": 16, "pytest": [16, 18], "succeed": 16, "manual": [16, 17, 20, 21], "upgrad": 16, "manag": [16, 17, 20], "tool": [16, 17, 18], "allow": [16, 17, 20], "declar": 16, "upload": 16, "instruct": 16, "than": 16, "ones": 16, "below": [16, 20, 21], "NOT": [16, 19], "out": [16, 19], "specif": 16, "second": 16, "package_nam": 16, "dev": [16, 18], "group": [16, 18], "dist": 16, "good": 16, "mandatori": 16, "locat": [16, 20], "structur": [16, 21], "affect": 16, "succe": 16, "without": [16, 19, 20], "adapt": 16, "But": 16, "test_run_experi": 16, "test_run_mysql_experi": 16, "doc": 16, "shinx": 16, "output": 16, "html": 16, "sourc": 16, "correct": 16, "destin": 16, "full": 16, "did": 16, "begin": 16, "facilit": 17, "setup": [17, 21], "subsequ": 17, "evalu": 17, "empir": 17, "studi": 17, "algorithm": 17, "particular": [17, 19], "design": [17, 21], "reduc": 17, "involv": 17, "effort": 17, "significantli": 17, "intend": [17, 18], "research": [17, 18], "artifici": [17, 18], "intellig": [17, 18], "analysi": 17, "often": 17, "accompani": 17, "input": [17, 21], "variant": 17, "measur": 17, "individu": 17, "usual": [17, 20], "independ": 17, "perform": 17, "distribut": [17, 19, 21], "manner": [17, 18], "system": [17, 18, 21], "howev": 17, "requir": [17, 18], "extens": 17, "read": 17, "monitor": 17, "restart": [17, 21], "tediou": [17, 20], "consum": 17, "These": 17, "challeng": 17, "address": 17, "central": 17, "massiv": 17, "allevi": 17, "aforement": 17, "overhead": 17, "eas": 17, "easiest": 17, "dive": 17, "our": 17, "contribut": 17, "unit": 17, "test": 17, "request": 17, "author": [17, 18, 19], "team": 17, "licens": [17, 18], "changelog": 17, "v1": 17, "21": 17, "11": [17, 18], "2022": [17, 19], "04": 17, "09": 17, "v0": 17, "01": 17, "03": 17, "17": 17, "02": 17, "2021": [17, 19], "20": 17, "10": [17, 20], "14": 17, "partial": 17, "german": 17, "feder": 17, "ministri": 17, "econom": 17, "affair": 17, "climat": 17, "fleme": 17, "03e16012f": 17, "foundat": 17, "dfg": 17, "collabor": 17, "center": 17, "fly": 17, "comput": [17, 21], "sfb": 17, "901": 17, "160364472": 17, "pypi": 18, "ml": 18, "captur": 18, "unifi": 18, "upb": 18, "de": 18, "fehring2": 18, "mail": 18, "uni": 18, "paderborn": 18, "ifi": 18, "lmu": 18, "unisabana": 18, "edu": 18, "co": 18, "mit": [18, 19], "md": 18, "io": 18, "keyword": 18, "executor": 18, "classifi": 18, "stabl": 18, "audienc": 18, "scienc": 18, "topic": 18, "scientif": 18, "engin": 18, "program": 18, "languag": 18, "15": 18, "connector": 18, "jupyterlab": 18, "mock": 18, "nbsphinx": 18, "galleri": 18, "rtd": 18, "theme": 18, "recommonmark": 18, "backend": [18, 20], "masonri": 18, "copyright": 19, "permiss": 19, "herebi": 19, "grant": 19, "free": 19, "charg": 19, "copi": 19, "softwar": 19, "associ": 19, "deal": 19, "restrict": 19, "merg": 19, "publish": 19, "sublicens": 19, "sell": 19, "permit": 19, "whom": 19, "furnish": 19, "subject": 19, "notic": 19, "shall": 19, "substanti": 19, "portion": 19, "THE": 19, "AS": 19, "warranti": 19, "OF": 19, "kind": 19, "express": 19, "OR": 19, "impli": 19, "BUT": 19, "TO": 19, "merchant": 19, "fit": 19, "FOR": 19, "purpos": 19, "AND": 19, "noninfring": 19, "IN": 19, "NO": 19, "event": 19, "holder": 19, "BE": 19, "liabl": 19, "claim": 19, "damag": 19, "liabil": 19, "contract": 19, "tort": 19, "aris": [19, 21], "WITH": 19, "primarili": 20, "attach": 20, "domain": [20, 21], "store": 20, "boolean": 20, "both": 20, "annot": 20, "explicitli": 20, "varchar": 20, "255": 20, "comma": 20, "neither": 20, "nor": 20, "whitespac": 20, "task": 20, "togeth": 20, "size": 20, "form": 20, "stepsiz": 20, "explicit": 20, "under": 20, "ignor": 20, "By": 20, "run_experi": 20, "custom_field": 20, "stuff": 20, "intermedi": 20, "more": 20, "few": 20, "elabor": 20, "assum": 20, "altern": 20, "complex": 20, "approach": 20, "new_data_2": 20, "24": 20, "funtion": 20, "determin": 20, "sequenti": 20, "turn": 20, "readi": 20, "termin": 20, "interrupt": 20, "result_t": 20, "print": 20, "schema": 21, "figur": 21, "uniqu": 21, "certain": 21, "through": 21, "back": 21, "fail": 21, "desir": 21, "subset": 21, "jointli": 21, "averag": 21, "view": 21}, "objects": {"": [[8, 0, 0, "-", "py_experimenter"]], "py_experimenter": [[2, 0, 0, "-", "database_connector"], [3, 0, 0, "-", "database_connector_lite"], [4, 0, 0, "-", "database_connector_mysql"], [5, 0, 0, "-", "exceptions"], [6, 0, 0, "-", "experiment_status"], [7, 0, 0, "-", "experimenter"], [9, 0, 0, "-", "result_processor"], [10, 0, 0, "-", "utils"]], "py_experimenter.database_connector": [[2, 1, 1, "", "DatabaseConnector"]], "py_experimenter.database_connector.DatabaseConnector": [[2, 2, 1, "", "_check_combination_in_existing_rows"], [2, 2, 1, "", "_create_table"], [2, 2, 1, "", "_delete_experiments_with_condition"], [2, 2, 1, "", "_exclude_fixed_columns"], [2, 2, 1, "", "_execute_queries"], [2, 2, 1, "", "_extract_credentials"], [2, 2, 1, "", "_get_existing_rows"], [2, 2, 1, "", "_get_experiments_with_condition"], [2, 2, 1, "", "_pop_experiments_with_status"], [2, 2, 1, "", "_pull_open_experiment"], [2, 2, 1, "", "_table_exists"], [2, 2, 1, "", "_table_has_correct_structure"], [2, 2, 1, "", "_test_connection"], [2, 2, 1, "", "_update_database"], [2, 2, 1, "", "_write_to_database"], [2, 2, 1, "", "close_connection"], [2, 2, 1, "", "commit"], [2, 2, 1, "", "connect"], [2, 2, 1, "", "create_table_if_not_existing"], [2, 2, 1, "", "cursor"], [2, 2, 1, "", "delete_table"], [2, 2, 1, "", "escape_sql_chars"], [2, 2, 1, "", "execute"], [2, 2, 1, "", "fetchall"], [2, 2, 1, "", "fill_table"], [2, 2, 1, "", "get_experiment_configuration"], [2, 2, 1, "", "get_structure_from_table"], [2, 2, 1, "", "get_table"], [2, 2, 1, "", "not_executed_yet"], [2, 2, 1, "", "random_order_string"], [2, 2, 1, "", "reset_experiments"]], "py_experimenter.database_connector_lite": [[3, 1, 1, "", "DatabaseConnectorLITE"]], "py_experimenter.database_connector_lite.DatabaseConnectorLITE": [[3, 2, 1, "", "_create_table"], [3, 2, 1, "", "_extract_credentials"], [3, 2, 1, "", "_get_existing_rows"], [3, 2, 1, "", "_pull_open_experiment"], [3, 2, 1, "", "_table_exists"], [3, 2, 1, "", "_table_has_correct_structure"], [3, 2, 1, "", "_test_connection"], [3, 3, 1, "", "_write_to_database_separator"], [3, 2, 1, "", "connect"], [3, 2, 1, "", "escape_sql_chars"], [3, 2, 1, "", "get_structure_from_table"], [3, 2, 1, "", "random_order_string"]], "py_experimenter.database_connector_mysql": [[4, 1, 1, "", "DatabaseConnectorMYSQL"]], "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL": [[4, 2, 1, "", "_create_database_if_not_existing"], [4, 2, 1, "", "_create_table"], [4, 2, 1, "", "_extract_credentials"], [4, 2, 1, "", "_get_existing_rows"], [4, 2, 1, "", "_get_tablename_for_query"], [4, 2, 1, "", "_pull_open_experiment"], [4, 2, 1, "", "_start_transaction"], [4, 2, 1, "", "_table_exists"], [4, 2, 1, "", "_table_has_correct_structure"], [4, 2, 1, "", "_test_connection"], [4, 3, 1, "", "_write_to_database_separator"], [4, 2, 1, "", "connect"], [4, 2, 1, "", "escape_sql_chars"], [4, 2, 1, "", "get_structure_from_table"], [4, 2, 1, "", "random_order_string"]], "py_experimenter.exceptions": [[5, 4, 1, "", "ConfigError"], [5, 4, 1, "", "DatabaseConnectionError"], [5, 4, 1, "", "DatabaseCreationError"], [5, 4, 1, "", "DatabaseError"], [5, 4, 1, "", "DatabaseQueryError"], [5, 4, 1, "", "EmptyFillDatabaseCallError"], [5, 4, 1, "", "InvalidConfigError"], [5, 4, 1, "", "InvalidResultFieldError"], [5, 4, 1, "", "InvalidValuesInConfiguration"], [5, 4, 1, "", "NoConfigFileError"], [5, 4, 1, "", "NoExperimentsLeftException"], [5, 4, 1, "", "ParameterCombinationError"], [5, 4, 1, "", "PyExperimenterError"], [5, 4, 1, "", "TableError"], [5, 4, 1, "", "TableHasWrongStructureError"]], "py_experimenter.experiment_status": [[6, 1, 1, "", "ExperimentStatus"]], "py_experimenter.experiment_status.ExperimentStatus": [[6, 3, 1, "", "ALL"], [6, 3, 1, "", "CREATED"], [6, 3, 1, "", "DONE"], [6, 3, 1, "", "ERROR"], [6, 3, 1, "", "RUNNING"]], "py_experimenter.experimenter": [[7, 1, 1, "", "PyExperimenter"]], "py_experimenter.experimenter.PyExperimenter": [[7, 2, 1, "", "_execution_worker"], [7, 2, 1, "", "_execution_wrapper"], [7, 2, 1, "", "_handle_error"], [7, 2, 1, "", "_is_valid_configuration"], [7, 2, 1, "", "delete_table"], [7, 2, 1, "", "execute"], [7, 2, 1, "", "fill_table_from_combination"], [7, 2, 1, "", "fill_table_from_config"], [7, 2, 1, "", "fill_table_with_rows"], [7, 2, 1, "", "get_config_value"], [7, 2, 1, "", "get_table"], [7, 2, 1, "", "has_option"], [7, 2, 1, "", "has_section"], [7, 2, 1, "", "reset_experiments"], [7, 2, 1, "", "set_config_value"]], "py_experimenter.result_processor": [[9, 1, 1, "", "ResultProcessor"], [9, 5, 1, "", "file_handler"], [9, 5, 1, "", "formatter"], [9, 5, 1, "", "result_logger"]], "py_experimenter.result_processor.ResultProcessor": [[9, 2, 1, "", "_add_timestamps_to_results"], [9, 2, 1, "", "_change_status"], [9, 2, 1, "", "_set_machine"], [9, 2, 1, "", "_set_name"], [9, 2, 1, "", "_valid_result_fields"], [9, 2, 1, "", "_write_error"], [9, 2, 1, "", "process_results"]], "py_experimenter.utils": [[10, 6, 1, "", "_generate_int_data"], [10, 6, 1, "", "add_timestep_result_columns"], [10, 6, 1, "", "combine_fill_table_parameters"], [10, 6, 1, "", "extract_db_credentials_and_table_name_from_config"], [10, 6, 1, "", "get_fields"], [10, 6, 1, "", "get_keyfield_data"], [10, 6, 1, "", "get_keyfield_names"], [10, 6, 1, "", "get_keyfields"], [10, 6, 1, "", "get_result_field_names"], [10, 6, 1, "", "get_resultfields"], [10, 6, 1, "", "load_config"], [10, 6, 1, "", "timestamps_for_result_fields"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:exception", "5": "py:data", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "exception", "Python exception"], "5": ["py", "data", "Python data"], "6": ["py", "function", "Python function"]}, "titleterms": {"author": 0, "core": 0, "develop": [0, 16], "team": 0, "contribut": [0, 16], "api": 1, "refer": 1, "py_experiment": [2, 3, 4, 5, 6, 7, 8, 9, 10], "database_connector": 2, "modul": [2, 3, 4, 5, 6, 7, 9, 10], "content": [2, 3, 4, 5, 6, 7, 9, 10], "class": [2, 3, 4, 6, 7, 9], "database_connector_lit": 3, "database_connector_mysql": 4, "except": 5, "experiment_statu": 6, "experiment": 7, "submodul": 8, "result_processor": 9, "attribut": 9, "util": 10, "function": [10, 12, 13, 20], "changelog": 11, "v1": 11, "1": 11, "0": 11, "21": 11, "11": 11, "2022": 11, "featur": 11, "exampl": [11, 14], "fix": 11, "test": [11, 16], "04": 11, "09": 11, "v0": 11, "6": 11, "01": 11, "03": 11, "5": 11, "17": 11, "4": 11, "02": 11, "2021": 11, "3": 11, "20": 11, "10": 11, "2": 11, "14": 11, "condit": 12, "paramet": 12, "grid": 12, "experi": [12, 13, 20], "configur": [12, 13, 20], "file": [12, 13, 20], "defin": [12, 13, 20], "execut": [12, 13, 20], "pyexperiment": [12, 13, 17, 20], "initi": [12, 13], "fill": [12, 13, 20], "tabl": [12, 13, 20], "gener": [13, 21], "usag": [13, 20], "restart": 13, "fail": 13, "result": [13, 20], "print": 13, "latex": 13, "need": 15, "help": 15, "how": 16, "creat": [16, 20], "an": 16, "issu": 16, "setup": 16, "workflow": [16, 21], "us": 16, "poetri": 16, "extend": 16, "unit": 16, "updat": 16, "document": [16, 17], "pull": 16, "request": 16, "welcom": 17, "": 17, "about": 17, "acknowledg": 17, "instal": 18, "licens": 19, "databas": 20, "credenti": 20, "base": 20, "specif": 20, "row": 20, "reset": 20, "obtain": 20}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Authors": [[0, "authors"]], "Core Development Team": [[0, "core-development-team"]], "Contributions": [[0, "contributions"]], "API Reference": [[1, "api-reference"]], "py_experimenter.database_connector": [[2, "module-py_experimenter.database_connector"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [9, "module-contents"], [10, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [9, "classes"]], "py_experimenter.database_connector_lite": [[3, "module-py_experimenter.database_connector_lite"]], "py_experimenter.database_connector_mysql": [[4, "module-py_experimenter.database_connector_mysql"]], "py_experimenter.exceptions": [[5, "module-py_experimenter.exceptions"]], "py_experimenter.experiment_status": [[6, "module-py_experimenter.experiment_status"]], "py_experimenter.experimenter": [[7, "module-py_experimenter.experimenter"]], "py_experimenter": [[8, "module-py_experimenter"]], "Submodules": [[8, "submodules"]], "py_experimenter.result_processor": [[9, "module-py_experimenter.result_processor"]], "Attributes": [[9, "attributes"]], "py_experimenter.utils": [[10, "module-py_experimenter.utils"]], "Functions": [[10, "functions"]], "Changelog": [[11, "changelog"]], "v1.1.0 (21/11/2022)": [[11, "v1-1-0-21-11-2022"]], "Feature": [[11, "feature"], [11, "id1"]], "Examples": [[11, "examples"], [11, "id2"], [14, "examples"]], "Fix": [[11, "fix"], [11, "id3"]], "Tests": [[11, "tests"], [11, "id4"]], "v1.0.0 (04/09/2022)": [[11, "v1-0-0-04-09-2022"]], "v0.0.6 (01/03/2022)": [[11, "v0-0-6-01-03-2022"]], "v0.0.5 (17/01/2022)": [[11, "v0-0-5-17-01-2022"]], "v0.0.4 (02/11/2021)": [[11, "v0-0-4-02-11-2021"]], "v0.0.3 (20/10/2021)": [[11, "v0-0-3-20-10-2021"]], "v0.0.2 (20/10/2021)": [[11, "v0-0-2-20-10-2021"]], "v0.0.1 (14/10/2021)": [[11, "v0-0-1-14-10-2021"]], "Conditional Parameter Grids": [[12, "Conditional-Parameter-Grids"]], "Experiment Configuration File": [[12, "Experiment-Configuration-File"], [13, "Experiment-Configuration-File"], [20, "experiment-configuration-file"]], "Defining the execution function": [[12, "Defining-the-execution-function"], [13, "Defining-the-execution-function"]], "Executing PyExperimenter": [[12, "Executing-PyExperimenter"], [13, "Executing-PyExperimenter"]], "Initialize PyExperimenter": [[12, "Initialize-PyExperimenter"], [13, "Initialize-PyExperimenter"]], "Fill Table": [[12, "Fill-Table"], [13, "Fill-Table"]], "Execute PyExperimenter": [[12, "Execute-PyExperimenter"], [13, "Execute-PyExperimenter"]], "General Usage": [[13, "General-Usage"]], "Restart Failed Experiments": [[13, "Restart-Failed-Experiments"]], "Generating Result Table": [[13, "Generating-Result-Table"]], "Printing LaTex Table": [[13, "Printing-LaTex-Table"]], "Need Help?": [[15, "need-help"]], "How to Contribute": [[16, "how-to-contribute"]], "Creating an Issue": [[16, "creating-an-issue"]], "Setup Development Workflow": [[16, "setup-development-workflow"]], "How to use Poetry": [[16, "how-to-use-poetry"]], "Extend Unit Tests": [[16, "extend-unit-tests"]], "Update Documentation": [[16, "update-documentation"]], "Create Pull Request": [[16, "create-pull-request"]], "Welcome to PyExperimenter\u2019s documentation!": [[17, "welcome-to-pyexperimenter-s-documentation"]], "Documentation": [[17, null]], "About PyExperimenter": [[17, null]], "Acknowledgements": [[17, "acknowledgements"]], "Installation": [[18, "installation"]], "License": [[19, "license"]], "Usage": [[20, "usage"]], "Database Credential File": [[20, "database-credential-file"]], "Defining the Experiment Function": [[20, "defining-the-experiment-function"]], "Executing the PyExperimenter": [[20, "executing-the-pyexperimenter"]], "Creating a PyExperimenter": [[20, "creating-a-pyexperimenter"]], "Fill Database Table Based on the Configuration File": [[20, "fill-database-table-based-on-the-configuration-file"]], "Fill Table with Specific Rows": [[20, "fill-table-with-specific-rows"]], "Execute Experiments": [[20, "execute-experiments"]], "Reset Experiments": [[20, "reset-experiments"]], "Obtain Results": [[20, "obtain-results"]], "General Workflow": [[21, "general-workflow"]]}, "indexentries": {"databaseconnector (class in py_experimenter.database_connector)": [[2, "py_experimenter.database_connector.DatabaseConnector"]], "_check_combination_in_existing_rows() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._check_combination_in_existing_rows"]], "_create_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._create_table"]], "_delete_experiments_with_condition() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._delete_experiments_with_condition"]], "_exclude_fixed_columns() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._exclude_fixed_columns"]], "_execute_queries() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._execute_queries"]], "_extract_credentials() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._extract_credentials"]], "_get_existing_rows() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._get_existing_rows"]], "_get_experiments_with_condition() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._get_experiments_with_condition"]], "_pop_experiments_with_status() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._pop_experiments_with_status"]], "_pull_open_experiment() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._pull_open_experiment"]], "_table_exists() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._table_exists"]], "_table_has_correct_structure() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._table_has_correct_structure"]], "_test_connection() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._test_connection"]], "_update_database() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._update_database"]], "_write_to_database() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._write_to_database"]], "close_connection() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.close_connection"]], "commit() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.commit"]], "connect() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.connect"]], "create_table_if_not_existing() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.create_table_if_not_existing"]], "cursor() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.cursor"]], "delete_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.delete_table"]], "escape_sql_chars() (py_experimenter.database_connector.databaseconnector class method)": [[2, "py_experimenter.database_connector.DatabaseConnector.escape_sql_chars"]], "execute() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.execute"]], "fetchall() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.fetchall"]], "fill_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.fill_table"]], "get_experiment_configuration() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.get_experiment_configuration"]], "get_structure_from_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.get_structure_from_table"]], "get_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.get_table"]], "module": [[2, "module-py_experimenter.database_connector"], [3, "module-py_experimenter.database_connector_lite"], [4, "module-py_experimenter.database_connector_mysql"], [5, "module-py_experimenter.exceptions"], [6, "module-py_experimenter.experiment_status"], [7, "module-py_experimenter.experimenter"], [8, "module-py_experimenter"], [9, "module-py_experimenter.result_processor"], [10, "module-py_experimenter.utils"]], "not_executed_yet() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.not_executed_yet"]], "py_experimenter.database_connector": [[2, "module-py_experimenter.database_connector"]], "random_order_string() (py_experimenter.database_connector.databaseconnector static method)": [[2, "py_experimenter.database_connector.DatabaseConnector.random_order_string"]], "reset_experiments() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.reset_experiments"]], "databaseconnectorlite (class in py_experimenter.database_connector_lite)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE"]], "_create_table() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._create_table"]], "_extract_credentials() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._extract_credentials"]], "_get_existing_rows() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._get_existing_rows"]], "_pull_open_experiment() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._pull_open_experiment"]], "_table_exists() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._table_exists"]], "_table_has_correct_structure() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._table_has_correct_structure"]], "_test_connection() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._test_connection"]], "_write_to_database_separator (py_experimenter.database_connector_lite.databaseconnectorlite attribute)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._write_to_database_separator"]], "connect() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.connect"]], "escape_sql_chars() (py_experimenter.database_connector_lite.databaseconnectorlite static method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.escape_sql_chars"]], "get_structure_from_table() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.get_structure_from_table"]], "py_experimenter.database_connector_lite": [[3, "module-py_experimenter.database_connector_lite"]], "random_order_string() (py_experimenter.database_connector_lite.databaseconnectorlite static method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.random_order_string"]], "databaseconnectormysql (class in py_experimenter.database_connector_mysql)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL"]], "_create_database_if_not_existing() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._create_database_if_not_existing"]], "_create_table() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._create_table"]], "_extract_credentials() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._extract_credentials"]], "_get_existing_rows() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._get_existing_rows"]], "_get_tablename_for_query() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._get_tablename_for_query"]], "_pull_open_experiment() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._pull_open_experiment"]], "_start_transaction() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._start_transaction"]], "_table_exists() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._table_exists"]], "_table_has_correct_structure() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._table_has_correct_structure"]], "_test_connection() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._test_connection"]], "_write_to_database_separator (py_experimenter.database_connector_mysql.databaseconnectormysql attribute)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._write_to_database_separator"]], "connect() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.connect"]], "escape_sql_chars() (py_experimenter.database_connector_mysql.databaseconnectormysql static method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.escape_sql_chars"]], "get_structure_from_table() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.get_structure_from_table"]], "py_experimenter.database_connector_mysql": [[4, "module-py_experimenter.database_connector_mysql"]], "random_order_string() (py_experimenter.database_connector_mysql.databaseconnectormysql static method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.random_order_string"]], "configerror": [[5, "py_experimenter.exceptions.ConfigError"]], "databaseconnectionerror": [[5, "py_experimenter.exceptions.DatabaseConnectionError"]], "databasecreationerror": [[5, "py_experimenter.exceptions.DatabaseCreationError"]], "databaseerror": [[5, "py_experimenter.exceptions.DatabaseError"]], "databasequeryerror": [[5, "py_experimenter.exceptions.DatabaseQueryError"]], "emptyfilldatabasecallerror": [[5, "py_experimenter.exceptions.EmptyFillDatabaseCallError"]], "invalidconfigerror": [[5, "py_experimenter.exceptions.InvalidConfigError"]], "invalidresultfielderror": [[5, "py_experimenter.exceptions.InvalidResultFieldError"]], "invalidvaluesinconfiguration": [[5, "py_experimenter.exceptions.InvalidValuesInConfiguration"]], "noconfigfileerror": [[5, "py_experimenter.exceptions.NoConfigFileError"]], "noexperimentsleftexception": [[5, "py_experimenter.exceptions.NoExperimentsLeftException"]], "parametercombinationerror": [[5, "py_experimenter.exceptions.ParameterCombinationError"]], "pyexperimentererror": [[5, "py_experimenter.exceptions.PyExperimenterError"]], "tableerror": [[5, "py_experimenter.exceptions.TableError"]], "tablehaswrongstructureerror": [[5, "py_experimenter.exceptions.TableHasWrongStructureError"]], "py_experimenter.exceptions": [[5, "module-py_experimenter.exceptions"]], "all (py_experimenter.experiment_status.experimentstatus attribute)": [[6, "py_experimenter.experiment_status.ExperimentStatus.ALL"]], "created (py_experimenter.experiment_status.experimentstatus attribute)": [[6, "py_experimenter.experiment_status.ExperimentStatus.CREATED"]], "done (py_experimenter.experiment_status.experimentstatus attribute)": [[6, "py_experimenter.experiment_status.ExperimentStatus.DONE"]], "error (py_experimenter.experiment_status.experimentstatus attribute)": [[6, "py_experimenter.experiment_status.ExperimentStatus.ERROR"]], "experimentstatus (class in py_experimenter.experiment_status)": [[6, "py_experimenter.experiment_status.ExperimentStatus"]], "running (py_experimenter.experiment_status.experimentstatus attribute)": [[6, "py_experimenter.experiment_status.ExperimentStatus.RUNNING"]], "py_experimenter.experiment_status": [[6, "module-py_experimenter.experiment_status"]], "pyexperimenter (class in py_experimenter.experimenter)": [[7, "py_experimenter.experimenter.PyExperimenter"]], "_execution_worker() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter._execution_worker"]], "_execution_wrapper() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter._execution_wrapper"]], "_handle_error() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter._handle_error"]], "_is_valid_configuration() (py_experimenter.experimenter.pyexperimenter static method)": [[7, "py_experimenter.experimenter.PyExperimenter._is_valid_configuration"]], "delete_table() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.delete_table"]], "execute() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.execute"]], "fill_table_from_combination() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.fill_table_from_combination"]], "fill_table_from_config() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.fill_table_from_config"]], "fill_table_with_rows() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.fill_table_with_rows"]], "get_config_value() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.get_config_value"]], "get_table() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.get_table"]], "has_option() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.has_option"]], "has_section() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.has_section"]], "py_experimenter.experimenter": [[7, "module-py_experimenter.experimenter"]], "reset_experiments() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.reset_experiments"]], "set_config_value() (py_experimenter.experimenter.pyexperimenter method)": [[7, "py_experimenter.experimenter.PyExperimenter.set_config_value"]], "py_experimenter": [[8, "module-py_experimenter"]], "resultprocessor (class in py_experimenter.result_processor)": [[9, "py_experimenter.result_processor.ResultProcessor"]], "_add_timestamps_to_results() (py_experimenter.result_processor.resultprocessor static method)": [[9, "py_experimenter.result_processor.ResultProcessor._add_timestamps_to_results"]], "_change_status() (py_experimenter.result_processor.resultprocessor method)": [[9, "py_experimenter.result_processor.ResultProcessor._change_status"]], "_set_machine() (py_experimenter.result_processor.resultprocessor method)": [[9, "py_experimenter.result_processor.ResultProcessor._set_machine"]], "_set_name() (py_experimenter.result_processor.resultprocessor method)": [[9, "py_experimenter.result_processor.ResultProcessor._set_name"]], "_valid_result_fields() (py_experimenter.result_processor.resultprocessor method)": [[9, "py_experimenter.result_processor.ResultProcessor._valid_result_fields"]], "_write_error() (py_experimenter.result_processor.resultprocessor method)": [[9, "py_experimenter.result_processor.ResultProcessor._write_error"]], "file_handler (in module py_experimenter.result_processor)": [[9, "py_experimenter.result_processor.file_handler"]], "formatter (in module py_experimenter.result_processor)": [[9, "py_experimenter.result_processor.formatter"]], "process_results() (py_experimenter.result_processor.resultprocessor method)": [[9, "py_experimenter.result_processor.ResultProcessor.process_results"]], "py_experimenter.result_processor": [[9, "module-py_experimenter.result_processor"]], "result_logger (in module py_experimenter.result_processor)": [[9, "py_experimenter.result_processor.result_logger"]], "_generate_int_data() (in module py_experimenter.utils)": [[10, "py_experimenter.utils._generate_int_data"]], "add_timestep_result_columns() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.add_timestep_result_columns"]], "combine_fill_table_parameters() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.combine_fill_table_parameters"]], "extract_db_credentials_and_table_name_from_config() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.extract_db_credentials_and_table_name_from_config"]], "get_fields() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.get_fields"]], "get_keyfield_data() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.get_keyfield_data"]], "get_keyfield_names() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.get_keyfield_names"]], "get_keyfields() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.get_keyfields"]], "get_result_field_names() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.get_result_field_names"]], "get_resultfields() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.get_resultfields"]], "load_config() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.load_config"]], "py_experimenter.utils": [[10, "module-py_experimenter.utils"]], "timestamps_for_result_fields() (in module py_experimenter.utils)": [[10, "py_experimenter.utils.timestamps_for_result_fields"]]}})