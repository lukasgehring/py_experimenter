Search.setIndex({"docnames": ["authors", "autoapi/index", "autoapi/py_experimenter/database_connector/index", "autoapi/py_experimenter/database_connector_lite/index", "autoapi/py_experimenter/database_connector_mysql/index", "autoapi/py_experimenter/experimenter/index", "autoapi/py_experimenter/index", "autoapi/py_experimenter/py_experimenter_exceptions/index", "autoapi/py_experimenter/result_processor/index", "autoapi/py_experimenter/utils/index", "changelog", "examples/example_conditional_grid", "examples/example_general_usage", "examples/index", "help", "how-to-contribute", "index", "installation", "license", "usage", "workflow"], "filenames": ["authors.rst", "autoapi/index.rst", "autoapi/py_experimenter/database_connector/index.rst", "autoapi/py_experimenter/database_connector_lite/index.rst", "autoapi/py_experimenter/database_connector_mysql/index.rst", "autoapi/py_experimenter/experimenter/index.rst", "autoapi/py_experimenter/index.rst", "autoapi/py_experimenter/py_experimenter_exceptions/index.rst", "autoapi/py_experimenter/result_processor/index.rst", "autoapi/py_experimenter/utils/index.rst", "changelog.rst", "examples/example_conditional_grid.ipynb", "examples/example_general_usage.ipynb", "examples/index.rst", "help.rst", "how-to-contribute.rst", "index.rst", "installation.rst", "license.rst", "usage.md", "workflow.md"], "titles": ["Authors", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.database_connector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.database_connector_lite</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.database_connector_mysql</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.experimenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.py_experimenter_exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.result_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_experimenter.utils</span></code>", "Changelog", "Conditional Parameter Grids", "General Usage", "Examples", "Need Help?", "How to Contribute", "Welcome to PyExperimenter\u2019s documentation!", "Installation", "License", "Usage", "General Workflow"], "terms": {"tanja": [0, 17, 18], "torned": [0, 12, 15, 17, 18], "alexand": [0, 17, 18], "luka": [0, 17, 18], "fehr": [0, 17, 18], "helena": [0, 17, 18], "graf": [0, 17, 18], "jona": [0, 17, 18], "hansel": [0, 17, 18], "felix": [0, 17, 18], "mohr": [0, 17, 18], "marcel": [0, 17, 18], "wever": [0, 17, 18], "gehr": [0, 17, 18], "thi": [1, 5, 8, 11, 12, 15, 16, 18, 19], "page": [1, 16], "contain": [1, 5, 10, 11, 12, 15, 19], "auto": [1, 12], "gener": [1, 10, 11, 13, 15, 16, 19], "document": [1, 18], "1": [1, 5, 11, 12, 16, 17, 19], "py_experiment": [1, 11, 12, 15, 16, 17, 19], "database_connector": [1, 3, 4, 6], "database_connector_lit": [1, 6], "database_connector_mysql": [1, 6], "experiment": [1, 6, 11, 12, 15, 17, 19], "py_experimenter_except": [1, 6], "result_processor": [1, 5, 6, 11, 12, 19], "util": [1, 6], "creat": [1, 2, 3, 5, 9, 10, 11, 12, 14, 16, 20], "sphinx": [1, 15, 17], "autoapi": [1, 17], "databaseconnector": [2, 3, 4], "database_credential_file_path": [2, 3, 4, 5, 19], "base": [2, 3, 4, 5, 7, 9, 10, 11, 12, 15, 16, 20], "abc": [2, 3], "helper": [2, 3], "provid": [2, 3, 5, 11, 12, 15, 16, 18, 19, 20], "standard": [2, 3], "wai": [2, 3], "an": [2, 3, 5, 8, 12, 16, 18, 19], "us": [2, 3, 5, 8, 10, 11, 12, 16, 18, 19], "inherit": [2, 3], "abstract": 2, "_extract_credenti": [2, 3, 4], "_test_connect": [2, 3, 4], "connect": [2, 3, 4, 9, 11, 12, 18], "close_connect": 2, "commit": [2, 15], "none": [2, 4, 5, 8, 11, 12], "execut": [2, 5, 10, 15, 16, 17, 20], "cursor": [2, 3, 4], "sql_statement": 2, "fetchal": 2, "create_table_if_not_exist": 2, "_exclude_fixed_column": 2, "column": [2, 3, 4, 5, 10, 12, 19], "list": [2, 3, 5, 8, 9, 10, 15, 16, 19], "str": [2, 3, 5, 8, 9, 12], "_table_exist": [2, 3, 4], "_create_t": [2, 3, 4], "_table_has_correct_structur": [2, 3, 4], "typed_field": [2, 3, 4], "classmethod": 2, "escape_sql_char": [2, 3, 4], "fill_tabl": 2, "paramet": [2, 5, 9, 12, 13, 16, 19, 20], "fixed_parameter_combin": [2, 5, 9, 11], "_check_combination_in_existing_row": 2, "combin": [2, 5, 11], "existing_row": 2, "keyfield_nam": [2, 9], "bool": [2, 3, 5, 8, 9], "_get_existing_row": [2, 3, 4], "column_nam": [2, 3, 4], "get_keyfield_values_to_execut": 2, "dict": [2, 5, 8, 11, 12, 19], "_write_to_databas": 2, "kei": [2, 5, 10, 15, 19], "valu": [2, 5, 8, 11, 12, 16, 19], "_update_databas": 2, "where": [2, 5, 15, 19], "not_executed_yet": 2, "delete_experiments_with_statu": 2, "statu": [2, 5, 8, 10, 11, 12, 16, 17, 19], "get_structure_from_t": [2, 3, 4], "get_tabl": [2, 5, 11, 12, 19], "panda": [2, 5, 10, 11, 12, 17, 19], "datafram": [2, 5, 10, 11, 12, 19], "databaseconnectorlit": 3, "_write_to_database_separ": [3, 4], "static": [3, 4, 5, 8], "arg": [3, 4], "databaseconnectormysql": 4, "experiment_configuration_file_path": [4, 5, 11, 12, 19], "configpars": [4, 5, 9], "_create_database_if_not_exist": 4, "credenti": [4, 5, 15, 16, 20], "_get_tablename_for_queri": 4, "pyexperiment": [5, 10, 14, 15, 17, 20], "o": [5, 11, 12, 19], "path": [5, 9, 11, 12, 15, 19], "join": [5, 11, 12, 19], "config": [5, 9, 11, 12, 19], "configur": [5, 9, 10, 16, 20], "cfg": [5, 11, 12, 19], "database_credenti": [5, 19], "table_nam": [5, 8, 19], "database_nam": [5, 19], "name": [5, 8, 9, 10, 11, 12, 15, 17, 19], "handl": [5, 10], "initi": [5, 9], "collect": 5, "experi": [5, 8, 9, 10, 16, 17, 20], "respect": 5, "result": [5, 8, 10, 11, 16, 17, 20], "set_config_valu": 5, "section_nam": 5, "modifi": [5, 18], "so": [5, 11, 15, 18, 19], "within": [5, 16, 19], "given": [5, 11, 12, 15, 19], "properti": 5, "identifi": [5, 16], "i": [5, 10, 11, 12, 15, 16, 17, 18, 19, 20], "overwritten": 5, "wa": [5, 16], "exist": [5, 9, 15, 19], "beforehand": 5, "The": [5, 11, 12, 15, 16, 17, 18, 19, 20], "section": [5, 19], "which": [5, 10, 11, 12, 15, 19], "should": [5, 11, 12, 15, 19], "set": [5, 11, 16, 19], "whose": 5, "rais": [5, 11, 12], "invalidconfigerror": [5, 7], "If": [5, 9, 11, 12, 14, 15, 19], "either": [5, 15, 19], "miss": [5, 10], "ha": [5, 11, 12, 14, 15, 16, 19, 20], "invalid": 5, "inform": [5, 9, 15, 16, 19], "get_config_valu": 5, "return": [5, 9], "except": [5, 7, 15], "type": [5, 19], "nooptionerror": 5, "call": [5, 8, 11, 12, 19], "part": [5, 10], "has_opt": 5, "check": [5, 10, 14, 15], "whether": [5, 18], "true": [5, 11, 12, 19], "_is_valid_configur": 5, "_config": [5, 8], "valid": 5, "e": [5, 10, 11, 12, 15, 16, 17, 19], "all": [5, 7, 10, 11, 12, 15, 16, 18, 19], "necessari": [5, 20], "field": [5, 8, 9, 19], "databas": [5, 8, 9, 10, 11, 12, 15, 16, 17, 20], "mysql": [5, 15, 17, 19, 20], "sqlite": [5, 11, 12, 19], "case": [5, 11, 12, 15, 19, 20], "ar": [5, 10, 11, 12, 15, 16, 17, 19, 20], "avail": [5, 10, 15, 19], "option": [5, 10, 19], "file": [5, 9, 10, 15, 16, 18, 20], "defin": [5, 16, 20], "host": [5, 19], "user": [5, 15, 16, 19], "password": [5, 19], "default": [5, 19], "fill_table_from_combin": [5, 11], "add": [5, 15], "row": [5, 10, 11, 12], "tabl": [5, 9, 10, 20], "first": [5, 10, 11, 12, 15], "doe": [5, 9], "been": [5, 14, 15, 16], "afterward": [5, 11, 15], "fill": [5, 10], "To": [5, 11, 12, 15], "end": [5, 12, 15, 19], "cartesian": [5, 11, 12, 19], "product": [5, 11, 12, 17, 19], "built": [5, 15], "each": [5, 10, 11, 16, 19], "make": [5, 12, 15, 19], "up": [5, 12], "note": [5, 11, 12, 19], "onli": [5, 10, 19], "ad": [5, 10, 11, 12, 15, 19], "do": [5, 11, 12, 15, 18, 19], "alreadi": 5, "For": [5, 11, 15, 19], "ani": [5, 11, 15, 16, 18, 19], "match": 5, "keyfield": [5, 10, 11, 12, 19], "from": [5, 8, 9, 11, 12, 16, 18, 19], "error": [5, 10, 11, 12, 16, 19], "In": [5, 12, 15, 19, 20], "follow": [5, 15, 17, 18, 19, 20], "exampl": [5, 11, 12, 14, 15, 16, 19], "method": [5, 8, 10, 11, 12, 15], "a2": 5, "2": [5, 11, 12, 16, 17, 19], "4": [5, 11, 12, 16, 17, 19], "b": [5, 15], "c": [5, 18], "cat": 5, "dog": 5, "accord": [5, 10, 11, 12, 15, 19], "four": [5, 19], "predefin": 5, "dictionari": [5, 8], "possibl": [5, 16], "parametercombinationerror": [5, 7], "fill_table_from_config": [5, 12, 19], "build": [5, 15, 17], "fill_table_with_row": [5, 12, 19], "A": [5, 15, 18, 19], "entri": [5, 11, 12, 19], "made": [5, 15], "pair": [5, 8], "valueerror": [5, 11, 12, 15], "experiment_funct": [5, 19], "callabl": 5, "resultprocessor": [5, 8, 11, 12, 19], "max_experi": [5, 11, 12, 19], "int": [5, 11, 12, 19], "random_ord": [5, 11, 12, 19], "fals": [5, 11, 12, 19], "pull": [5, 16], "open": [5, 11, 12, 16, 19], "them": [5, 8, 11, 15], "mani": [5, 19], "via": [5, 11, 12, 15, 17], "consid": 5, "its": [5, 19], "thei": [5, 12], "select": [5, 15, 19], "consecut": 5, "id": [5, 11, 12, 19], "rather": 5, "chosen": 5, "randomli": 5, "slim": 5, "chanc": 5, "two": 5, "instanti": 5, "same": [5, 11, 12, 15, 19], "time": [5, 8, 11, 12, 15], "amount": [5, 11, 12], "cpu": [5, 11, 12, 19], "determin": [5, 19], "job": [5, 11, 12, 19], "run": [5, 11, 12, 16, 19], "parallel": [5, 10, 11, 12, 19], "chang": [5, 10, 12, 15], "can": [5, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20], "continu": [5, 14], "written": [5, 11, 12, 19], "dure": [5, 16, 19], "success": 5, "correspond": [5, 16, 17, 19], "done": [5, 11, 12, 15, 16, 19], "otherwis": [5, 15, 18], "occur": [5, 15, 19], "log": [5, 15, 16, 19], "function": [5, 15, 16, 20], "differ": [5, 11, 12, 16, 20], "parametr": 5, "number": [5, 11, 12, 19], "indic": 5, "random": [5, 11, 12, 19], "fashion": [5, 19], "invalidvaluesinconfigur": [5, 7], "wrong": 5, "data": [5, 11, 12, 19], "_execution_wrapp": 5, "custom_field": [5, 12, 19], "therebi": [5, 17], "accordingli": 5, "when": [5, 10, 11, 12, 15, 19], "start": [5, 11, 12, 15, 19], "yet": 5, "finish": [5, 11, 12], "successfulli": 5, "custom": [5, 11, 12, 19], "respons": 5, "updat": [5, 10, 11, 12, 16], "reset_experi": [5, 12, 19], "delet": [5, 19], "have": [5, 10, 12, 15, 19], "again": [5, 12, 15], "featur": [5, 15, 16, 19], "reset": [5, 10, 12], "someth": 5, "went": 5, "pd": [5, 12], "pyexperimentererror": 7, "common": [7, 19], "class": 7, "non": 7, "exit": 7, "databaseerror": 7, "databasecreationerror": 7, "databaseconnectionerror": 7, "databasequeryerror": 7, "emptyfilldatabasecallerror": 7, "tableerror": 7, "invalidresultfielderror": 7, "tablehaswrongstructureerror": 7, "configerror": 7, "noconfigfileerror": 7, "filenotfounderror": 7, "result_logg": 8, "formatt": 8, "file_handl": 8, "credential_path": 8, "condit": [8, 10, 13, 16, 18, 19], "result_field": 8, "process": [8, 11, 12, 19], "whenev": 8, "you": [8, 11, 12, 14, 15, 19], "want": [8, 12, 15], "write": [8, 10, 11, 12, 16, 19, 20], "process_result": [8, 11, 12, 19], "param": [8, 9], "_add_timestamps_to_result": 8, "datetim": 8, "tupl": [8, 9, 12], "object": 8, "_change_statu": 8, "_write_error": 8, "error_msg": 8, "_set_machin": 8, "machine_id": 8, "_set_nam": 8, "_not_executed_yet": 8, "_valid_result_field": 8, "load_config": 9, "load": [9, 12], "timestamps_for_result_field": 9, "add_timestep_result_column": 9, "result_field_configur": 9, "extract_db_credentials_and_table_name_from_config": 9, "new": [9, 12, 15, 19], "one": [9, 11, 12, 15], "automat": [9, 15, 16, 17], "mysql_connector": 9, "get_keyfield_data": 9, "_generate_int_data": 9, "keyfield_valu": 9, "get_keyfield_nam": 9, "get_keyfield": 9, "get_result_field_nam": 9, "get_resultfield": 9, "get_field": 9, "clean": 9, "combine_fill_table_paramet": 9, "restructur": 10, "shortcut": 10, "longer": 10, "integ": [10, 19], "timestep": 10, "resultfield": [10, 11, 12, 19], "give": [10, 15], "instanc": [10, 16], "improv": [10, 15], "support": [10, 11, 16], "hpc": [10, 11, 12, 19], "cluster": [10, 16, 19], "usag": [10, 11, 13, 14, 16], "multipl": [10, 11, 12], "order": [10, 19], "obtain": [10, 11, 12, 18], "current": [10, 19], "state": [10, 15, 19], "easili": [10, 11, 12, 16, 17, 19], "export": [10, 19], "g": [10, 11, 12, 15, 16, 17, 19], "latex": [10, 19, 20], "robust": 10, "creation": 10, "extend": [10, 16], "readm": [10, 11, 12, 17], "jupyt": 10, "notebook": [10, 11, 12], "explain": [10, 11, 12], "how": [10, 14, 16, 19], "grid": [10, 13, 16, 19], "duplic": 10, "string": [10, 19], "quotat": [10, 19], "mark": [10, 19], "compon": 10, "No": 10, "summari": 10, "releas": 10, "show": [11, 12], "we": [11, 15], "programmat": 11, "vector": 11, "machin": [11, 12, 15, 16, 17], "instead": [11, 12, 19], "entir": 11, "need": [11, 12, 15, 16, 19], "instal": [11, 12, 15, 16], "pip": [11, 12, 15, 17], "scikit": [11, 12], "learn": [11, 12, 16, 17], "aspect": [11, 12], "repositori": [11, 12, 15, 16, 17], "here": [11, 12, 19], "import": [11, 12, 15, 19], "content": [11, 12, 19], "svm_experiment_exampl": 11, "max": [11, 12, 19], "5": [11, 12, 16, 17, 19], "dataset": [11, 12, 19], "cross_validation_split": [11, 12, 19], "seed": [11, 12, 16, 19], "kernel": [11, 12, 19], "gamma": [11, 12], "decim": [11, 12, 19], "degre": 11, "coef0": 11, "train_f1": [11, 12, 19], "train_accuraci": [11, 12, 19], "test_f1": [11, 12, 19], "test_accuraci": [11, 12, 19], "timestamp": [11, 12, 19], "sample_data": [11, 12, 19], "configuration_cond": 11, "w": [11, 12], "f": [11, 12], "next": [11, 12], "singl": [11, 12, 19], "dummi": [11, 12], "limit": [11, 12, 18], "reason": [11, 12], "code": [11, 12, 15, 16, 19], "It": [11, 12, 15, 16], "meant": [11, 12, 19], "core": [11, 12, 15, 16, 17, 19], "numpi": [11, 12, 15, 17], "np": [11, 12, 19], "sklearn": [11, 12], "load_iri": [11, 12], "model_select": [11, 12], "cross_valid": [11, 12], "pipelin": [11, 12, 19], "make_pipelin": [11, 12], "preprocess": [11, 12], "standardscal": [11, 12], "svm": [11, 12], "svc": [11, 12], "sleep": 11, "randint": 11, "def": [11, 12, 19], "run_svm": 11, "custom_config": [11, 12], "0": [11, 12, 16, 17], "x": [11, 12], "y": [11, 12], "target": [11, 12], "depend": [11, 15, 17], "linear": [11, 12, 19], "elif": 11, "poli": [11, 12, 19], "rbf": [11, 12, 19], "model": [11, 12], "iri": [11, 12, 19], "score": [11, 12, 19], "cv": [11, 12], "accuraci": [11, 12], "f1_micro": [11, 12], "return_train_scor": [11, 12], "mean": [11, 12, 19], "train_f1_micro": [11, 12, 19], "test_f1_micro": [11, 12, 19], "actual": [11, 12, 15, 19], "step": [11, 12, 15, 19, 20], "previous": [11, 12], "addition": [11, 12, 15, 19, 20], "especi": [11, 12, 19], "svm_experimenter_01": 11, "info": [11, 12], "root": [11, 12], "fix": [11, 19], "three": 11, "line": [11, 12, 19], "present": 11, "nan": [11, 12], "well": [11, 19], "thu": 11, "uncondition": 11, "6": [11, 12, 16, 19], "3": [11, 12, 15, 16, 17], "55": 11, "creation_d": [11, 12], "start_dat": [11, 12], "end_dat": [11, 12], "09": [11, 12, 16], "05": 11, "2022": [11, 12, 16, 18], "07": 11, "43": [11, 12], "7": [11, 12, 17], "8": [11, 12, 15, 17, 19], "9": [11, 12, 15, 17], "10": [11, 12, 16, 19], "11": [11, 12, 16, 17], "12": [11, 12], "13": [11, 12], "14": [11, 12, 16], "15": [11, 17], "16": 11, "17": [11, 16], "18": 11, "19": 11, "20": [11, 16], "21": 11, "22": 11, "23": 11, "24": [11, 19], "25": [11, 12], "26": 11, "27": 11, "28": 11, "29": 11, "30": 11, "31": [11, 12], "32": 11, "33": 11, "34": [11, 12], "35": 11, "36": 11, "37": 11, "38": 11, "39": [11, 12], "40": 11, "41": 11, "42": [11, 12, 19], "44": [11, 12], "45": [11, 12], "46": 11, "47": 11, "48": 11, "49": 11, "50": 11, "51": 11, "52": 11, "53": 11, "54": 11, "after": [11, 12, 15, 16], "other": [11, 12, 15, 18], "due": [11, 12, 15], "just": [11, 12], "predifin": [11, 12], "replac": [11, 12, 15], "avoid": [11, 12], "collus": [11, 12], "access": [11, 12, 19], "relat": [11, 12, 14], "approach": [11, 12, 19], "vm": [11, 12], "tornede3": [11, 12], "975": [11, 12], "9666666666666666": [11, 12], "56": 11, "57": 11, "58": 11, "59": 11, "00": 11, "01": [11, 16], "02": [11, 12, 16], "03": [11, 16], "04": [11, 16], "06": 11, "08": 11, "966667": [11, 12], "over": [12, 16], "extract": [12, 16, 19, 20], "about": [12, 15], "automl_conf_2023": 12, "best_paper_t": 12, "sigmoid": [12, 19], "longtext": [12, 19], "run_ml": 12, "read_csv": 12, "example_notebook": 12, "abov": [12, 18, 19], "therefor": [12, 15, 19], "new_data": [12, 19], "n": [12, 15], "8966666666666667": 12, "8933333333333333": 12, "9716666666666667": 12, "9666666666666668": 12, "9366666666666668": 12, "9333333333333333": 12, "traceback": 12, "most": 12, "recent": 12, "last": 12, "home": 12, "remote_develop": 12, "py": [12, 15, 17], "203": 12, "execution_wrapp": 12, "tmp": 12, "ipykernel_26915": 12, "664167659": 12, "nvalueerror": 12, "standardsca": 12, "971667": 12, "936667": 12, "933333": 12, "975000": 12, "896667": 12, "893333": 12, "h": 12, "As": [12, 19], "some": [12, 14, 15, 19], "those": 12, "were": 12, "anoth": [12, 15], "try": [12, 15], "describ": [12, 15, 19], "aggreg": 12, "result_table_agg": 12, "groupbi": [12, 19], "945": 12, "94": 12, "": 12, "to_latex": [12, 19], "index_nam": [12, 19], "begin": [12, 15], "tabular": 12, "lr": 12, "toprul": 12, "amp": 12, "test": [12, 16], "_f1": 12, "midrul": 12, "_data": 12, "bottomrul": 12, "1901797589": 12, "futurewarn": 12, "futur": 12, "version": [12, 15, 17], "expect": 12, "utilis": 12, "implement": 12, "styler": 12, "format": 12, "render": 12, "argument": 12, "signatur": 12, "mai": 12, "recommend": 12, "style": 12, "also": [12, 15, 19], "addit": [12, 15, 16, 19], "At": [14, 15], "point": 14, "don": 14, "t": 14, "know": 14, "mayb": 14, "find": 14, "suitabl": [14, 15], "solut": 14, "github": [14, 15, 17], "issu": [14, 16], "someon": [14, 15], "els": [14, 15], "similar": [14, 15], "situat": 14, "could": [14, 15], "anyth": 14, "pleas": [14, 15, 19], "would": 15, "appreci": 15, "see": 15, "idea": 15, "found": [15, 19], "bug": 15, "sure": [15, 19], "had": 15, "further": [15, 19], "feedback": 15, "plan": 15, "work": [15, 16, 19], "yourself": 15, "like": 15, "great": 15, "directli": 15, "comment": 15, "what": 15, "exactli": 15, "correctli": 15, "your": 15, "veri": 15, "mention": 15, "review": 15, "third": 15, "person": [15, 18], "understand": 15, "problem": 15, "vision": 15, "go": 15, "summar": [15, 19], "titl": 15, "neccessari": 15, "report": 15, "descript": [15, 17], "reproduc": 15, "produc": 15, "assumpt": [15, 16], "think": 15, "And": 15, "label": 15, "detail": 15, "usabl": 15, "enhanc": 15, "help": [15, 16], "face": 15, "provic": 15, "fork": 15, "branch": 15, "git": 15, "blog": 15, "post": 15, "click": 15, "button": 15, "top": 15, "right": [15, 18], "corner": 15, "clone": 15, "On": [15, 16], "local": 15, "folder": [15, 19], "command": 15, "ensur": 15, "usernam": 15, "http": [15, 17], "com": [15, 17], "remot": 15, "origin": 15, "upstream": 15, "switch": 15, "Then": 15, "feature_branch_nam": 15, "meaning": 15, "fetch": 15, "v": 15, "checkout": 15, "environ": 15, "anaconda": 15, "conda": 15, "env": 15, "python": [15, 17], "activ": 15, "pandoc": 15, "separ": [15, 19], "articl": 15, "suggest": 15, "befor": 15, "navig": 15, "project": [15, 16], "pytest": [15, 17], "succeed": 15, "manual": [15, 16, 19], "upgrad": 15, "final": [15, 19, 20], "push": 15, "manag": [15, 19], "packag": [15, 17], "tool": [15, 16, 17], "allow": [15, 19], "declar": 15, "upload": 15, "instruct": 15, "than": 15, "ones": 15, "below": [15, 19], "refer": [15, 16], "NOT": [15, 18], "itself": 15, "out": [15, 18], "latest": 15, "pyproject": 15, "toml": 15, "specif": 15, "second": 15, "package_nam": 15, "dev": [15, 17], "group": [15, 17], "lock": 15, "dist": 15, "good": 15, "mandatori": 15, "locat": [15, 19], "structur": [15, 20], "affect": 15, "succe": 15, "without": [15, 18, 19], "adapt": 15, "But": 15, "test_run_experi": 15, "test_run_mysql_experi": 15, "doc": 15, "shinx": 15, "websit": 15, "output": 15, "html": 15, "sourc": 15, "includ": [15, 16, 17, 18], "correct": 15, "destin": 15, "full": 15, "did": 15, "ml": [16, 17], "captur": [16, 17], "unifi": [16, 17], "manner": [16, 17], "design": 16, "uniqu": 16, "certain": 16, "input": [16, 20], "comput": [16, 20], "through": 16, "domain": [16, 19], "onc": 16, "distribut": [16, 18], "back": 16, "aris": [16, 18], "evalu": 16, "averag": 16, "workflow": 16, "api": [16, 17], "contribut": 16, "setup": 16, "develop": [16, 17], "poetri": [16, 17], "unit": 16, "request": 16, "author": [16, 17, 18], "team": 16, "licens": [16, 17], "changelog": 16, "v1": 16, "v0": 16, "2021": [16, 18], "index": 16, "modul": [16, 17], "search": 16, "partial": 16, "german": 16, "feder": 16, "ministri": 16, "econom": 16, "affair": 16, "climat": 16, "action": [16, 18], "fleme": 16, "03e16012f": 16, "research": [16, 17], "foundat": 16, "dfg": 16, "collabor": 16, "center": 16, "fly": 16, "sfb": 16, "901": 16, "160364472": 16, "pypi": 17, "upb": 17, "de": 17, "fehring2": 17, "mail": 17, "uni": 17, "paderborn": 17, "ifi": 17, "lmu": 17, "unisabana": 17, "edu": 17, "co": 17, "mit": [17, 18], "md": 17, "keyword": 17, "executor": 17, "classifi": 17, "stabl": 17, "intend": 17, "audienc": 17, "scienc": 17, "topic": 17, "scientif": 17, "engin": 17, "artifici": 17, "intellig": 17, "connector": 17, "jupyterlab": 17, "mock": 17, "nbsphinx": 17, "galleri": 17, "rtd": 17, "theme": 17, "recommonmark": 17, "system": 17, "requir": 17, "backend": [17, 19], "masonri": 17, "copyright": 18, "permiss": 18, "herebi": 18, "grant": 18, "free": 18, "charg": 18, "copi": 18, "softwar": 18, "associ": 18, "deal": 18, "restrict": 18, "merg": 18, "publish": 18, "sublicens": 18, "sell": 18, "permit": 18, "whom": 18, "furnish": 18, "subject": 18, "notic": 18, "shall": 18, "substanti": 18, "portion": 18, "THE": 18, "AS": 18, "warranti": 18, "OF": 18, "kind": 18, "express": 18, "OR": 18, "impli": 18, "BUT": 18, "TO": 18, "merchant": 18, "fit": 18, "FOR": 18, "particular": 18, "purpos": 18, "AND": 18, "noninfring": 18, "IN": 18, "NO": 18, "event": 18, "holder": 18, "BE": 18, "liabl": 18, "claim": 18, "damag": 18, "liabil": 18, "contract": 18, "tort": 18, "WITH": 18, "primarili": 19, "attach": 19, "store": 19, "boolean": 19, "both": 19, "annot": 19, "explicitli": 19, "specifi": 19, "varchar": 19, "255": 19, "maximum": 19, "take": 19, "usual": 19, "comma": 19, "neither": 19, "nor": 19, "whitespac": 19, "definit": 19, "tediou": 19, "task": 19, "togeth": 19, "size": 19, "form": 19, "stepsiz": 19, "explicit": 19, "under": 19, "ignor": 19, "By": 19, "run_experi": 19, "stuff": 19, "intermedi": 19, "more": 19, "few": 19, "elabor": 19, "assum": 19, "altern": 19, "complex": 19, "new_data_2": 19, "funtion": 19, "sequenti": 19, "until": 19, "turn": 19, "readi": 19, "termin": 19, "interrupt": 19, "result_t": 19, "print": 19, "view": 20}, "objects": {"": [[6, 0, 0, "-", "py_experimenter"]], "py_experimenter": [[2, 0, 0, "-", "database_connector"], [3, 0, 0, "-", "database_connector_lite"], [4, 0, 0, "-", "database_connector_mysql"], [5, 0, 0, "-", "experimenter"], [7, 0, 0, "-", "py_experimenter_exceptions"], [8, 0, 0, "-", "result_processor"], [9, 0, 0, "-", "utils"]], "py_experimenter.database_connector": [[2, 1, 1, "", "DatabaseConnector"]], "py_experimenter.database_connector.DatabaseConnector": [[2, 2, 1, "", "_check_combination_in_existing_rows"], [2, 2, 1, "", "_create_table"], [2, 2, 1, "", "_exclude_fixed_columns"], [2, 2, 1, "", "_extract_credentials"], [2, 2, 1, "", "_get_existing_rows"], [2, 2, 1, "", "_table_exists"], [2, 2, 1, "", "_table_has_correct_structure"], [2, 2, 1, "", "_test_connection"], [2, 2, 1, "", "_update_database"], [2, 2, 1, "", "_write_to_database"], [2, 2, 1, "", "close_connection"], [2, 2, 1, "", "commit"], [2, 2, 1, "", "connect"], [2, 2, 1, "", "create_table_if_not_existing"], [2, 2, 1, "", "cursor"], [2, 2, 1, "", "delete_experiments_with_status"], [2, 2, 1, "", "escape_sql_chars"], [2, 2, 1, "", "execute"], [2, 2, 1, "", "fetchall"], [2, 2, 1, "", "fill_table"], [2, 2, 1, "", "get_keyfield_values_to_execute"], [2, 2, 1, "", "get_structure_from_table"], [2, 2, 1, "", "get_table"], [2, 2, 1, "", "not_executed_yet"]], "py_experimenter.database_connector_lite": [[3, 1, 1, "", "DatabaseConnectorLITE"]], "py_experimenter.database_connector_lite.DatabaseConnectorLITE": [[3, 2, 1, "", "_create_table"], [3, 2, 1, "", "_extract_credentials"], [3, 2, 1, "", "_get_existing_rows"], [3, 2, 1, "", "_table_exists"], [3, 2, 1, "", "_table_has_correct_structure"], [3, 2, 1, "", "_test_connection"], [3, 3, 1, "", "_write_to_database_separator"], [3, 2, 1, "", "connect"], [3, 2, 1, "", "escape_sql_chars"], [3, 2, 1, "", "get_structure_from_table"]], "py_experimenter.database_connector_mysql": [[4, 1, 1, "", "DatabaseConnectorMYSQL"]], "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL": [[4, 2, 1, "", "_create_database_if_not_existing"], [4, 2, 1, "", "_create_table"], [4, 2, 1, "", "_extract_credentials"], [4, 2, 1, "", "_get_existing_rows"], [4, 2, 1, "", "_get_tablename_for_query"], [4, 2, 1, "", "_table_exists"], [4, 2, 1, "", "_table_has_correct_structure"], [4, 2, 1, "", "_test_connection"], [4, 3, 1, "", "_write_to_database_separator"], [4, 2, 1, "", "connect"], [4, 2, 1, "", "escape_sql_chars"], [4, 2, 1, "", "get_structure_from_table"]], "py_experimenter.experimenter": [[5, 1, 1, "", "PyExperimenter"]], "py_experimenter.experimenter.PyExperimenter": [[5, 2, 1, "", "_execution_wrapper"], [5, 2, 1, "", "_is_valid_configuration"], [5, 2, 1, "", "execute"], [5, 2, 1, "", "fill_table_from_combination"], [5, 2, 1, "", "fill_table_from_config"], [5, 2, 1, "", "fill_table_with_rows"], [5, 2, 1, "", "get_config_value"], [5, 2, 1, "", "get_table"], [5, 2, 1, "", "has_option"], [5, 2, 1, "", "reset_experiments"], [5, 2, 1, "", "set_config_value"]], "py_experimenter.py_experimenter_exceptions": [[7, 4, 1, "", "ConfigError"], [7, 4, 1, "", "DatabaseConnectionError"], [7, 4, 1, "", "DatabaseCreationError"], [7, 4, 1, "", "DatabaseError"], [7, 4, 1, "", "DatabaseQueryError"], [7, 4, 1, "", "EmptyFillDatabaseCallError"], [7, 4, 1, "", "InvalidConfigError"], [7, 4, 1, "", "InvalidResultFieldError"], [7, 4, 1, "", "InvalidValuesInConfiguration"], [7, 4, 1, "", "NoConfigFileError"], [7, 4, 1, "", "ParameterCombinationError"], [7, 4, 1, "", "PyExperimenterError"], [7, 4, 1, "", "TableError"], [7, 4, 1, "", "TableHasWrongStructureError"]], "py_experimenter.result_processor": [[8, 1, 1, "", "ResultProcessor"], [8, 5, 1, "", "file_handler"], [8, 5, 1, "", "formatter"], [8, 5, 1, "", "result_logger"]], "py_experimenter.result_processor.ResultProcessor": [[8, 2, 1, "", "_add_timestamps_to_results"], [8, 2, 1, "", "_change_status"], [8, 2, 1, "", "_not_executed_yet"], [8, 2, 1, "", "_set_machine"], [8, 2, 1, "", "_set_name"], [8, 2, 1, "", "_valid_result_fields"], [8, 2, 1, "", "_write_error"], [8, 2, 1, "", "process_results"]], "py_experimenter.utils": [[9, 6, 1, "", "_generate_int_data"], [9, 6, 1, "", "add_timestep_result_columns"], [9, 6, 1, "", "combine_fill_table_parameters"], [9, 6, 1, "", "extract_db_credentials_and_table_name_from_config"], [9, 6, 1, "", "get_fields"], [9, 6, 1, "", "get_keyfield_data"], [9, 6, 1, "", "get_keyfield_names"], [9, 6, 1, "", "get_keyfields"], [9, 6, 1, "", "get_result_field_names"], [9, 6, 1, "", "get_resultfields"], [9, 6, 1, "", "load_config"], [9, 6, 1, "", "timestamps_for_result_fields"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:exception", "5": "py:data", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "exception", "Python exception"], "5": ["py", "data", "Python data"], "6": ["py", "function", "Python function"]}, "titleterms": {"author": 0, "core": 0, "develop": [0, 15], "team": 0, "contribut": [0, 15], "api": 1, "refer": 1, "py_experiment": [2, 3, 4, 5, 6, 7, 8, 9], "database_connector": 2, "modul": [2, 3, 4, 5, 7, 8, 9], "content": [2, 3, 4, 5, 7, 8, 9], "class": [2, 3, 4, 5, 8], "database_connector_lit": 3, "database_connector_mysql": 4, "experiment": 5, "submodul": 6, "py_experimenter_except": 7, "result_processor": 8, "attribut": 8, "util": 9, "function": [9, 11, 12, 19], "changelog": 10, "v1": 10, "0": 10, "04": 10, "09": 10, "2022": 10, "featur": 10, "exampl": [10, 13], "fix": 10, "test": [10, 15], "v0": 10, "6": 10, "01": 10, "03": 10, "5": 10, "17": 10, "4": 10, "02": 10, "11": 10, "2021": 10, "3": 10, "20": 10, "10": 10, "2": 10, "1": 10, "14": 10, "condit": 11, "paramet": 11, "grid": 11, "experi": [11, 12, 19], "configur": [11, 12, 19], "file": [11, 12, 19], "defin": [11, 12, 19], "execut": [11, 12, 19], "pyexperiment": [11, 12, 16, 19], "initi": [11, 12], "fill": [11, 12, 19], "tabl": [11, 12, 16, 19], "gener": [12, 20], "usag": [12, 19], "restart": 12, "fail": 12, "result": [12, 19], "print": 12, "latex": 12, "need": 14, "help": 14, "how": 15, "creat": [15, 19], "an": 15, "issu": 15, "setup": 15, "workflow": [15, 20], "us": 15, "poetri": 15, "extend": 15, "unit": 15, "updat": 15, "document": [15, 16], "pull": 15, "request": 15, "welcom": 16, "": 16, "about": 16, "indic": 16, "acknowledg": 16, "instal": 17, "licens": 18, "databas": 19, "credenti": 19, "base": 19, "specif": 19, "row": 19, "reset": 19, "obtain": 19}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Authors": [[0, "authors"]], "Core Development Team": [[0, "core-development-team"]], "Contributions": [[0, "contributions"]], "API Reference": [[1, "api-reference"]], "py_experimenter.database_connector": [[2, "module-py_experimenter.database_connector"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [8, "classes"]], "py_experimenter.database_connector_lite": [[3, "module-py_experimenter.database_connector_lite"]], "py_experimenter.database_connector_mysql": [[4, "module-py_experimenter.database_connector_mysql"]], "py_experimenter.experimenter": [[5, "module-py_experimenter.experimenter"]], "py_experimenter": [[6, "module-py_experimenter"]], "Submodules": [[6, "submodules"]], "py_experimenter.py_experimenter_exceptions": [[7, "module-py_experimenter.py_experimenter_exceptions"]], "py_experimenter.result_processor": [[8, "module-py_experimenter.result_processor"]], "Attributes": [[8, "attributes"]], "py_experimenter.utils": [[9, "module-py_experimenter.utils"]], "Functions": [[9, "functions"]], "Changelog": [[10, "changelog"]], "v1.0.0 (04/09/2022)": [[10, "v1-0-0-04-09-2022"]], "Feature": [[10, "feature"]], "Examples": [[10, "examples"], [13, "examples"]], "Fix": [[10, "fix"]], "Tests": [[10, "tests"]], "v0.0.6 (01/03/2022)": [[10, "v0-0-6-01-03-2022"]], "v0.0.5 (17/01/2022)": [[10, "v0-0-5-17-01-2022"]], "v0.0.4 (02/11/2021)": [[10, "v0-0-4-02-11-2021"]], "v0.0.3 (20/10/2021)": [[10, "v0-0-3-20-10-2021"]], "v0.0.2 (20/10/2021)": [[10, "v0-0-2-20-10-2021"]], "v0.0.1 (14/10/2021)": [[10, "v0-0-1-14-10-2021"]], "Conditional Parameter Grids": [[11, "Conditional-Parameter-Grids"]], "Experiment Configuration File": [[11, "Experiment-Configuration-File"], [12, "Experiment-Configuration-File"], [19, "experiment-configuration-file"]], "Defining the execution function": [[11, "Defining-the-execution-function"], [12, "Defining-the-execution-function"]], "Executing PyExperimenter": [[11, "Executing-PyExperimenter"], [12, "Executing-PyExperimenter"]], "Initialize PyExperimenter": [[11, "Initialize-PyExperimenter"], [12, "Initialize-PyExperimenter"]], "Fill Table": [[11, "Fill-Table"], [12, "Fill-Table"]], "Execute PyExperimenter": [[11, "Execute-PyExperimenter"], [12, "Execute-PyExperimenter"]], "General Usage": [[12, "General-Usage"]], "Restart Failed Experiments": [[12, "Restart-Failed-Experiments"]], "Generating Result Table": [[12, "Generating-Result-Table"]], "Printing LaTex Table": [[12, "Printing-LaTex-Table"]], "Need Help?": [[14, "need-help"]], "How to Contribute": [[15, "how-to-contribute"]], "Creating an Issue": [[15, "creating-an-issue"]], "Setup Development Workflow": [[15, "setup-development-workflow"]], "How to use Poetry": [[15, "how-to-use-poetry"]], "Extend Unit Tests": [[15, "extend-unit-tests"]], "Update Documentation": [[15, "update-documentation"]], "Create Pull Request": [[15, "create-pull-request"]], "Welcome to PyExperimenter\u2019s documentation!": [[16, "welcome-to-pyexperimenter-s-documentation"]], "Documentation": [[16, null]], "About PyExperimenter": [[16, null]], "Indices and tables": [[16, "indices-and-tables"]], "Acknowledgements": [[16, "acknowledgements"]], "Installation": [[17, "installation"]], "License": [[18, "license"]], "Usage": [[19, "usage"]], "Database Credential File": [[19, "database-credential-file"]], "Defining the Experiment Function": [[19, "defining-the-experiment-function"]], "Executing the PyExperimenter": [[19, "executing-the-pyexperimenter"]], "Creating a PyExperimenter": [[19, "creating-a-pyexperimenter"]], "Fill Database Table Based on the Configuration File": [[19, "fill-database-table-based-on-the-configuration-file"]], "Fill Table with Specific Rows": [[19, "fill-table-with-specific-rows"]], "Execute Experiments": [[19, "execute-experiments"]], "Reset Experiments": [[19, "reset-experiments"]], "Obtain Results": [[19, "obtain-results"]], "General Workflow": [[20, "general-workflow"]]}, "indexentries": {"databaseconnector (class in py_experimenter.database_connector)": [[2, "py_experimenter.database_connector.DatabaseConnector"]], "_check_combination_in_existing_rows() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._check_combination_in_existing_rows"]], "_create_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._create_table"]], "_exclude_fixed_columns() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._exclude_fixed_columns"]], "_extract_credentials() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._extract_credentials"]], "_get_existing_rows() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._get_existing_rows"]], "_table_exists() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._table_exists"]], "_table_has_correct_structure() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._table_has_correct_structure"]], "_test_connection() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._test_connection"]], "_update_database() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._update_database"]], "_write_to_database() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector._write_to_database"]], "close_connection() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.close_connection"]], "commit() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.commit"]], "connect() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.connect"]], "create_table_if_not_existing() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.create_table_if_not_existing"]], "cursor() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.cursor"]], "delete_experiments_with_status() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.delete_experiments_with_status"]], "escape_sql_chars() (py_experimenter.database_connector.databaseconnector class method)": [[2, "py_experimenter.database_connector.DatabaseConnector.escape_sql_chars"]], "execute() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.execute"]], "fetchall() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.fetchall"]], "fill_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.fill_table"]], "get_keyfield_values_to_execute() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.get_keyfield_values_to_execute"]], "get_structure_from_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.get_structure_from_table"]], "get_table() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.get_table"]], "module": [[2, "module-py_experimenter.database_connector"], [3, "module-py_experimenter.database_connector_lite"], [4, "module-py_experimenter.database_connector_mysql"], [5, "module-py_experimenter.experimenter"], [6, "module-py_experimenter"], [7, "module-py_experimenter.py_experimenter_exceptions"], [8, "module-py_experimenter.result_processor"], [9, "module-py_experimenter.utils"]], "not_executed_yet() (py_experimenter.database_connector.databaseconnector method)": [[2, "py_experimenter.database_connector.DatabaseConnector.not_executed_yet"]], "py_experimenter.database_connector": [[2, "module-py_experimenter.database_connector"]], "databaseconnectorlite (class in py_experimenter.database_connector_lite)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE"]], "_create_table() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._create_table"]], "_extract_credentials() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._extract_credentials"]], "_get_existing_rows() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._get_existing_rows"]], "_table_exists() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._table_exists"]], "_table_has_correct_structure() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._table_has_correct_structure"]], "_test_connection() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._test_connection"]], "_write_to_database_separator (py_experimenter.database_connector_lite.databaseconnectorlite attribute)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE._write_to_database_separator"]], "connect() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.connect"]], "escape_sql_chars() (py_experimenter.database_connector_lite.databaseconnectorlite static method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.escape_sql_chars"]], "get_structure_from_table() (py_experimenter.database_connector_lite.databaseconnectorlite method)": [[3, "py_experimenter.database_connector_lite.DatabaseConnectorLITE.get_structure_from_table"]], "py_experimenter.database_connector_lite": [[3, "module-py_experimenter.database_connector_lite"]], "databaseconnectormysql (class in py_experimenter.database_connector_mysql)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL"]], "_create_database_if_not_existing() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._create_database_if_not_existing"]], "_create_table() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._create_table"]], "_extract_credentials() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._extract_credentials"]], "_get_existing_rows() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._get_existing_rows"]], "_get_tablename_for_query() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._get_tablename_for_query"]], "_table_exists() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._table_exists"]], "_table_has_correct_structure() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._table_has_correct_structure"]], "_test_connection() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._test_connection"]], "_write_to_database_separator (py_experimenter.database_connector_mysql.databaseconnectormysql attribute)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL._write_to_database_separator"]], "connect() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.connect"]], "escape_sql_chars() (py_experimenter.database_connector_mysql.databaseconnectormysql static method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.escape_sql_chars"]], "get_structure_from_table() (py_experimenter.database_connector_mysql.databaseconnectormysql method)": [[4, "py_experimenter.database_connector_mysql.DatabaseConnectorMYSQL.get_structure_from_table"]], "py_experimenter.database_connector_mysql": [[4, "module-py_experimenter.database_connector_mysql"]], "pyexperimenter (class in py_experimenter.experimenter)": [[5, "py_experimenter.experimenter.PyExperimenter"]], "_execution_wrapper() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter._execution_wrapper"]], "_is_valid_configuration() (py_experimenter.experimenter.pyexperimenter static method)": [[5, "py_experimenter.experimenter.PyExperimenter._is_valid_configuration"]], "execute() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter.execute"]], "fill_table_from_combination() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter.fill_table_from_combination"]], "fill_table_from_config() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter.fill_table_from_config"]], "fill_table_with_rows() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter.fill_table_with_rows"]], "get_config_value() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter.get_config_value"]], "get_table() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter.get_table"]], "has_option() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter.has_option"]], "py_experimenter.experimenter": [[5, "module-py_experimenter.experimenter"]], "reset_experiments() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter.reset_experiments"]], "set_config_value() (py_experimenter.experimenter.pyexperimenter method)": [[5, "py_experimenter.experimenter.PyExperimenter.set_config_value"]], "py_experimenter": [[6, "module-py_experimenter"]], "configerror": [[7, "py_experimenter.py_experimenter_exceptions.ConfigError"]], "databaseconnectionerror": [[7, "py_experimenter.py_experimenter_exceptions.DatabaseConnectionError"]], "databasecreationerror": [[7, "py_experimenter.py_experimenter_exceptions.DatabaseCreationError"]], "databaseerror": [[7, "py_experimenter.py_experimenter_exceptions.DatabaseError"]], "databasequeryerror": [[7, "py_experimenter.py_experimenter_exceptions.DatabaseQueryError"]], "emptyfilldatabasecallerror": [[7, "py_experimenter.py_experimenter_exceptions.EmptyFillDatabaseCallError"]], "invalidconfigerror": [[7, "py_experimenter.py_experimenter_exceptions.InvalidConfigError"]], "invalidresultfielderror": [[7, "py_experimenter.py_experimenter_exceptions.InvalidResultFieldError"]], "invalidvaluesinconfiguration": [[7, "py_experimenter.py_experimenter_exceptions.InvalidValuesInConfiguration"]], "noconfigfileerror": [[7, "py_experimenter.py_experimenter_exceptions.NoConfigFileError"]], "parametercombinationerror": [[7, "py_experimenter.py_experimenter_exceptions.ParameterCombinationError"]], "pyexperimentererror": [[7, "py_experimenter.py_experimenter_exceptions.PyExperimenterError"]], "tableerror": [[7, "py_experimenter.py_experimenter_exceptions.TableError"]], "tablehaswrongstructureerror": [[7, "py_experimenter.py_experimenter_exceptions.TableHasWrongStructureError"]], "py_experimenter.py_experimenter_exceptions": [[7, "module-py_experimenter.py_experimenter_exceptions"]], "resultprocessor (class in py_experimenter.result_processor)": [[8, "py_experimenter.result_processor.ResultProcessor"]], "_add_timestamps_to_results() (py_experimenter.result_processor.resultprocessor static method)": [[8, "py_experimenter.result_processor.ResultProcessor._add_timestamps_to_results"]], "_change_status() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._change_status"]], "_not_executed_yet() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._not_executed_yet"]], "_set_machine() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._set_machine"]], "_set_name() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._set_name"]], "_valid_result_fields() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._valid_result_fields"]], "_write_error() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor._write_error"]], "file_handler (in module py_experimenter.result_processor)": [[8, "py_experimenter.result_processor.file_handler"]], "formatter (in module py_experimenter.result_processor)": [[8, "py_experimenter.result_processor.formatter"]], "process_results() (py_experimenter.result_processor.resultprocessor method)": [[8, "py_experimenter.result_processor.ResultProcessor.process_results"]], "py_experimenter.result_processor": [[8, "module-py_experimenter.result_processor"]], "result_logger (in module py_experimenter.result_processor)": [[8, "py_experimenter.result_processor.result_logger"]], "_generate_int_data() (in module py_experimenter.utils)": [[9, "py_experimenter.utils._generate_int_data"]], "add_timestep_result_columns() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.add_timestep_result_columns"]], "combine_fill_table_parameters() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.combine_fill_table_parameters"]], "extract_db_credentials_and_table_name_from_config() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.extract_db_credentials_and_table_name_from_config"]], "get_fields() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_fields"]], "get_keyfield_data() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_keyfield_data"]], "get_keyfield_names() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_keyfield_names"]], "get_keyfields() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_keyfields"]], "get_result_field_names() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_result_field_names"]], "get_resultfields() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.get_resultfields"]], "load_config() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.load_config"]], "py_experimenter.utils": [[9, "module-py_experimenter.utils"]], "timestamps_for_result_fields() (in module py_experimenter.utils)": [[9, "py_experimenter.utils.timestamps_for_result_fields"]]}})