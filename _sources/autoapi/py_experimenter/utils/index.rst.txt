:py:mod:`py_experimenter.utils`
===============================

.. py:module:: py_experimenter.utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   py_experimenter.utils.load_config
   py_experimenter.utils.extract_codecarbon_config
   py_experimenter.utils.write_codecarbon_config
   py_experimenter.utils.extract_codecarbon_columns
   py_experimenter.utils.get_keyfield_data
   py_experimenter.utils.extract_db_credentials_and_table_name_from_config
   py_experimenter.utils.get_keyfield_names
   py_experimenter.utils.get_keyfields
   py_experimenter.utils.get_result_field_names
   py_experimenter.utils.get_resultfields
   py_experimenter.utils.extract_columns
   py_experimenter.utils.timestamps_for_result_fields
   py_experimenter.utils.add_timestep_result_columns
   py_experimenter.utils.extract_logtables
   py_experimenter.utils.combine_fill_table_parameters
   py_experimenter.utils._generate_int_data
   py_experimenter.utils.get_timestamp_representation



.. py:function:: load_config(path)

   Load and return configuration file.
   :param path: path to the config file
   :return: configuration file


.. py:function:: extract_codecarbon_config(config: configparser.ConfigParser) -> Tuple[configparser.ConfigParser]


.. py:function:: write_codecarbon_config(codecarbon_config: configparser.ConfigParser)


.. py:function:: extract_codecarbon_columns(with_type: bool = True)


.. py:function:: get_keyfield_data(config)


.. py:function:: extract_db_credentials_and_table_name_from_config(config)

   Initialize connection to database based on configuration file. If the tables does not exist, a new one will be
   created automatically.
   :param config: Configuration file with database and experiment information
   :return: mysql_connector and table name from the config file


.. py:function:: get_keyfield_names(config: configparser.ConfigParser) -> List[str]


.. py:function:: get_keyfields(config: configparser.ConfigParser) -> List[Tuple[str, str]]


.. py:function:: get_result_field_names(config: configparser.ConfigParser) -> List[str]


.. py:function:: get_resultfields(config: configparser.ConfigParser) -> List[Tuple[str, str]]


.. py:function:: extract_columns(fields: str) -> List[Tuple[str, str]]

   Clean field names
   :param fields: List of field names
   :return: Cleaned list of field names


.. py:function:: timestamps_for_result_fields(config: configparser.ConfigParser) -> bool


.. py:function:: add_timestep_result_columns(result_field_configuration)


.. py:function:: extract_logtables(config: configparser.ConfigParser, experiment_table_name: str) -> Optional[Dict[str, List[str]]]


.. py:function:: combine_fill_table_parameters(keyfield_names, parameters, fixed_parameter_combinations)


.. py:function:: _generate_int_data(keyfield_values)


.. py:function:: get_timestamp_representation() -> str


